// Copyright 2018 Maintainers of NUKE.
// Distributed under the MIT License.
// https://github.com/nuke-build/nuke/blob/master/LICENSE

// Generated with Nuke.CodeGeneration, Version: 0.7.0 [CommitSha: 9d3d3d7e].
// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureBatch.json.

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTasks
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public static string AzureBatchPath => ToolPathResolver.GetPathExecutable("az");
        /// <summary><p>Manage Azure Batch.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatch(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool logOutput = true, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureBatchPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, null, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatch(Configure<AzureBatchSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountCreate(Configure<AzureBatchAccountCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountDelete(Configure<AzureBatchAccountDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountList(Configure<AzureBatchAccountListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountLogin(Configure<AzureBatchAccountLoginSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountLoginSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountSet(Configure<AzureBatchAccountSetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountSetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountShow(Configure<AzureBatchAccountShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationCreate(Configure<AzureBatchApplicationCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationDelete(Configure<AzureBatchApplicationDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationList(Configure<AzureBatchApplicationListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationSet(Configure<AzureBatchApplicationSetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationSetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationShow(Configure<AzureBatchApplicationShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchCertificateCreate(Configure<AzureBatchCertificateCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchCertificateCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchCertificateDelete(Configure<AzureBatchCertificateDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchCertificateDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchCertificateList(Configure<AzureBatchCertificateListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchCertificateListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchCertificateShow(Configure<AzureBatchCertificateShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchCertificateShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleCreate(Configure<AzureBatchJobScheduleCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleDelete(Configure<AzureBatchJobScheduleDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleDisable(Configure<AzureBatchJobScheduleDisableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleDisableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleEnable(Configure<AzureBatchJobScheduleEnableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleEnableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleList(Configure<AzureBatchJobScheduleListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleReset(Configure<AzureBatchJobScheduleResetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleResetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleSet(Configure<AzureBatchJobScheduleSetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleSetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleShow(Configure<AzureBatchJobScheduleShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobScheduleStop(Configure<AzureBatchJobScheduleStopSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobScheduleStopSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobCreate(Configure<AzureBatchJobCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobDelete(Configure<AzureBatchJobDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobDisable(Configure<AzureBatchJobDisableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobDisableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobEnable(Configure<AzureBatchJobEnableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobEnableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobList(Configure<AzureBatchJobListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobReset(Configure<AzureBatchJobResetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobResetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobSet(Configure<AzureBatchJobSetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobSetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobShow(Configure<AzureBatchJobShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobStop(Configure<AzureBatchJobStopSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobStopSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchLocation(Configure<AzureBatchLocationSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchLocationSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeDelete(Configure<AzureBatchNodeDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeList(Configure<AzureBatchNodeListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeReboot(Configure<AzureBatchNodeRebootSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeRebootSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeReimage(Configure<AzureBatchNodeReimageSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeReimageSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeShow(Configure<AzureBatchNodeShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolCreate(Configure<AzureBatchPoolCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolDelete(Configure<AzureBatchPoolDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolList(Configure<AzureBatchPoolListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolReset(Configure<AzureBatchPoolResetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolResetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolResize(Configure<AzureBatchPoolResizeSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolResizeSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolSet(Configure<AzureBatchPoolSetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolSetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolShow(Configure<AzureBatchPoolShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskCreate(Configure<AzureBatchTaskCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskDelete(Configure<AzureBatchTaskDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskList(Configure<AzureBatchTaskListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskReactivate(Configure<AzureBatchTaskReactivateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskReactivateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskReset(Configure<AzureBatchTaskResetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskResetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskShow(Configure<AzureBatchTaskShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskStop(Configure<AzureBatchTaskStopSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskStopSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountAutostorageKeysSync(Configure<AzureBatchAccountAutostorageKeysSyncSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountAutostorageKeysSyncSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountKeysList(Configure<AzureBatchAccountKeysListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountKeysListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchAccountKeysRenew(Configure<AzureBatchAccountKeysRenewSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchAccountKeysRenewSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationPackageActivate(Configure<AzureBatchApplicationPackageActivateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationPackageActivateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationPackageCreate(Configure<AzureBatchApplicationPackageCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationPackageCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationPackageDelete(Configure<AzureBatchApplicationPackageDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationPackageDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationPackageShow(Configure<AzureBatchApplicationPackageShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationPackageShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationSummaryList(Configure<AzureBatchApplicationSummaryListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationSummaryListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchApplicationSummaryShow(Configure<AzureBatchApplicationSummaryShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchApplicationSummaryShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobAllStatisticsShow(Configure<AzureBatchJobAllStatisticsShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobAllStatisticsShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobPrepReleaseStatusList(Configure<AzureBatchJobPrepReleaseStatusListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobPrepReleaseStatusListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchJobTaskCountsShow(Configure<AzureBatchJobTaskCountsShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchJobTaskCountsShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchLocationQuotasShow(Configure<AzureBatchLocationQuotasShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchLocationQuotasShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeFileDelete(Configure<AzureBatchNodeFileDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeFileDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeFileDownload(Configure<AzureBatchNodeFileDownloadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeFileDownloadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeFileList(Configure<AzureBatchNodeFileListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeFileListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeFileShow(Configure<AzureBatchNodeFileShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeFileShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeRemoteDesktopDownload(Configure<AzureBatchNodeRemoteDesktopDownloadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeRemoteDesktopDownloadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeRemoteLoginSettingsShow(Configure<AzureBatchNodeRemoteLoginSettingsShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeRemoteLoginSettingsShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeSchedulingDisable(Configure<AzureBatchNodeSchedulingDisableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeSchedulingDisableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeSchedulingEnable(Configure<AzureBatchNodeSchedulingEnableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeSchedulingEnableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeServiceLogsUpload(Configure<AzureBatchNodeServiceLogsUploadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeServiceLogsUploadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeUserCreate(Configure<AzureBatchNodeUserCreateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeUserCreateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeUserDelete(Configure<AzureBatchNodeUserDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeUserDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchNodeUserReset(Configure<AzureBatchNodeUserResetSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchNodeUserResetSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolAllStatisticsShow(Configure<AzureBatchPoolAllStatisticsShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolAllStatisticsShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolAutoscaleDisable(Configure<AzureBatchPoolAutoscaleDisableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolAutoscaleDisableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolAutoscaleEnable(Configure<AzureBatchPoolAutoscaleEnableSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolAutoscaleEnableSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolAutoscaleEvaluate(Configure<AzureBatchPoolAutoscaleEvaluateSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolAutoscaleEvaluateSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolNodeAgentSkusList(Configure<AzureBatchPoolNodeAgentSkusListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolNodeAgentSkusListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolNodeCountsList(Configure<AzureBatchPoolNodeCountsListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolNodeCountsListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolOsUpgrade(Configure<AzureBatchPoolOsUpgradeSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolOsUpgradeSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchPoolUsageMetricsList(Configure<AzureBatchPoolUsageMetricsListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchPoolUsageMetricsListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskFileDelete(Configure<AzureBatchTaskFileDeleteSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskFileDeleteSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskFileDownload(Configure<AzureBatchTaskFileDownloadSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskFileDownloadSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskFileList(Configure<AzureBatchTaskFileListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskFileListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskFileShow(Configure<AzureBatchTaskFileShowSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskFileShowSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary><p>Manage Azure Batch.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/batch?view=azure-cli-latest">official website</a>.</p></summary>
        public static IReadOnlyCollection<Output> AzureBatchTaskSubtaskList(Configure<AzureBatchTaskSubtaskListSettings> configurator = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureBatchTaskSubtaskListSettings());
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
    }
    #region AzureBatchSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The region in which to create the account.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The KeyVault name or resource ID to be used for an account with a pool allocation mode of 'User Subscription'.</p></summary>
        public virtual string Keyvault { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary><p>The storage account name or resource ID to be used for auto storage.</p></summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary><p>Space-separated tags in 'key[=value]' format.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account create")
              .Add("--location {value}", Location)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--keyvault {value}", Keyvault)
              .Add("--no-wait", NoWait)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--tags {value}", Tags)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--no-wait", NoWait)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountLoginSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountLoginSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Using Shared Key authentication, if not specified, it will use Azure Active Directory authentication.</p></summary>
        public virtual string SharedKeyAuth { get; internal set; }
        /// <summary><p>Display the credential information for the Batch account.</p></summary>
        public virtual string Show { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account login")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--shared-key-auth {value}", SharedKeyAuth)
              .Add("--show {value}", Show)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountSetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The storage account name or resource ID to be used for auto storage.</p></summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account set")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--tags {value}", Tags)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the batch account to show. If not specified will display currently set account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group. If not specified will display currently set account.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Specify to indicate whether packages within the application may be overwritten using the same version string. True if flag present.</p></summary>
        public virtual string AllowUpdates { get; internal set; }
        /// <summary><p>The display name for the application.</p></summary>
        public virtual string DisplayName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application create")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--allow-updates {value}", AllowUpdates)
              .Add("--display-name {value}", DisplayName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application delete")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The maximum number of items to return in the response.</p></summary>
        public virtual int? Maxresults { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application list")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--maxresults {value}", Maxresults)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationSetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Specify to indicate whether packages within the application may be overwritten using the same version string. Specify either 'true' or 'false' to update the property.</p></summary>
        public virtual string AllowUpdates { get; internal set; }
        /// <summary><p>The package to use if a client requests the application but does not specify a version.</p></summary>
        public virtual string DefaultVersion { get; internal set; }
        /// <summary><p>The display name for the application.</p></summary>
        public virtual string DisplayName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application set")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--allow-updates {value}", AllowUpdates)
              .Add("--default-version {value}", DefaultVersion)
              .Add("--display-name {value}", DisplayName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application show")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchCertificateCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchCertificateCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The certificate file: cer file or pfx file.</p></summary>
        public virtual string CertificateFile { get; internal set; }
        /// <summary><p>The certificate thumbprint.</p></summary>
        public virtual string Thumbprint { get; internal set; }
        /// <summary><p>The password to access the certificate's private key.</p></summary>
        public virtual string Password { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch certificate create")
              .Add("--certificate-file {value}", CertificateFile)
              .Add("--thumbprint {value}", Thumbprint)
              .Add("--password {value}", Password, secret: true)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchCertificateDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchCertificateDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The certificate thumbprint.</p></summary>
        public virtual string Thumbprint { get; internal set; }
        /// <summary><p>Cancel the failed certificate deletion operation.</p></summary>
        public virtual string Abort { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch certificate delete")
              .Add("--thumbprint {value}", Thumbprint)
              .Add("--abort {value}", Abort)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchCertificateListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchCertificateListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch certificate list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchCertificateShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchCertificateShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The certificate thumbprint.</p></summary>
        public virtual string Thumbprint { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch certificate show")
              .Add("--thumbprint {value}", Thumbprint)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>A file containing the cloud job schedule specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Cloud Job Schedule Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Required. A string that uniquely identifies the schedule within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p></summary>
        public virtual string Id { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        public virtual BatchJobScheduleOnAllTasksComplete OnAllTasksComplete { get; internal set; }
        /// <summary><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        public virtual int? Priority { get; internal set; }
        /// <summary><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        public virtual string UsesTaskDependencies { get; internal set; }
        /// <summary><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        public virtual int? JobMaxTaskRetryCount { get; internal set; }
        /// <summary><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        public virtual string JobMaxWallClockTime { get; internal set; }
        /// <summary><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        public virtual string JobManagerTaskCommandLine { get; internal set; }
        /// <summary><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        public virtual string JobManagerTaskId { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string JobManagerTaskResourceFiles { get; internal set; }
        /// <summary><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string DoNotRunAfter { get; internal set; }
        /// <summary><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string DoNotRunUntil { get; internal set; }
        /// <summary><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string RecurrenceInterval { get; internal set; }
        /// <summary><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string StartWindow { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule create")
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--id {value}", Id)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--on-all-tasks-complete {value}", OnAllTasksComplete)
              .Add("--priority {value}", Priority)
              .Add("--uses-task-dependencies {value}", UsesTaskDependencies)
              .Add("--job-max-task-retry-count {value}", JobMaxTaskRetryCount)
              .Add("--job-max-wall-clock-time {value}", JobMaxWallClockTime)
              .Add("--job-manager-task-command-line {value}", JobManagerTaskCommandLine)
              .Add("--job-manager-task-id {value}", JobManagerTaskId)
              .Add("--job-manager-task-resource-files {value}", JobManagerTaskResourceFiles)
              .Add("--pool-id {value}", PoolId)
              .Add("--do-not-run-after {value}", DoNotRunAfter)
              .Add("--do-not-run-until {value}", DoNotRunUntil)
              .Add("--recurrence-interval {value}", RecurrenceInterval)
              .Add("--start-window {value}", StartWindow)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to delete.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule delete")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleDisableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleDisableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to disable.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule disable")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleEnableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleEnableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to enable.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule enable")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleResetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleResetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to update.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>A file containing the job schedule update parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> JobMetadata => JobMetadataInternal.AsReadOnly();
        internal Dictionary<string, object> JobMetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        public virtual BatchJobScheduleOnAllTasksComplete OnAllTasksComplete { get; internal set; }
        /// <summary><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        public virtual int? Priority { get; internal set; }
        /// <summary><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        public virtual string UsesTaskDependencies { get; internal set; }
        /// <summary><p>A list of application packages that the Batch service will deploy to the compute node before running the command line. Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        public virtual string JobManagerTaskApplicationPackageReferences { get; internal set; }
        /// <summary><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        public virtual string JobManagerTaskCommandLine { get; internal set; }
        /// <summary><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> JobManagerTaskEnvironmentSettings => JobManagerTaskEnvironmentSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> JobManagerTaskEnvironmentSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        public virtual string JobManagerTaskId { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string JobManagerTaskResourceFiles { get; internal set; }
        /// <summary><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string DoNotRunAfter { get; internal set; }
        /// <summary><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string DoNotRunUntil { get; internal set; }
        /// <summary><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string RecurrenceInterval { get; internal set; }
        /// <summary><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string StartWindow { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule reset")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--job-metadata {value}", JobMetadata, "{key}={value}", separator: ' ')
              .Add("--on-all-tasks-complete {value}", OnAllTasksComplete)
              .Add("--priority {value}", Priority)
              .Add("--uses-task-dependencies {value}", UsesTaskDependencies)
              .Add("--job-manager-task-application-package-references {value}", JobManagerTaskApplicationPackageReferences)
              .Add("--job-manager-task-command-line {value}", JobManagerTaskCommandLine)
              .Add("--job-manager-task-environment-settings {value}", JobManagerTaskEnvironmentSettings, "{key}={value}", separator: ' ')
              .Add("--job-manager-task-id {value}", JobManagerTaskId)
              .Add("--job-manager-task-resource-files {value}", JobManagerTaskResourceFiles)
              .Add("--pool-id {value}", PoolId)
              .Add("--do-not-run-after {value}", DoNotRunAfter)
              .Add("--do-not-run-until {value}", DoNotRunUntil)
              .Add("--recurrence-interval {value}", RecurrenceInterval)
              .Add("--start-window {value}", StartWindow)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleSetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to update.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>A file containing the job schedule patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> JobMetadata => JobMetadataInternal.AsReadOnly();
        internal Dictionary<string, object> JobMetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        public virtual BatchJobScheduleOnAllTasksComplete OnAllTasksComplete { get; internal set; }
        /// <summary><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        public virtual int? Priority { get; internal set; }
        /// <summary><p>Whether tasks in the job can define dependencies on each other. The default is false. Specify either 'true' or 'false' to update the property.</p></summary>
        public virtual string UsesTaskDependencies { get; internal set; }
        /// <summary><p>A list of application packages that the Batch service will deploy to the compute node before running the command line. Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        public virtual string JobManagerTaskApplicationPackageReferences { get; internal set; }
        /// <summary><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        public virtual string JobManagerTaskCommandLine { get; internal set; }
        /// <summary><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> JobManagerTaskEnvironmentSettings => JobManagerTaskEnvironmentSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> JobManagerTaskEnvironmentSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        public virtual string JobManagerTaskId { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string JobManagerTaskResourceFiles { get; internal set; }
        /// <summary><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string DoNotRunAfter { get; internal set; }
        /// <summary><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string DoNotRunUntil { get; internal set; }
        /// <summary><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string RecurrenceInterval { get; internal set; }
        /// <summary><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string StartWindow { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule set")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--job-metadata {value}", JobMetadata, "{key}={value}", separator: ' ')
              .Add("--on-all-tasks-complete {value}", OnAllTasksComplete)
              .Add("--priority {value}", Priority)
              .Add("--uses-task-dependencies {value}", UsesTaskDependencies)
              .Add("--job-manager-task-application-package-references {value}", JobManagerTaskApplicationPackageReferences)
              .Add("--job-manager-task-command-line {value}", JobManagerTaskCommandLine)
              .Add("--job-manager-task-environment-settings {value}", JobManagerTaskEnvironmentSettings, "{key}={value}", separator: ' ')
              .Add("--job-manager-task-id {value}", JobManagerTaskId)
              .Add("--job-manager-task-resource-files {value}", JobManagerTaskResourceFiles)
              .Add("--pool-id {value}", PoolId)
              .Add("--do-not-run-after {value}", DoNotRunAfter)
              .Add("--do-not-run-until {value}", DoNotRunUntil)
              .Add("--recurrence-interval {value}", RecurrenceInterval)
              .Add("--start-window {value}", StartWindow)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to get.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule show")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobScheduleStopSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobScheduleStopSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule to terminates.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job-schedule stop")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>A file containing the job specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Required. A string that uniquely identifies the job within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p></summary>
        public virtual string Id { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.</p></summary>
        public virtual int? Priority { get; internal set; }
        /// <summary><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        public virtual string UsesTaskDependencies { get; internal set; }
        /// <summary><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        public virtual int? JobMaxTaskRetryCount { get; internal set; }
        /// <summary><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        public virtual string JobMaxWallClockTime { get; internal set; }
        /// <summary><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        public virtual string JobManagerTaskCommandLine { get; internal set; }
        /// <summary><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> JobManagerTaskEnvironmentSettings => JobManagerTaskEnvironmentSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> JobManagerTaskEnvironmentSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        public virtual string JobManagerTaskId { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string JobManagerTaskResourceFiles { get; internal set; }
        /// <summary><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job create")
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--id {value}", Id)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--priority {value}", Priority)
              .Add("--uses-task-dependencies {value}", UsesTaskDependencies)
              .Add("--job-max-task-retry-count {value}", JobMaxTaskRetryCount)
              .Add("--job-max-wall-clock-time {value}", JobMaxWallClockTime)
              .Add("--job-manager-task-command-line {value}", JobManagerTaskCommandLine)
              .Add("--job-manager-task-environment-settings {value}", JobManagerTaskEnvironmentSettings, "{key}={value}", separator: ' ')
              .Add("--job-manager-task-id {value}", JobManagerTaskId)
              .Add("--job-manager-task-resource-files {value}", JobManagerTaskResourceFiles)
              .Add("--pool-id {value}", PoolId)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job to delete.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job delete")
              .Add("--job-id {value}", JobId)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobDisableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobDisableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job to disable.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>What to do with active tasks associated with the job.</p></summary>
        public virtual BatchJobDisableDisableTasks DisableTasks { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job disable")
              .Add("--job-id {value}", JobId)
              .Add("--disable-tasks {value}", DisableTasks)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobEnableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobEnableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job to enable.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job enable")
              .Add("--job-id {value}", JobId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job schedule from which you want to get a list of jobs. If omitted, lists all jobs in the account.</p></summary>
        public virtual string JobScheduleId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An OData $filter clause.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job list")
              .Add("--job-schedule-id {value}", JobScheduleId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobResetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobResetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job whose properties you want to update.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>A file containing the job update parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the job as metadata. If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The action the Batch service should take when all tasks in the job are in the completed state. If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a job's completion behavior may not be changed from terminatejob to noaction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.</p></summary>
        public virtual BatchJobScheduleOnAllTasksComplete OnAllTasksComplete { get; internal set; }
        /// <summary><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.</p></summary>
        public virtual int? Priority { get; internal set; }
        /// <summary><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        public virtual int? JobMaxTaskRetryCount { get; internal set; }
        /// <summary><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        public virtual string JobMaxWallClockTime { get; internal set; }
        /// <summary><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job reset")
              .Add("--job-id {value}", JobId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--on-all-tasks-complete {value}", OnAllTasksComplete)
              .Add("--priority {value}", Priority)
              .Add("--job-max-task-retry-count {value}", JobMaxTaskRetryCount)
              .Add("--job-max-wall-clock-time {value}", JobMaxWallClockTime)
              .Add("--pool-id {value}", PoolId)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobSetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job whose properties you want to update.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>A file containing the job patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The action the Batch service should take when all tasks in the job are in the completed state. If omitted, the completion behavior is left unchanged. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails with an 'invalid property value' error response; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        public virtual BatchJobScheduleOnAllTasksComplete OnAllTasksComplete { get; internal set; }
        /// <summary><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.</p></summary>
        public virtual int? Priority { get; internal set; }
        /// <summary><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        public virtual int? JobMaxTaskRetryCount { get; internal set; }
        /// <summary><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        public virtual string JobMaxWallClockTime { get; internal set; }
        /// <summary><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job set")
              .Add("--job-id {value}", JobId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--on-all-tasks-complete {value}", OnAllTasksComplete)
              .Add("--priority {value}", Priority)
              .Add("--job-max-task-retry-count {value}", JobMaxTaskRetryCount)
              .Add("--job-max-wall-clock-time {value}", JobMaxWallClockTime)
              .Add("--pool-id {value}", PoolId)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job show")
              .Add("--job-id {value}", JobId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobStopSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobStopSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job to terminate.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'.</p></summary>
        public virtual string TerminateReason { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job stop")
              .Add("--job-id {value}", JobId)
              .Add("--terminate-reason {value}", TerminateReason)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchLocationSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchLocationSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch location")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool from which you want to remove nodes.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A file containing the node remove parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Node Remove Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Determines what to do with a node and its running task(s) after it has been selected for deallocation. The default value is requeue.</p></summary>
        public virtual BatchNodeNodeDeallocationOption NodeDeallocationOption { get; internal set; }
        /// <summary><p>Required. A list containing the IDs of the compute nodes to be removed from the specified pool. Space-separated values.</p></summary>
        public virtual string NodeList { get; internal set; }
        /// <summary><p>The timeout for removal of compute nodes to the pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string ResizeTimeout { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node delete")
              .Add("--pool-id {value}", PoolId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--node-deallocation-option {value}", NodeDeallocationOption)
              .Add("--node-list {value}", NodeList)
              .Add("--resize-timeout {value}", ResizeTimeout)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool from which you want to list nodes.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node list")
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeRebootSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeRebootSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node that you want to restart.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue.</p></summary>
        public virtual BatchNodeNodeDeallocationOption NodeRebootOption { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node reboot")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--node-reboot-option {value}", NodeRebootOption)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeReimageSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeReimageSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node that you want to restart.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue.</p></summary>
        public virtual BatchNodeNodeDeallocationOption NodeReimageOption { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node reimage")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--node-reimage-option {value}", NodeReimageOption)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node that you want to get information about.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node show")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>A file containing the pool specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Pool Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The list of application licenses the Batch service will make available on each compute node in the pool. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail. Space-separated values.</p></summary>
        public virtual string ApplicationLicenses { get; internal set; }
        /// <summary><p>The list of application packages to be installed on each compute node in the pool. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        public virtual string ApplicationPackageReferences { get; internal set; }
        /// <summary><p>A formula for the desired number of compute nodes in the pool. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see <a href="https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/">https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/</a>.</p></summary>
        public virtual string AutoScaleFormula { get; internal set; }
        /// <summary><p>The list of certificates to be installed on each compute node in the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space-separated certificate thumbprints.</p></summary>
        public virtual string CertificateReferences { get; internal set; }
        /// <summary><p>Whether the pool permits direct communication between nodes. Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false. True if flag present.</p></summary>
        public virtual string EnableInterNodeCommunication { get; internal set; }
        /// <summary><p>Required. A string that uniquely identifies the pool within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two pool IDs within an account that differ only by case).</p></summary>
        public virtual string Id { get; internal set; }
        /// <summary><p>The maximum number of tasks that can run concurrently on a single compute node in the pool. The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).</p></summary>
        public virtual int? MaxTasksPerNode { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The timeout for allocation of compute nodes to the pool. This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        public virtual string ResizeTimeout { get; internal set; }
        /// <summary><p>The desired number of dedicated compute nodes in the pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.</p></summary>
        public virtual string TargetDedicatedNodes { get; internal set; }
        /// <summary><p>The desired number of low-priority compute nodes in the pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.</p></summary>
        public virtual string TargetLowPriorityNodes { get; internal set; }
        /// <summary><p>Required. The size of virtual machines in the pool. All virtual machines in a pool are the same size. For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (<a href="https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/">https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/</a>). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (<a href="https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/">https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/</a>) or Sizes for Virtual Machines (Windows) (<a href="https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/">https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/</a>). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).</p></summary>
        public virtual string VmSize { get; internal set; }
        /// <summary><p>Required. The Azure Guest OS family to be installed on the virtual machines in the pool. Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (<a href="https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases">https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases</a>).</p></summary>
        public virtual BatchPoolCreateOsFamily OsFamily { get; internal set; }
        /// <summary><p>Required. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        public virtual string StartTaskCommandLine { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the task's working directory. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string StartTaskResourceFiles { get; internal set; }
        /// <summary><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. True if flag present.</p></summary>
        public virtual string StartTaskWaitForSuccess { get; internal set; }
        /// <summary><p>OS image reference. This can be either 'publisher:offer:sku[:version]' format, or a fully qualified ARM image id of the form '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}'. If 'publisher:offer:sku[:version]' format, version is optional and if omitted latest will be used. Valid values can be retrieved via 'az batch pool node-agent-skus list'. For example: 'MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:latest'.</p></summary>
        public virtual string Image { get; internal set; }
        /// <summary><p>Required. The SKU of the Batch node agent to be provisioned on compute nodes in the pool. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.</p></summary>
        public virtual string NodeAgentSkuId { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool create")
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--application-licenses {value}", ApplicationLicenses)
              .Add("--application-package-references {value}", ApplicationPackageReferences)
              .Add("--auto-scale-formula {value}", AutoScaleFormula)
              .Add("--certificate-references {value}", CertificateReferences)
              .Add("--enable-inter-node-communication {value}", EnableInterNodeCommunication)
              .Add("--id {value}", Id)
              .Add("--max-tasks-per-node {value}", MaxTasksPerNode)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--resize-timeout {value}", ResizeTimeout)
              .Add("--target-dedicated-nodes {value}", TargetDedicatedNodes)
              .Add("--target-low-priority-nodes {value}", TargetLowPriorityNodes)
              .Add("--vm-size {value}", VmSize)
              .Add("--os-family {value}", OsFamily)
              .Add("--start-task-command-line {value}", StartTaskCommandLine)
              .Add("--start-task-resource-files {value}", StartTaskResourceFiles)
              .Add("--start-task-wait-for-success {value}", StartTaskWaitForSuccess)
              .Add("--image {value}", Image)
              .Add("--node-agent-sku-id {value}", NodeAgentSkuId)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool to delete.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool delete")
              .Add("--pool-id {value}", PoolId)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolResetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolResetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool to update.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>The file containing pool update properties parameter specification in JSON(formatted to match REST API request body). If this parameter is specified, all 'Pool Update Properties Parameter Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Required. A list of application packages to be installed on each compute node in the pool. The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.</p></summary>
        public virtual string ApplicationPackageReferences { get; internal set; }
        /// <summary><p>Required. A list of certificates to be installed on each compute node in the pool. This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p></summary>
        public virtual string CertificateReferences { get; internal set; }
        /// <summary><p>Required. A list of name-value pairs associated with the pool as metadata. This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.</p></summary>
        public virtual string Metadata { get; internal set; }
        /// <summary><p>The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.</p></summary>
        public virtual string StartTaskCommandLine { get; internal set; }
        /// <summary><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> StartTaskEnvironmentSettings => StartTaskEnvironmentSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> StartTaskEnvironmentSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The maximum number of times the task may be retried.</p></summary>
        public virtual int? StartTaskMaxTaskRetryCount { get; internal set; }
        /// <summary><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. True if flag present, otherwise defaults to False.</p></summary>
        public virtual string StartTaskWaitForSuccess { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool reset")
              .Add("--pool-id {value}", PoolId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--application-package-references {value}", ApplicationPackageReferences)
              .Add("--certificate-references {value}", CertificateReferences)
              .Add("--metadata {value}", Metadata)
              .Add("--start-task-command-line {value}", StartTaskCommandLine)
              .Add("--start-task-environment-settings {value}", StartTaskEnvironmentSettings, "{key}={value}", separator: ' ')
              .Add("--start-task-max-task-retry-count {value}", StartTaskMaxTaskRetryCount)
              .Add("--start-task-wait-for-success {value}", StartTaskWaitForSuccess)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolResizeSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolResizeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Stop the pool resize operation.</p></summary>
        public virtual string Abort { get; internal set; }
        /// <summary><p>When nodes may be removed from the pool, if the pool size is decreasing.</p></summary>
        public virtual BatchNodeNodeDeallocationOption NodeDeallocationOption { get; internal set; }
        /// <summary><p>The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        public virtual string ResizeTimeout { get; internal set; }
        /// <summary><p>The desired number of dedicated compute nodes in the pool.</p></summary>
        public virtual string TargetDedicatedNodes { get; internal set; }
        /// <summary><p>The desired number of low-priority compute nodes in the pool.</p></summary>
        public virtual string TargetLowPriorityNodes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The operation will be performed only if the resource's current ETag exactly matches the specified value.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>The operation will be performed only if the resource has been modified since the specified timestamp.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>The operation will not be performed only if the resource's current ETag exactly matches the specified value.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>The operation will not be performed only if the resource has been modified since the specified timestamp.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool resize")
              .Add("--pool-id {value}", PoolId)
              .Add("--abort {value}", Abort)
              .Add("--node-deallocation-option {value}", NodeDeallocationOption)
              .Add("--resize-timeout {value}", ResizeTimeout)
              .Add("--target-dedicated-nodes {value}", TargetDedicatedNodes)
              .Add("--target-low-priority-nodes {value}", TargetLowPriorityNodes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolSetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool to update.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A file containing the pool patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Pool Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A list of application packages to be installed on each compute node in the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        public virtual string ApplicationPackageReferences { get; internal set; }
        /// <summary><p>A list of certificates to be installed on each compute node in the pool. If this element is present, it replaces any existing certificate references configured on the pool. If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space-separated certificate thumbprints.</p></summary>
        public virtual string CertificateReferences { get; internal set; }
        /// <summary><p>A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> Metadata => MetadataInternal.AsReadOnly();
        internal Dictionary<string, object> MetadataInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>Required. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        public virtual string StartTaskCommandLine { get; internal set; }
        /// <summary><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> StartTaskEnvironmentSettings => StartTaskEnvironmentSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> StartTaskEnvironmentSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p></summary>
        public virtual int? StartTaskMaxTaskRetryCount { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the task's working directory. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string StartTaskResourceFiles { get; internal set; }
        /// <summary><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. Specify either 'true' or 'false' to update the property.</p></summary>
        public virtual string StartTaskWaitForSuccess { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool set")
              .Add("--pool-id {value}", PoolId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--application-package-references {value}", ApplicationPackageReferences)
              .Add("--certificate-references {value}", CertificateReferences)
              .Add("--metadata {value}", Metadata, "{key}={value}", separator: ' ')
              .Add("--start-task-command-line {value}", StartTaskCommandLine)
              .Add("--start-task-environment-settings {value}", StartTaskEnvironmentSettings, "{key}={value}", separator: ' ')
              .Add("--start-task-max-task-retry-count {value}", StartTaskMaxTaskRetryCount)
              .Add("--start-task-resource-files {value}", StartTaskResourceFiles)
              .Add("--start-task-wait-for-success {value}", StartTaskWaitForSuccess)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool to get.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool show")
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job containing the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Required. An opaque string representing the location of a compute node or a task that has run previously. You can pass the affinityId of a compute node to indicate that this task needs to run on that compute node. Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.</p></summary>
        public virtual string AffinityId { get; internal set; }
        /// <summary><p>The space-separated list of IDs specifying the application packages to be installed. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        public virtual string ApplicationPackageReferences { get; internal set; }
        /// <summary><p>The command line of the task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.</p></summary>
        public virtual string CommandLine { get; internal set; }
        /// <summary><p>A list of environment variable settings for the task. Space-separated values in 'key=value' format.</p></summary>
        public virtual IReadOnlyDictionary<string, object> EnvironmentSettings => EnvironmentSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> EnvironmentSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary><p>The file containing the task(s) to create in JSON(formatted to match REST API request body). When submitting multiple tasks, accepts either an array of tasks or a TaskAddCollectionParamater. If this parameter is specified, all other parameters are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.</p></summary>
        public virtual int? MaxTaskRetryCount { get; internal set; }
        /// <summary><p>The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the task may run.</p></summary>
        public virtual string MaxWallClockTime { get; internal set; }
        /// <summary><p>A list of files that the Batch service will download to the compute node before running the command line. Space-separated resource references in filename=blobsource format.</p></summary>
        public virtual string ResourceFiles { get; internal set; }
        /// <summary><p>The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents. The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.</p></summary>
        public virtual string RetentionTime { get; internal set; }
        /// <summary><p>The ID of the task.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task create")
              .Add("--job-id {value}", JobId)
              .Add("--affinity-id {value}", AffinityId)
              .Add("--application-package-references {value}", ApplicationPackageReferences)
              .Add("--command-line {value}", CommandLine)
              .Add("--environment-settings {value}", EnvironmentSettings, "{key}={value}", separator: ' ')
              .Add("--json-file {value}", JsonFile)
              .Add("--max-task-retry-count {value}", MaxTaskRetryCount)
              .Add("--max-wall-clock-time {value}", MaxWallClockTime)
              .Add("--resource-files {value}", ResourceFiles)
              .Add("--retention-time {value}", RetentionTime)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job from which to delete the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task to delete.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task delete")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task list")
              .Add("--job-id {value}", JobId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskReactivateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskReactivateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job containing the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task to reactivate.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task reactivate")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskResetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskResetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job containing the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task to update.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>A file containing the constraints specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Constraints Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.</p></summary>
        public virtual int? MaxTaskRetryCount { get; internal set; }
        /// <summary><p>The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the task may run. Expected format is an ISO-8601 duration.</p></summary>
        public virtual string MaxWallClockTime { get; internal set; }
        /// <summary><p>The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents. The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged. Expected format is an ISO-8601 duration.</p></summary>
        public virtual string RetentionTime { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task reset")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--max-task-retry-count {value}", MaxTaskRetryCount)
              .Add("--max-wall-clock-time {value}", MaxWallClockTime)
              .Add("--retention-time {value}", RetentionTime)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job that contains the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task to get information about.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $expand clause.</p></summary>
        public virtual string Expand { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task show")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expand {value}", Expand)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskStopSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskStopSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job containing the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task to terminate.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task stop")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountAutostorageKeysSyncSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountAutostorageKeysSyncSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account autostorage-keys sync")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountKeysListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountKeysListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account keys list")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchAccountKeysRenewSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchAccountKeysRenewSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The type of account key to regenerate.</p></summary>
        public virtual BatchAccountKeysRenewKeyName KeyName { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch account keys renew")
              .Add("--key-name {value}", KeyName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationPackageActivateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationPackageActivateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>The format of the application package binary file.</p></summary>
        public virtual string Format { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The version of the application to activate.</p></summary>
        public virtual string Version { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application package activate")
              .Add("--application-id {value}", ApplicationId)
              .Add("--format {value}", Format)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--version {value}", Version)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationPackageCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationPackageCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The path of the application package in zip format.</p></summary>
        public virtual string PackageFile { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The version of the application.</p></summary>
        public virtual string Version { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application package create")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--package-file {value}", PackageFile)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--version {value}", Version)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationPackageDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationPackageDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The version of the application to delete.</p></summary>
        public virtual string Version { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application package delete")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--version {value}", Version)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationPackageShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationPackageShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Name of the Batch account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The version of the application.</p></summary>
        public virtual string Version { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application package show")
              .Add("--application-id {value}", ApplicationId)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--version {value}", Version)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationSummaryListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationSummaryListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application summary list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchApplicationSummaryShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchApplicationSummaryShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the application.</p></summary>
        public virtual string ApplicationId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch application summary show")
              .Add("--application-id {value}", ApplicationId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobAllStatisticsShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobAllStatisticsShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job all-statistics show")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobPrepReleaseStatusListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobPrepReleaseStatusListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job prep-release-status list")
              .Add("--job-id {value}", JobId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchJobTaskCountsShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchJobTaskCountsShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch job task-counts show")
              .Add("--job-id {value}", JobId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchLocationQuotasShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchLocationQuotasShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The region from which to display the Batch service quotas.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch location quotas show")
              .Add("--location {value}", Location)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeFileDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeFileDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the file or directory that you want to delete.</p></summary>
        public virtual string FilePath { get; internal set; }
        /// <summary><p>The ID of the compute node from which you want to delete the file.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</p></summary>
        public virtual string Recursive { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node file delete")
              .Add("--file-path {value}", FilePath)
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--recursive {value}", Recursive)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeFileDownloadSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeFileDownloadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the destination file or directory.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The path to the compute node file that you want to get the content of.</p></summary>
        public virtual string FilePath { get; internal set; }
        /// <summary><p>The ID of the compute node that contains the file.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The byte range to be retrieved. If not set the file will be retrieved to the end.</p></summary>
        public virtual string EndRange { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>The byte range to be retrieved. If not set the file will be retrieved from the beginning.</p></summary>
        public virtual string StartRange { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node file download")
              .Add("--destination {value}", Destination)
              .Add("--file-path {value}", FilePath)
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--end-range {value}", EndRange)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--start-range {value}", StartRange)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeFileListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeFileListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node whose files you want to list.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Whether to list children of a directory.</p></summary>
        public virtual string Recursive { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node file list")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--recursive {value}", Recursive)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeFileShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeFileShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the compute node file that you want to get the properties of.</p></summary>
        public virtual string FilePath { get; internal set; }
        /// <summary><p>The ID of the compute node that contains the file.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node file show")
              .Add("--file-path {value}", FilePath)
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeRemoteDesktopDownloadSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeRemoteDesktopDownloadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the destination file or directory.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The ID of the compute node for which you want to get the Remote Desktop Protocol file.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node remote-desktop download")
              .Add("--destination {value}", Destination)
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeRemoteLoginSettingsShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeRemoteLoginSettingsShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node for which to obtain the remote login settings.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node remote-login-settings show")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeSchedulingDisableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeSchedulingDisableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node on which you want to disable task scheduling.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue.</p></summary>
        public virtual BatchNodeSchedulingDisableNodeDisableSchedulingOption NodeDisableSchedulingOption { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node scheduling disable")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--node-disable-scheduling-option {value}", NodeDisableSchedulingOption)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeSchedulingEnableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeSchedulingEnableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node on which you want to enable task scheduling.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node scheduling enable")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeServiceLogsUploadSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeServiceLogsUploadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the compute node from which you want to upload the Azure Batch service log files.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A file containing the upload batch service logs configuration specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Upload Batch Service Logs Configuration Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Required. The URL of the container within Azure Blob Storage to which to upload the Batch Service log file(s). The URL must include a Shared Access Signature (SAS) granting write permissions to the container. The SAS duration must allow enough time for the upload to finish. The start time for SAS is optional and recommended to not be specified.</p></summary>
        public virtual string ContainerUrl { get; internal set; }
        /// <summary><p>The end of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string EndTime { get; internal set; }
        /// <summary><p>Required. The start of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string StartTime { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node service-logs upload")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--container-url {value}", ContainerUrl)
              .Add("--end-time {value}", EndTime)
              .Add("--start-time {value}", StartTime)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeUserCreateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeUserCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the machine on which you want to create a user account.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>A file containing the user specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'User Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The time at which the account should expire. If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string ExpiryTime { get; internal set; }
        /// <summary><p>Whether the account should be an administrator on the compute node. The default value is false. True if flag present.</p></summary>
        public virtual string IsAdmin { get; internal set; }
        /// <summary><p>Required. The user name of the account.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The password of the account. The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property.</p></summary>
        public virtual string Password { get; internal set; }
        /// <summary><p>The SSH public key that can be used for remote login to the compute node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        public virtual string SshPublicKey { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node user create")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expiry-time {value}", ExpiryTime)
              .Add("--is-admin {value}", IsAdmin)
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--ssh-public-key {value}", SshPublicKey)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeUserDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeUserDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the machine on which you want to delete a user account.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>The name of the user account to delete.</p></summary>
        public virtual string UserName { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node user delete")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--user-name {value}", UserName)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchNodeUserResetSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchNodeUserResetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the machine on which you want to update a user account.</p></summary>
        public virtual string NodeId { get; internal set; }
        /// <summary><p>The ID of the pool that contains the compute node.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>The name of the user account to update.</p></summary>
        public virtual string UserName { get; internal set; }
        /// <summary><p>A file containing the node update user parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Node Update User Arguments' are ignored.</p></summary>
        public virtual string JsonFile { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The time at which the account should expire. If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day. Expected format is an ISO-8601 timestamp.</p></summary>
        public virtual string ExpiryTime { get; internal set; }
        /// <summary><p>The password of the account. The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.</p></summary>
        public virtual string Password { get; internal set; }
        /// <summary><p>The SSH public key that can be used for remote login to the compute node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.</p></summary>
        public virtual string SshPublicKey { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch node user reset")
              .Add("--node-id {value}", NodeId)
              .Add("--pool-id {value}", PoolId)
              .Add("--user-name {value}", UserName)
              .Add("--json-file {value}", JsonFile)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--expiry-time {value}", ExpiryTime)
              .Add("--password {value}", Password, secret: true)
              .Add("--ssh-public-key {value}", SshPublicKey)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolAllStatisticsShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolAllStatisticsShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool all-statistics show")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolAutoscaleDisableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolAutoscaleDisableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool on which to disable automatic scaling.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool autoscale disable")
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolAutoscaleEnableSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolAutoscaleEnableSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool on which to enable automatic scaling.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>The time interval at which to automatically adjust the pool size according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.</p></summary>
        public virtual string AutoScaleEvaluationInterval { get; internal set; }
        /// <summary><p>The formula for the desired number of compute nodes in the pool. The formula is checked for validity before it is applied to the pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>).</p></summary>
        public virtual string AutoScaleFormula { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool autoscale enable")
              .Add("--pool-id {value}", PoolId)
              .Add("--auto-scale-evaluation-interval {value}", AutoScaleEvaluationInterval)
              .Add("--auto-scale-formula {value}", AutoScaleFormula)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolAutoscaleEvaluateSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolAutoscaleEvaluateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>).</p></summary>
        public virtual string AutoScaleFormula { get; internal set; }
        /// <summary><p>The ID of the pool on which to evaluate the automatic scaling formula.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool autoscale evaluate")
              .Add("--auto-scale-formula {value}", AutoScaleFormula)
              .Add("--pool-id {value}", PoolId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolNodeAgentSkusListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolNodeAgentSkusListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool node-agent-skus list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolNodeCountsListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolNodeCountsListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool node-counts list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolOsUpgradeSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolOsUpgradeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the pool to upgrade.</p></summary>
        public virtual string PoolId { get; internal set; }
        /// <summary><p>The Azure Guest OS version to be installed on the virtual machines in the pool.</p></summary>
        public virtual string TargetOsVersion { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        public virtual string IfMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        public virtual string IfNoneMatch { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool os upgrade")
              .Add("--pool-id {value}", PoolId)
              .Add("--target-os-version {value}", TargetOsVersion)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-match {value}", IfMatch)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-none-match {value}", IfNoneMatch)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchPoolUsageMetricsListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchPoolUsageMetricsListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available.</p></summary>
        public virtual string EndTime { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available.</p></summary>
        public virtual string StartTime { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch pool usage-metrics list")
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--end-time {value}", EndTime)
              .Add("--filter {value}", Filter)
              .Add("--start-time {value}", StartTime)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskFileDeleteSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskFileDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the task file or directory that you want to delete.</p></summary>
        public virtual string FilePath { get; internal set; }
        /// <summary><p>The ID of the job that contains the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task whose file you want to delete.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</p></summary>
        public virtual string Recursive { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task file delete")
              .Add("--file-path {value}", FilePath)
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--recursive {value}", Recursive)
              .Add("--yes {value}", Yes)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskFileDownloadSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskFileDownloadSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the destination file or directory.</p></summary>
        public virtual string Destination { get; internal set; }
        /// <summary><p>The path to the task file that you want to get the content of.</p></summary>
        public virtual string FilePath { get; internal set; }
        /// <summary><p>The ID of the job that contains the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task whose file you want to retrieve.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>The byte range to be retrieved. If not set the file will be retrieved to the end.</p></summary>
        public virtual string EndRange { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>The byte range to be retrieved. If not set the file will be retrieved from the beginning.</p></summary>
        public virtual string StartRange { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task file download")
              .Add("--destination {value}", Destination)
              .Add("--file-path {value}", FilePath)
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--end-range {value}", EndRange)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--start-range {value}", StartRange)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskFileListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskFileListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job that contains the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task whose files you want to list.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files.</p></summary>
        public virtual string Recursive { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files</a>.</p></summary>
        public virtual string Filter { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task file list")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--recursive {value}", Recursive)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--filter {value}", Filter)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskFileShowSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskFileShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The path to the task file that you want to get the properties of.</p></summary>
        public virtual string FilePath { get; internal set; }
        /// <summary><p>The ID of the job that contains the task.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task whose file you want to get the properties of.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        public virtual string IfModifiedSince { get; internal set; }
        /// <summary><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        public virtual string IfUnmodifiedSince { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task file show")
              .Add("--file-path {value}", FilePath)
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--if-modified-since {value}", IfModifiedSince)
              .Add("--if-unmodified-since {value}", IfUnmodifiedSince)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchTaskSubtaskListSettings
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureBatchTaskSubtaskListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureBatch executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureBatchTasks.AzureBatchPath;
        /// <summary><p>The ID of the job.</p></summary>
        public virtual string JobId { get; internal set; }
        /// <summary><p>The ID of the task.</p></summary>
        public virtual string TaskId { get; internal set; }
        /// <summary><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        public virtual string AccountEndpoint { get; internal set; }
        /// <summary><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        public virtual string AccountKey { get; internal set; }
        /// <summary><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        public virtual string AccountName { get; internal set; }
        /// <summary><p>An OData $select clause.</p></summary>
        public virtual string Select { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("batch task subtask list")
              .Add("--job-id {value}", JobId)
              .Add("--task-id {value}", TaskId)
              .Add("--account-endpoint {value}", AccountEndpoint)
              .Add("--account-key {value}", AccountKey)
              .Add("--account-name {value}", AccountName)
              .Add("--select {value}", Select)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureBatchSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchSettingsExtensions
    {
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchSettings SetDebug(this AzureBatchSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchSettings ResetDebug(this AzureBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchSettings SetHelp(this AzureBatchSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchSettings ResetHelp(this AzureBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchSettings SetOutput(this AzureBatchSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchSettings ResetOutput(this AzureBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchSettings SetQuery(this AzureBatchSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchSettings ResetQuery(this AzureBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchSettings SetVerbose(this AzureBatchSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchSettings ResetVerbose(this AzureBatchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountCreateSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Location"/>.</em></p><p>The region in which to create the account.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetLocation(this AzureBatchAccountCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Location"/>.</em></p><p>The region in which to create the account.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetLocation(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetName(this AzureBatchAccountCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetName(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetResourceGroup(this AzureBatchAccountCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetResourceGroup(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Keyvault
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Keyvault"/>.</em></p><p>The KeyVault name or resource ID to be used for an account with a pool allocation mode of 'User Subscription'.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetKeyvault(this AzureBatchAccountCreateSettings toolSettings, string keyvault)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Keyvault = keyvault;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Keyvault"/>.</em></p><p>The KeyVault name or resource ID to be used for an account with a pool allocation mode of 'User Subscription'.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetKeyvault(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Keyvault = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetNoWait(this AzureBatchAccountCreateSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetNoWait(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureBatchAccountCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings EnableNoWait(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureBatchAccountCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings DisableNoWait(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureBatchAccountCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ToggleNoWait(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.StorageAccount"/>.</em></p><p>The storage account name or resource ID to be used for auto storage.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetStorageAccount(this AzureBatchAccountCreateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.StorageAccount"/>.</em></p><p>The storage account name or resource ID to be used for auto storage.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetStorageAccount(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetTags(this AzureBatchAccountCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetTags(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetDebug(this AzureBatchAccountCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetDebug(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetHelp(this AzureBatchAccountCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetHelp(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetOutput(this AzureBatchAccountCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetOutput(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetQuery(this AzureBatchAccountCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetQuery(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings SetVerbose(this AzureBatchAccountCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountCreateSettings ResetVerbose(this AzureBatchAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetName(this AzureBatchAccountDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetName(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetResourceGroup(this AzureBatchAccountDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetResourceGroup(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetNoWait(this AzureBatchAccountDeleteSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetNoWait(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureBatchAccountDeleteSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings EnableNoWait(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureBatchAccountDeleteSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings DisableNoWait(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureBatchAccountDeleteSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ToggleNoWait(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetYes(this AzureBatchAccountDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetYes(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetDebug(this AzureBatchAccountDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetDebug(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetHelp(this AzureBatchAccountDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetHelp(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetOutput(this AzureBatchAccountDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetOutput(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetQuery(this AzureBatchAccountDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetQuery(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings SetVerbose(this AzureBatchAccountDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountDeleteSettings ResetVerbose(this AzureBatchAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountListSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings SetResourceGroup(this AzureBatchAccountListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountListSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings ResetResourceGroup(this AzureBatchAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings SetDebug(this AzureBatchAccountListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings ResetDebug(this AzureBatchAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings SetHelp(this AzureBatchAccountListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings ResetHelp(this AzureBatchAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings SetOutput(this AzureBatchAccountListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings ResetOutput(this AzureBatchAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings SetQuery(this AzureBatchAccountListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings ResetQuery(this AzureBatchAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings SetVerbose(this AzureBatchAccountListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountListSettings ResetVerbose(this AzureBatchAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountLoginSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountLoginSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetName(this AzureBatchAccountLoginSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetName(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetResourceGroup(this AzureBatchAccountLoginSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetResourceGroup(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region SharedKeyAuth
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.SharedKeyAuth"/>.</em></p><p>Using Shared Key authentication, if not specified, it will use Azure Active Directory authentication.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetSharedKeyAuth(this AzureBatchAccountLoginSettings toolSettings, string sharedKeyAuth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SharedKeyAuth = sharedKeyAuth;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.SharedKeyAuth"/>.</em></p><p>Using Shared Key authentication, if not specified, it will use Azure Active Directory authentication.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetSharedKeyAuth(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SharedKeyAuth = null;
            return toolSettings;
        }
        #endregion
        #region Show
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Show"/>.</em></p><p>Display the credential information for the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetShow(this AzureBatchAccountLoginSettings toolSettings, string show)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Show = show;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Show"/>.</em></p><p>Display the credential information for the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetShow(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Show = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetDebug(this AzureBatchAccountLoginSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetDebug(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetHelp(this AzureBatchAccountLoginSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetHelp(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetOutput(this AzureBatchAccountLoginSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetOutput(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetQuery(this AzureBatchAccountLoginSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetQuery(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountLoginSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings SetVerbose(this AzureBatchAccountLoginSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountLoginSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountLoginSettings ResetVerbose(this AzureBatchAccountLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountSetSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetName(this AzureBatchAccountSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetName(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetResourceGroup(this AzureBatchAccountSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetResourceGroup(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.StorageAccount"/>.</em></p><p>The storage account name or resource ID to be used for auto storage.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetStorageAccount(this AzureBatchAccountSetSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.StorageAccount"/>.</em></p><p>The storage account name or resource ID to be used for auto storage.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetStorageAccount(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetTags(this AzureBatchAccountSetSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Tags"/>.</em></p><p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetTags(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetDebug(this AzureBatchAccountSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetDebug(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetHelp(this AzureBatchAccountSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetHelp(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetOutput(this AzureBatchAccountSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetOutput(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetQuery(this AzureBatchAccountSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetQuery(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings SetVerbose(this AzureBatchAccountSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountSetSettings ResetVerbose(this AzureBatchAccountSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.Name"/>.</em></p><p>Name of the batch account to show. If not specified will display currently set account.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetName(this AzureBatchAccountShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.Name"/>.</em></p><p>Name of the batch account to show. If not specified will display currently set account.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetName(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.ResourceGroup"/>.</em></p><p>Name of the resource group. If not specified will display currently set account.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetResourceGroup(this AzureBatchAccountShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.ResourceGroup"/>.</em></p><p>Name of the resource group. If not specified will display currently set account.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetResourceGroup(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetDebug(this AzureBatchAccountShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetDebug(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetHelp(this AzureBatchAccountShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetHelp(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetOutput(this AzureBatchAccountShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetOutput(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetQuery(this AzureBatchAccountShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetQuery(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings SetVerbose(this AzureBatchAccountShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountShowSettings ResetVerbose(this AzureBatchAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationCreateSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetApplicationId(this AzureBatchApplicationCreateSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetApplicationId(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetName(this AzureBatchApplicationCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetName(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetResourceGroup(this AzureBatchApplicationCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetResourceGroup(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AllowUpdates
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.AllowUpdates"/>.</em></p><p>Specify to indicate whether packages within the application may be overwritten using the same version string. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetAllowUpdates(this AzureBatchApplicationCreateSettings toolSettings, string allowUpdates)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowUpdates = allowUpdates;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.AllowUpdates"/>.</em></p><p>Specify to indicate whether packages within the application may be overwritten using the same version string. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetAllowUpdates(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowUpdates = null;
            return toolSettings;
        }
        #endregion
        #region DisplayName
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.DisplayName"/>.</em></p><p>The display name for the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetDisplayName(this AzureBatchApplicationCreateSettings toolSettings, string displayName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = displayName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.DisplayName"/>.</em></p><p>The display name for the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetDisplayName(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetDebug(this AzureBatchApplicationCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetDebug(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetHelp(this AzureBatchApplicationCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetHelp(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetOutput(this AzureBatchApplicationCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetOutput(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetQuery(this AzureBatchApplicationCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetQuery(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings SetVerbose(this AzureBatchApplicationCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationCreateSettings ResetVerbose(this AzureBatchApplicationCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationDeleteSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetApplicationId(this AzureBatchApplicationDeleteSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetApplicationId(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetName(this AzureBatchApplicationDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetName(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetResourceGroup(this AzureBatchApplicationDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetResourceGroup(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetYes(this AzureBatchApplicationDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetYes(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetDebug(this AzureBatchApplicationDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetDebug(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetHelp(this AzureBatchApplicationDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetHelp(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetOutput(this AzureBatchApplicationDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetOutput(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetQuery(this AzureBatchApplicationDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetQuery(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings SetVerbose(this AzureBatchApplicationDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationDeleteSettings ResetVerbose(this AzureBatchApplicationDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationListSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetName(this AzureBatchApplicationListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetName(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetResourceGroup(this AzureBatchApplicationListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetResourceGroup(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Maxresults
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Maxresults"/>.</em></p><p>The maximum number of items to return in the response.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetMaxresults(this AzureBatchApplicationListSettings toolSettings, int? maxresults)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Maxresults = maxresults;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Maxresults"/>.</em></p><p>The maximum number of items to return in the response.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetMaxresults(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Maxresults = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetDebug(this AzureBatchApplicationListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetDebug(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetHelp(this AzureBatchApplicationListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetHelp(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetOutput(this AzureBatchApplicationListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetOutput(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetQuery(this AzureBatchApplicationListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetQuery(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings SetVerbose(this AzureBatchApplicationListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationListSettings ResetVerbose(this AzureBatchApplicationListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationSetSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetApplicationId(this AzureBatchApplicationSetSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetApplicationId(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetName(this AzureBatchApplicationSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetName(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetResourceGroup(this AzureBatchApplicationSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetResourceGroup(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AllowUpdates
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.AllowUpdates"/>.</em></p><p>Specify to indicate whether packages within the application may be overwritten using the same version string. Specify either 'true' or 'false' to update the property.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetAllowUpdates(this AzureBatchApplicationSetSettings toolSettings, string allowUpdates)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowUpdates = allowUpdates;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.AllowUpdates"/>.</em></p><p>Specify to indicate whether packages within the application may be overwritten using the same version string. Specify either 'true' or 'false' to update the property.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetAllowUpdates(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowUpdates = null;
            return toolSettings;
        }
        #endregion
        #region DefaultVersion
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.DefaultVersion"/>.</em></p><p>The package to use if a client requests the application but does not specify a version.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetDefaultVersion(this AzureBatchApplicationSetSettings toolSettings, string defaultVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultVersion = defaultVersion;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.DefaultVersion"/>.</em></p><p>The package to use if a client requests the application but does not specify a version.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetDefaultVersion(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultVersion = null;
            return toolSettings;
        }
        #endregion
        #region DisplayName
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.DisplayName"/>.</em></p><p>The display name for the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetDisplayName(this AzureBatchApplicationSetSettings toolSettings, string displayName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = displayName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.DisplayName"/>.</em></p><p>The display name for the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetDisplayName(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetDebug(this AzureBatchApplicationSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetDebug(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetHelp(this AzureBatchApplicationSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetHelp(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetOutput(this AzureBatchApplicationSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetOutput(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetQuery(this AzureBatchApplicationSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetQuery(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings SetVerbose(this AzureBatchApplicationSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSetSettings ResetVerbose(this AzureBatchApplicationSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationShowSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetApplicationId(this AzureBatchApplicationShowSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetApplicationId(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetName(this AzureBatchApplicationShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetName(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetResourceGroup(this AzureBatchApplicationShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetResourceGroup(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetDebug(this AzureBatchApplicationShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetDebug(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetHelp(this AzureBatchApplicationShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetHelp(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetOutput(this AzureBatchApplicationShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetOutput(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetQuery(this AzureBatchApplicationShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetQuery(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings SetVerbose(this AzureBatchApplicationShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationShowSettings ResetVerbose(this AzureBatchApplicationShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchCertificateCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchCertificateCreateSettingsExtensions
    {
        #region CertificateFile
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.CertificateFile"/>.</em></p><p>The certificate file: cer file or pfx file.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetCertificateFile(this AzureBatchCertificateCreateSettings toolSettings, string certificateFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateFile = certificateFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.CertificateFile"/>.</em></p><p>The certificate file: cer file or pfx file.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetCertificateFile(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateFile = null;
            return toolSettings;
        }
        #endregion
        #region Thumbprint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Thumbprint"/>.</em></p><p>The certificate thumbprint.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetThumbprint(this AzureBatchCertificateCreateSettings toolSettings, string thumbprint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Thumbprint = thumbprint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Thumbprint"/>.</em></p><p>The certificate thumbprint.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetThumbprint(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Thumbprint = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Password"/>.</em></p><p>The password to access the certificate's private key.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetPassword(this AzureBatchCertificateCreateSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Password"/>.</em></p><p>The password to access the certificate's private key.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetPassword(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetAccountEndpoint(this AzureBatchCertificateCreateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetAccountEndpoint(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetAccountKey(this AzureBatchCertificateCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetAccountKey(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetAccountName(this AzureBatchCertificateCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetAccountName(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetDebug(this AzureBatchCertificateCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetDebug(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetHelp(this AzureBatchCertificateCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetHelp(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetOutput(this AzureBatchCertificateCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetOutput(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetQuery(this AzureBatchCertificateCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetQuery(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings SetVerbose(this AzureBatchCertificateCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateCreateSettings ResetVerbose(this AzureBatchCertificateCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchCertificateDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchCertificateDeleteSettingsExtensions
    {
        #region Thumbprint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Thumbprint"/>.</em></p><p>The certificate thumbprint.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetThumbprint(this AzureBatchCertificateDeleteSettings toolSettings, string thumbprint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Thumbprint = thumbprint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Thumbprint"/>.</em></p><p>The certificate thumbprint.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetThumbprint(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Thumbprint = null;
            return toolSettings;
        }
        #endregion
        #region Abort
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Abort"/>.</em></p><p>Cancel the failed certificate deletion operation.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetAbort(this AzureBatchCertificateDeleteSettings toolSettings, string abort)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Abort = abort;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Abort"/>.</em></p><p>Cancel the failed certificate deletion operation.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetAbort(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Abort = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetYes(this AzureBatchCertificateDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetYes(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetAccountEndpoint(this AzureBatchCertificateDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetAccountEndpoint(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetAccountKey(this AzureBatchCertificateDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetAccountKey(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetAccountName(this AzureBatchCertificateDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetAccountName(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetDebug(this AzureBatchCertificateDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetDebug(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetHelp(this AzureBatchCertificateDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetHelp(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetOutput(this AzureBatchCertificateDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetOutput(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetQuery(this AzureBatchCertificateDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetQuery(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings SetVerbose(this AzureBatchCertificateDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateDeleteSettings ResetVerbose(this AzureBatchCertificateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchCertificateListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchCertificateListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetAccountEndpoint(this AzureBatchCertificateListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetAccountEndpoint(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetAccountKey(this AzureBatchCertificateListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetAccountKey(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetAccountName(this AzureBatchCertificateListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetAccountName(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates</a>.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetFilter(this AzureBatchCertificateListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates</a>.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetFilter(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetSelect(this AzureBatchCertificateListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetSelect(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetDebug(this AzureBatchCertificateListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetDebug(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetHelp(this AzureBatchCertificateListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetHelp(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetOutput(this AzureBatchCertificateListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetOutput(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetQuery(this AzureBatchCertificateListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetQuery(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings SetVerbose(this AzureBatchCertificateListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateListSettings ResetVerbose(this AzureBatchCertificateListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchCertificateShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchCertificateShowSettingsExtensions
    {
        #region Thumbprint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Thumbprint"/>.</em></p><p>The certificate thumbprint.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetThumbprint(this AzureBatchCertificateShowSettings toolSettings, string thumbprint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Thumbprint = thumbprint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Thumbprint"/>.</em></p><p>The certificate thumbprint.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetThumbprint(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Thumbprint = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetAccountEndpoint(this AzureBatchCertificateShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetAccountEndpoint(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetAccountKey(this AzureBatchCertificateShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetAccountKey(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetAccountName(this AzureBatchCertificateShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetAccountName(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetSelect(this AzureBatchCertificateShowSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetSelect(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetDebug(this AzureBatchCertificateShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetDebug(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetHelp(this AzureBatchCertificateShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetHelp(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetOutput(this AzureBatchCertificateShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetOutput(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetQuery(this AzureBatchCertificateShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetQuery(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchCertificateShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings SetVerbose(this AzureBatchCertificateShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchCertificateShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchCertificateShowSettings ResetVerbose(this AzureBatchCertificateShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleCreateSettingsExtensions
    {
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.JsonFile"/>.</em></p><p>A file containing the cloud job schedule specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Cloud Job Schedule Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetJsonFile(this AzureBatchJobScheduleCreateSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.JsonFile"/>.</em></p><p>A file containing the cloud job schedule specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Cloud Job Schedule Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetJsonFile(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetAccountEndpoint(this AzureBatchJobScheduleCreateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetAccountEndpoint(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetAccountKey(this AzureBatchJobScheduleCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetAccountKey(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetAccountName(this AzureBatchJobScheduleCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetAccountName(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Id
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Id"/>.</em></p><p>Required. A string that uniquely identifies the schedule within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetId(this AzureBatchJobScheduleCreateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Id"/>.</em></p><p>Required. A string that uniquely identifies the schedule within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetId(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetMetadata(this AzureBatchJobScheduleCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ClearMetadata(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings AddMetadatum(this AzureBatchJobScheduleCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings RemoveMetadatum(this AzureBatchJobScheduleCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetMetadatum(this AzureBatchJobScheduleCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region OnAllTasksComplete
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetOnAllTasksComplete(this AzureBatchJobScheduleCreateSettings toolSettings, BatchJobScheduleOnAllTasksComplete onAllTasksComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = onAllTasksComplete;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetOnAllTasksComplete(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Priority"/>.</em></p><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetPriority(this AzureBatchJobScheduleCreateSettings toolSettings, int? priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Priority"/>.</em></p><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetPriority(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region UsesTaskDependencies
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetUsesTaskDependencies(this AzureBatchJobScheduleCreateSettings toolSettings, string usesTaskDependencies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = usesTaskDependencies;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetUsesTaskDependencies(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetJobMaxTaskRetryCount(this AzureBatchJobScheduleCreateSettings toolSettings, int? jobMaxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = jobMaxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetJobMaxTaskRetryCount(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxWallClockTime
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetJobMaxWallClockTime(this AzureBatchJobScheduleCreateSettings toolSettings, string jobMaxWallClockTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = jobMaxWallClockTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetJobMaxWallClockTime(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetJobManagerTaskCommandLine(this AzureBatchJobScheduleCreateSettings toolSettings, string jobManagerTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = jobManagerTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetJobManagerTaskCommandLine(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetJobManagerTaskId(this AzureBatchJobScheduleCreateSettings toolSettings, string jobManagerTaskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = jobManagerTaskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetJobManagerTaskId(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetJobManagerTaskResourceFiles(this AzureBatchJobScheduleCreateSettings toolSettings, string jobManagerTaskResourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = jobManagerTaskResourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetJobManagerTaskResourceFiles(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetPoolId(this AzureBatchJobScheduleCreateSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetPoolId(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region DoNotRunAfter
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.DoNotRunAfter"/>.</em></p><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetDoNotRunAfter(this AzureBatchJobScheduleCreateSettings toolSettings, string doNotRunAfter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunAfter = doNotRunAfter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.DoNotRunAfter"/>.</em></p><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetDoNotRunAfter(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunAfter = null;
            return toolSettings;
        }
        #endregion
        #region DoNotRunUntil
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.DoNotRunUntil"/>.</em></p><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetDoNotRunUntil(this AzureBatchJobScheduleCreateSettings toolSettings, string doNotRunUntil)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunUntil = doNotRunUntil;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.DoNotRunUntil"/>.</em></p><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetDoNotRunUntil(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunUntil = null;
            return toolSettings;
        }
        #endregion
        #region RecurrenceInterval
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.RecurrenceInterval"/>.</em></p><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetRecurrenceInterval(this AzureBatchJobScheduleCreateSettings toolSettings, string recurrenceInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RecurrenceInterval = recurrenceInterval;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.RecurrenceInterval"/>.</em></p><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetRecurrenceInterval(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RecurrenceInterval = null;
            return toolSettings;
        }
        #endregion
        #region StartWindow
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.StartWindow"/>.</em></p><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetStartWindow(this AzureBatchJobScheduleCreateSettings toolSettings, string startWindow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartWindow = startWindow;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.StartWindow"/>.</em></p><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetStartWindow(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartWindow = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetDebug(this AzureBatchJobScheduleCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetDebug(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetHelp(this AzureBatchJobScheduleCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetHelp(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetOutput(this AzureBatchJobScheduleCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetOutput(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetQuery(this AzureBatchJobScheduleCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetQuery(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings SetVerbose(this AzureBatchJobScheduleCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleCreateSettings ResetVerbose(this AzureBatchJobScheduleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleDeleteSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to delete.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetJobScheduleId(this AzureBatchJobScheduleDeleteSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to delete.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetJobScheduleId(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetYes(this AzureBatchJobScheduleDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetYes(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetAccountEndpoint(this AzureBatchJobScheduleDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetAccountEndpoint(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetAccountKey(this AzureBatchJobScheduleDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetAccountKey(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetAccountName(this AzureBatchJobScheduleDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetAccountName(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetIfMatch(this AzureBatchJobScheduleDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetIfMatch(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetIfModifiedSince(this AzureBatchJobScheduleDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetIfModifiedSince(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetIfNoneMatch(this AzureBatchJobScheduleDeleteSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetIfNoneMatch(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetDebug(this AzureBatchJobScheduleDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetDebug(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetHelp(this AzureBatchJobScheduleDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetHelp(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetOutput(this AzureBatchJobScheduleDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetOutput(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetQuery(this AzureBatchJobScheduleDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetQuery(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings SetVerbose(this AzureBatchJobScheduleDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDeleteSettings ResetVerbose(this AzureBatchJobScheduleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleDisableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleDisableSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to disable.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetJobScheduleId(this AzureBatchJobScheduleDisableSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to disable.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetJobScheduleId(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetAccountEndpoint(this AzureBatchJobScheduleDisableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetAccountEndpoint(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetAccountKey(this AzureBatchJobScheduleDisableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetAccountKey(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetAccountName(this AzureBatchJobScheduleDisableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetAccountName(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetIfMatch(this AzureBatchJobScheduleDisableSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetIfMatch(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetIfModifiedSince(this AzureBatchJobScheduleDisableSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetIfModifiedSince(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetIfNoneMatch(this AzureBatchJobScheduleDisableSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetIfNoneMatch(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleDisableSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetDebug(this AzureBatchJobScheduleDisableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetDebug(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetHelp(this AzureBatchJobScheduleDisableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetHelp(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetOutput(this AzureBatchJobScheduleDisableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetOutput(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetQuery(this AzureBatchJobScheduleDisableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetQuery(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings SetVerbose(this AzureBatchJobScheduleDisableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleDisableSettings ResetVerbose(this AzureBatchJobScheduleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleEnableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleEnableSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to enable.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetJobScheduleId(this AzureBatchJobScheduleEnableSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to enable.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetJobScheduleId(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetAccountEndpoint(this AzureBatchJobScheduleEnableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetAccountEndpoint(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetAccountKey(this AzureBatchJobScheduleEnableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetAccountKey(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetAccountName(this AzureBatchJobScheduleEnableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetAccountName(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetIfMatch(this AzureBatchJobScheduleEnableSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetIfMatch(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetIfModifiedSince(this AzureBatchJobScheduleEnableSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetIfModifiedSince(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetIfNoneMatch(this AzureBatchJobScheduleEnableSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetIfNoneMatch(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleEnableSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetDebug(this AzureBatchJobScheduleEnableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetDebug(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetHelp(this AzureBatchJobScheduleEnableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetHelp(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetOutput(this AzureBatchJobScheduleEnableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetOutput(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetQuery(this AzureBatchJobScheduleEnableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetQuery(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings SetVerbose(this AzureBatchJobScheduleEnableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleEnableSettings ResetVerbose(this AzureBatchJobScheduleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetAccountEndpoint(this AzureBatchJobScheduleListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetAccountEndpoint(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetAccountKey(this AzureBatchJobScheduleListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetAccountKey(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetAccountName(this AzureBatchJobScheduleListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetAccountName(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetExpand(this AzureBatchJobScheduleListSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetExpand(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules</a>.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetFilter(this AzureBatchJobScheduleListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules</a>.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetFilter(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetSelect(this AzureBatchJobScheduleListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetSelect(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetDebug(this AzureBatchJobScheduleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetDebug(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetHelp(this AzureBatchJobScheduleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetHelp(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetOutput(this AzureBatchJobScheduleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetOutput(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetQuery(this AzureBatchJobScheduleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetQuery(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings SetVerbose(this AzureBatchJobScheduleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleListSettings ResetVerbose(this AzureBatchJobScheduleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleResetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleResetSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to update.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobScheduleId(this AzureBatchJobScheduleResetSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to update.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetJobScheduleId(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JsonFile"/>.</em></p><p>A file containing the job schedule update parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJsonFile(this AzureBatchJobScheduleResetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.JsonFile"/>.</em></p><p>A file containing the job schedule update parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetJsonFile(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetAccountEndpoint(this AzureBatchJobScheduleResetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetAccountEndpoint(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetAccountKey(this AzureBatchJobScheduleResetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetAccountKey(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetAccountName(this AzureBatchJobScheduleResetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetAccountName(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetMetadata(this AzureBatchJobScheduleResetSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ClearMetadata(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings AddMetadatum(this AzureBatchJobScheduleResetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings RemoveMetadatum(this AzureBatchJobScheduleResetSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetMetadatum(this AzureBatchJobScheduleResetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region JobMetadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobMetadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobMetadata(this AzureBatchJobScheduleResetSettings toolSettings, IDictionary<string, object> jobMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal = jobMetadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleResetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ClearJobMetadata(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleResetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings AddJobMetadatum(this AzureBatchJobScheduleResetSettings toolSettings, string jobMetadatumKey, object jobMetadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal.Add(jobMetadatumKey, jobMetadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleResetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings RemoveJobMetadatum(this AzureBatchJobScheduleResetSettings toolSettings, string jobMetadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal.Remove(jobMetadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleResetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobMetadatum(this AzureBatchJobScheduleResetSettings toolSettings, string jobMetadatumKey, object jobMetadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal[jobMetadatumKey] = jobMetadatumValue;
            return toolSettings;
        }
        #endregion
        #region OnAllTasksComplete
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetOnAllTasksComplete(this AzureBatchJobScheduleResetSettings toolSettings, BatchJobScheduleOnAllTasksComplete onAllTasksComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = onAllTasksComplete;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetOnAllTasksComplete(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Priority"/>.</em></p><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetPriority(this AzureBatchJobScheduleResetSettings toolSettings, int? priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.Priority"/>.</em></p><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetPriority(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region UsesTaskDependencies
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetUsesTaskDependencies(this AzureBatchJobScheduleResetSettings toolSettings, string usesTaskDependencies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = usesTaskDependencies;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetUsesTaskDependencies(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskApplicationPackageReferences
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskApplicationPackageReferences"/>.</em></p><p>A list of application packages that the Batch service will deploy to the compute node before running the command line. Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobManagerTaskApplicationPackageReferences(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskApplicationPackageReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskApplicationPackageReferences = jobManagerTaskApplicationPackageReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskApplicationPackageReferences"/>.</em></p><p>A list of application packages that the Batch service will deploy to the compute node before running the command line. Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetJobManagerTaskApplicationPackageReferences(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskApplicationPackageReferences = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobManagerTaskCommandLine(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = jobManagerTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetJobManagerTaskCommandLine(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskEnvironmentSettings
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskEnvironmentSettings"/> to a new dictionary.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobManagerTaskEnvironmentSettings(this AzureBatchJobScheduleResetSettings toolSettings, IDictionary<string, object> jobManagerTaskEnvironmentSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal = jobManagerTaskEnvironmentSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ClearJobManagerTaskEnvironmentSettings(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings AddJobManagerTaskEnvironmentSetting(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskEnvironmentSettingKey, object jobManagerTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Add(jobManagerTaskEnvironmentSettingKey, jobManagerTaskEnvironmentSettingValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings RemoveJobManagerTaskEnvironmentSetting(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskEnvironmentSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Remove(jobManagerTaskEnvironmentSettingKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobManagerTaskEnvironmentSetting(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskEnvironmentSettingKey, object jobManagerTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal[jobManagerTaskEnvironmentSettingKey] = jobManagerTaskEnvironmentSettingValue;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobManagerTaskId(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = jobManagerTaskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetJobManagerTaskId(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetJobManagerTaskResourceFiles(this AzureBatchJobScheduleResetSettings toolSettings, string jobManagerTaskResourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = jobManagerTaskResourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetJobManagerTaskResourceFiles(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetPoolId(this AzureBatchJobScheduleResetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetPoolId(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region DoNotRunAfter
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.DoNotRunAfter"/>.</em></p><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetDoNotRunAfter(this AzureBatchJobScheduleResetSettings toolSettings, string doNotRunAfter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunAfter = doNotRunAfter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.DoNotRunAfter"/>.</em></p><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetDoNotRunAfter(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunAfter = null;
            return toolSettings;
        }
        #endregion
        #region DoNotRunUntil
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.DoNotRunUntil"/>.</em></p><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetDoNotRunUntil(this AzureBatchJobScheduleResetSettings toolSettings, string doNotRunUntil)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunUntil = doNotRunUntil;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.DoNotRunUntil"/>.</em></p><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetDoNotRunUntil(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunUntil = null;
            return toolSettings;
        }
        #endregion
        #region RecurrenceInterval
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.RecurrenceInterval"/>.</em></p><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetRecurrenceInterval(this AzureBatchJobScheduleResetSettings toolSettings, string recurrenceInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RecurrenceInterval = recurrenceInterval;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.RecurrenceInterval"/>.</em></p><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetRecurrenceInterval(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RecurrenceInterval = null;
            return toolSettings;
        }
        #endregion
        #region StartWindow
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.StartWindow"/>.</em></p><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetStartWindow(this AzureBatchJobScheduleResetSettings toolSettings, string startWindow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartWindow = startWindow;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.StartWindow"/>.</em></p><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetStartWindow(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartWindow = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetIfMatch(this AzureBatchJobScheduleResetSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetIfMatch(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetIfModifiedSince(this AzureBatchJobScheduleResetSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetIfModifiedSince(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetIfNoneMatch(this AzureBatchJobScheduleResetSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetIfNoneMatch(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleResetSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetDebug(this AzureBatchJobScheduleResetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetDebug(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetHelp(this AzureBatchJobScheduleResetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetHelp(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetOutput(this AzureBatchJobScheduleResetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetOutput(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetQuery(this AzureBatchJobScheduleResetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetQuery(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings SetVerbose(this AzureBatchJobScheduleResetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleResetSettings ResetVerbose(this AzureBatchJobScheduleResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleSetSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to update.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobScheduleId(this AzureBatchJobScheduleSetSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to update.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetJobScheduleId(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JsonFile"/>.</em></p><p>A file containing the job schedule patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJsonFile(this AzureBatchJobScheduleSetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.JsonFile"/>.</em></p><p>A file containing the job schedule patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Schedule Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetJsonFile(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetAccountEndpoint(this AzureBatchJobScheduleSetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetAccountEndpoint(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetAccountKey(this AzureBatchJobScheduleSetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetAccountKey(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetAccountName(this AzureBatchJobScheduleSetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetAccountName(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetMetadata(this AzureBatchJobScheduleSetSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ClearMetadata(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings AddMetadatum(this AzureBatchJobScheduleSetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings RemoveMetadatum(this AzureBatchJobScheduleSetSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job schedule as metadata. If you do not specify this element, existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetMetadatum(this AzureBatchJobScheduleSetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region JobMetadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobMetadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobMetadata(this AzureBatchJobScheduleSetSettings toolSettings, IDictionary<string, object> jobMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal = jobMetadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleSetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ClearJobMetadata(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleSetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings AddJobMetadatum(this AzureBatchJobScheduleSetSettings toolSettings, string jobMetadatumKey, object jobMetadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal.Add(jobMetadatumKey, jobMetadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleSetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings RemoveJobMetadatum(this AzureBatchJobScheduleSetSettings toolSettings, string jobMetadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal.Remove(jobMetadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleSetSettings.JobMetadata"/>.</em></p><p>A list of name-value pairs associated with each job created under this schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobMetadatum(this AzureBatchJobScheduleSetSettings toolSettings, string jobMetadatumKey, object jobMetadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMetadataInternal[jobMetadatumKey] = jobMetadatumValue;
            return toolSettings;
        }
        #endregion
        #region OnAllTasksComplete
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetOnAllTasksComplete(this AzureBatchJobScheduleSetSettings toolSettings, BatchJobScheduleOnAllTasksComplete onAllTasksComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = onAllTasksComplete;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in a job created under this schedule are in the completed state. Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetOnAllTasksComplete(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Priority"/>.</em></p><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetPriority(this AzureBatchJobScheduleSetSettings toolSettings, int? priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.Priority"/>.</em></p><p>The priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetPriority(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region UsesTaskDependencies
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. Specify either 'true' or 'false' to update the property.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetUsesTaskDependencies(this AzureBatchJobScheduleSetSettings toolSettings, string usesTaskDependencies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = usesTaskDependencies;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. Specify either 'true' or 'false' to update the property.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetUsesTaskDependencies(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskApplicationPackageReferences
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskApplicationPackageReferences"/>.</em></p><p>A list of application packages that the Batch service will deploy to the compute node before running the command line. Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobManagerTaskApplicationPackageReferences(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskApplicationPackageReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskApplicationPackageReferences = jobManagerTaskApplicationPackageReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskApplicationPackageReferences"/>.</em></p><p>A list of application packages that the Batch service will deploy to the compute node before running the command line. Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetJobManagerTaskApplicationPackageReferences(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskApplicationPackageReferences = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobManagerTaskCommandLine(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = jobManagerTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetJobManagerTaskCommandLine(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskEnvironmentSettings
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskEnvironmentSettings"/> to a new dictionary.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobManagerTaskEnvironmentSettings(this AzureBatchJobScheduleSetSettings toolSettings, IDictionary<string, object> jobManagerTaskEnvironmentSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal = jobManagerTaskEnvironmentSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ClearJobManagerTaskEnvironmentSettings(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings AddJobManagerTaskEnvironmentSetting(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskEnvironmentSettingKey, object jobManagerTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Add(jobManagerTaskEnvironmentSettingKey, jobManagerTaskEnvironmentSettingValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings RemoveJobManagerTaskEnvironmentSetting(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskEnvironmentSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Remove(jobManagerTaskEnvironmentSettingKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobManagerTaskEnvironmentSetting(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskEnvironmentSettingKey, object jobManagerTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal[jobManagerTaskEnvironmentSettingKey] = jobManagerTaskEnvironmentSettingValue;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobManagerTaskId(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = jobManagerTaskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetJobManagerTaskId(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetJobManagerTaskResourceFiles(this AzureBatchJobScheduleSetSettings toolSettings, string jobManagerTaskResourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = jobManagerTaskResourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetJobManagerTaskResourceFiles(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetPoolId(this AzureBatchJobScheduleSetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetPoolId(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region DoNotRunAfter
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.DoNotRunAfter"/>.</em></p><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetDoNotRunAfter(this AzureBatchJobScheduleSetSettings toolSettings, string doNotRunAfter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunAfter = doNotRunAfter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.DoNotRunAfter"/>.</em></p><p>A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetDoNotRunAfter(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunAfter = null;
            return toolSettings;
        }
        #endregion
        #region DoNotRunUntil
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.DoNotRunUntil"/>.</em></p><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetDoNotRunUntil(this AzureBatchJobScheduleSetSettings toolSettings, string doNotRunUntil)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunUntil = doNotRunUntil;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.DoNotRunUntil"/>.</em></p><p>The earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetDoNotRunUntil(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DoNotRunUntil = null;
            return toolSettings;
        }
        #endregion
        #region RecurrenceInterval
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.RecurrenceInterval"/>.</em></p><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetRecurrenceInterval(this AzureBatchJobScheduleSetSettings toolSettings, string recurrenceInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RecurrenceInterval = recurrenceInterval;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.RecurrenceInterval"/>.</em></p><p>The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time. Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetRecurrenceInterval(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RecurrenceInterval = null;
            return toolSettings;
        }
        #endregion
        #region StartWindow
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.StartWindow"/>.</em></p><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetStartWindow(this AzureBatchJobScheduleSetSettings toolSettings, string startWindow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartWindow = startWindow;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.StartWindow"/>.</em></p><p>The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created. If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetStartWindow(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartWindow = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetIfMatch(this AzureBatchJobScheduleSetSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetIfMatch(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetIfModifiedSince(this AzureBatchJobScheduleSetSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetIfModifiedSince(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetIfNoneMatch(this AzureBatchJobScheduleSetSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetIfNoneMatch(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleSetSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetDebug(this AzureBatchJobScheduleSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetDebug(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetHelp(this AzureBatchJobScheduleSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetHelp(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetOutput(this AzureBatchJobScheduleSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetOutput(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetQuery(this AzureBatchJobScheduleSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetQuery(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings SetVerbose(this AzureBatchJobScheduleSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleSetSettings ResetVerbose(this AzureBatchJobScheduleSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleShowSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to get.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetJobScheduleId(this AzureBatchJobScheduleShowSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to get.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetJobScheduleId(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetAccountEndpoint(this AzureBatchJobScheduleShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetAccountEndpoint(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetAccountKey(this AzureBatchJobScheduleShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetAccountKey(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetAccountName(this AzureBatchJobScheduleShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetAccountName(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetExpand(this AzureBatchJobScheduleShowSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetExpand(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetIfMatch(this AzureBatchJobScheduleShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetIfMatch(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetIfModifiedSince(this AzureBatchJobScheduleShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetIfModifiedSince(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetIfNoneMatch(this AzureBatchJobScheduleShowSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetIfNoneMatch(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetSelect(this AzureBatchJobScheduleShowSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetSelect(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetDebug(this AzureBatchJobScheduleShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetDebug(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetHelp(this AzureBatchJobScheduleShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetHelp(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetOutput(this AzureBatchJobScheduleShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetOutput(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetQuery(this AzureBatchJobScheduleShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetQuery(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings SetVerbose(this AzureBatchJobScheduleShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleShowSettings ResetVerbose(this AzureBatchJobScheduleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobScheduleStopSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobScheduleStopSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to terminates.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetJobScheduleId(this AzureBatchJobScheduleStopSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule to terminates.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetJobScheduleId(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetAccountEndpoint(this AzureBatchJobScheduleStopSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetAccountEndpoint(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetAccountKey(this AzureBatchJobScheduleStopSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetAccountKey(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetAccountName(this AzureBatchJobScheduleStopSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetAccountName(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetIfMatch(this AzureBatchJobScheduleStopSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetIfMatch(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetIfModifiedSince(this AzureBatchJobScheduleStopSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetIfModifiedSince(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetIfNoneMatch(this AzureBatchJobScheduleStopSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetIfNoneMatch(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetIfUnmodifiedSince(this AzureBatchJobScheduleStopSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetIfUnmodifiedSince(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetDebug(this AzureBatchJobScheduleStopSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetDebug(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetHelp(this AzureBatchJobScheduleStopSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetHelp(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetOutput(this AzureBatchJobScheduleStopSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetOutput(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetQuery(this AzureBatchJobScheduleStopSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetQuery(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobScheduleStopSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings SetVerbose(this AzureBatchJobScheduleStopSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobScheduleStopSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobScheduleStopSettings ResetVerbose(this AzureBatchJobScheduleStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobCreateSettingsExtensions
    {
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JsonFile"/>.</em></p><p>A file containing the job specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJsonFile(this AzureBatchJobCreateSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.JsonFile"/>.</em></p><p>A file containing the job specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetJsonFile(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetAccountEndpoint(this AzureBatchJobCreateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetAccountEndpoint(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetAccountKey(this AzureBatchJobCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetAccountKey(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetAccountName(this AzureBatchJobCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetAccountName(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Id
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Id"/>.</em></p><p>Required. A string that uniquely identifies the job within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetId(this AzureBatchJobCreateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Id"/>.</em></p><p>Required. A string that uniquely identifies the job within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetId(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetMetadata(this AzureBatchJobCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ClearMetadata(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings AddMetadatum(this AzureBatchJobCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings RemoveMetadatum(this AzureBatchJobCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetMetadatum(this AzureBatchJobCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Priority"/>.</em></p><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetPriority(this AzureBatchJobCreateSettings toolSettings, int? priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Priority"/>.</em></p><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetPriority(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region UsesTaskDependencies
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetUsesTaskDependencies(this AzureBatchJobCreateSettings toolSettings, string usesTaskDependencies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = usesTaskDependencies;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.UsesTaskDependencies"/>.</em></p><p>Whether tasks in the job can define dependencies on each other. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetUsesTaskDependencies(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UsesTaskDependencies = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobMaxTaskRetryCount(this AzureBatchJobCreateSettings toolSettings, int? jobMaxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = jobMaxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetJobMaxTaskRetryCount(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxWallClockTime
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobMaxWallClockTime(this AzureBatchJobCreateSettings toolSettings, string jobMaxWallClockTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = jobMaxWallClockTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetJobMaxWallClockTime(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobManagerTaskCommandLine(this AzureBatchJobCreateSettings toolSettings, string jobManagerTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = jobManagerTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.JobManagerTaskCommandLine"/>.</em></p><p>Required. The command line of the Job Manager task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetJobManagerTaskCommandLine(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskEnvironmentSettings
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JobManagerTaskEnvironmentSettings"/> to a new dictionary.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobManagerTaskEnvironmentSettings(this AzureBatchJobCreateSettings toolSettings, IDictionary<string, object> jobManagerTaskEnvironmentSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal = jobManagerTaskEnvironmentSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobCreateSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ClearJobManagerTaskEnvironmentSettings(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobCreateSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings AddJobManagerTaskEnvironmentSetting(this AzureBatchJobCreateSettings toolSettings, string jobManagerTaskEnvironmentSettingKey, object jobManagerTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Add(jobManagerTaskEnvironmentSettingKey, jobManagerTaskEnvironmentSettingValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobCreateSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings RemoveJobManagerTaskEnvironmentSetting(this AzureBatchJobCreateSettings toolSettings, string jobManagerTaskEnvironmentSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal.Remove(jobManagerTaskEnvironmentSettingKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobCreateSettings.JobManagerTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the Job Manager task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobManagerTaskEnvironmentSetting(this AzureBatchJobCreateSettings toolSettings, string jobManagerTaskEnvironmentSettingKey, object jobManagerTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskEnvironmentSettingsInternal[jobManagerTaskEnvironmentSettingKey] = jobManagerTaskEnvironmentSettingValue;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskId
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobManagerTaskId(this AzureBatchJobCreateSettings toolSettings, string jobManagerTaskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = jobManagerTaskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.JobManagerTaskId"/>.</em></p><p>Required. A string that uniquely identifies the Job Manager task within the job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetJobManagerTaskId(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskId = null;
            return toolSettings;
        }
        #endregion
        #region JobManagerTaskResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetJobManagerTaskResourceFiles(this AzureBatchJobCreateSettings toolSettings, string jobManagerTaskResourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = jobManagerTaskResourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.JobManagerTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetJobManagerTaskResourceFiles(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobManagerTaskResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetPoolId(this AzureBatchJobCreateSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetPoolId(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetDebug(this AzureBatchJobCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetDebug(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetHelp(this AzureBatchJobCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetHelp(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetOutput(this AzureBatchJobCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetOutput(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetQuery(this AzureBatchJobCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetQuery(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings SetVerbose(this AzureBatchJobCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobCreateSettings ResetVerbose(this AzureBatchJobCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobDeleteSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.JobId"/>.</em></p><p>The ID of the job to delete.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetJobId(this AzureBatchJobDeleteSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.JobId"/>.</em></p><p>The ID of the job to delete.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetJobId(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetYes(this AzureBatchJobDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetYes(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetAccountEndpoint(this AzureBatchJobDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetAccountEndpoint(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetAccountKey(this AzureBatchJobDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetAccountKey(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetAccountName(this AzureBatchJobDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetAccountName(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetIfMatch(this AzureBatchJobDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetIfMatch(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetIfModifiedSince(this AzureBatchJobDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetIfModifiedSince(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetIfNoneMatch(this AzureBatchJobDeleteSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetIfNoneMatch(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetIfUnmodifiedSince(this AzureBatchJobDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetIfUnmodifiedSince(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetDebug(this AzureBatchJobDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetDebug(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetHelp(this AzureBatchJobDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetHelp(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetOutput(this AzureBatchJobDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetOutput(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetQuery(this AzureBatchJobDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetQuery(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings SetVerbose(this AzureBatchJobDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDeleteSettings ResetVerbose(this AzureBatchJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobDisableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobDisableSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.JobId"/>.</em></p><p>The ID of the job to disable.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetJobId(this AzureBatchJobDisableSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.JobId"/>.</em></p><p>The ID of the job to disable.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetJobId(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region DisableTasks
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.DisableTasks"/>.</em></p><p>What to do with active tasks associated with the job.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetDisableTasks(this AzureBatchJobDisableSettings toolSettings, BatchJobDisableDisableTasks disableTasks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableTasks = disableTasks;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.DisableTasks"/>.</em></p><p>What to do with active tasks associated with the job.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetDisableTasks(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableTasks = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetAccountEndpoint(this AzureBatchJobDisableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetAccountEndpoint(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetAccountKey(this AzureBatchJobDisableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetAccountKey(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetAccountName(this AzureBatchJobDisableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetAccountName(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetIfMatch(this AzureBatchJobDisableSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetIfMatch(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetIfModifiedSince(this AzureBatchJobDisableSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetIfModifiedSince(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetIfNoneMatch(this AzureBatchJobDisableSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetIfNoneMatch(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetIfUnmodifiedSince(this AzureBatchJobDisableSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetIfUnmodifiedSince(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetDebug(this AzureBatchJobDisableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetDebug(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetHelp(this AzureBatchJobDisableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetHelp(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetOutput(this AzureBatchJobDisableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetOutput(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetQuery(this AzureBatchJobDisableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetQuery(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings SetVerbose(this AzureBatchJobDisableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobDisableSettings ResetVerbose(this AzureBatchJobDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobEnableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobEnableSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.JobId"/>.</em></p><p>The ID of the job to enable.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetJobId(this AzureBatchJobEnableSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.JobId"/>.</em></p><p>The ID of the job to enable.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetJobId(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetAccountEndpoint(this AzureBatchJobEnableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetAccountEndpoint(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetAccountKey(this AzureBatchJobEnableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetAccountKey(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetAccountName(this AzureBatchJobEnableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetAccountName(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetIfMatch(this AzureBatchJobEnableSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetIfMatch(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetIfModifiedSince(this AzureBatchJobEnableSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetIfModifiedSince(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetIfNoneMatch(this AzureBatchJobEnableSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetIfNoneMatch(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetIfUnmodifiedSince(this AzureBatchJobEnableSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetIfUnmodifiedSince(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetDebug(this AzureBatchJobEnableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetDebug(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetHelp(this AzureBatchJobEnableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetHelp(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetOutput(this AzureBatchJobEnableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetOutput(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetQuery(this AzureBatchJobEnableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetQuery(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings SetVerbose(this AzureBatchJobEnableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobEnableSettings ResetVerbose(this AzureBatchJobEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobListSettingsExtensions
    {
        #region JobScheduleId
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule from which you want to get a list of jobs. If omitted, lists all jobs in the account.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetJobScheduleId(this AzureBatchJobListSettings toolSettings, string jobScheduleId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = jobScheduleId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.JobScheduleId"/>.</em></p><p>The ID of the job schedule from which you want to get a list of jobs. If omitted, lists all jobs in the account.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetJobScheduleId(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobScheduleId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetAccountEndpoint(this AzureBatchJobListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetAccountEndpoint(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetAccountKey(this AzureBatchJobListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetAccountKey(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetAccountName(this AzureBatchJobListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetAccountName(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetExpand(this AzureBatchJobListSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetExpand(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Filter"/>.</em></p><p>An OData $filter clause.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetFilter(this AzureBatchJobListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Filter"/>.</em></p><p>An OData $filter clause.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetFilter(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetSelect(this AzureBatchJobListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetSelect(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetDebug(this AzureBatchJobListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetDebug(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetHelp(this AzureBatchJobListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetHelp(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetOutput(this AzureBatchJobListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetOutput(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetQuery(this AzureBatchJobListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetQuery(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings SetVerbose(this AzureBatchJobListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobListSettings ResetVerbose(this AzureBatchJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobResetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobResetSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.JobId"/>.</em></p><p>The ID of the job whose properties you want to update.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetJobId(this AzureBatchJobResetSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.JobId"/>.</em></p><p>The ID of the job whose properties you want to update.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetJobId(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.JsonFile"/>.</em></p><p>A file containing the job update parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetJsonFile(this AzureBatchJobResetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.JsonFile"/>.</em></p><p>A file containing the job update parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetJsonFile(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetAccountEndpoint(this AzureBatchJobResetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetAccountEndpoint(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetAccountKey(this AzureBatchJobResetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetAccountKey(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetAccountName(this AzureBatchJobResetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetAccountName(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetMetadata(this AzureBatchJobResetSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ClearMetadata(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings AddMetadatum(this AzureBatchJobResetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings RemoveMetadatum(this AzureBatchJobResetSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobResetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetMetadatum(this AzureBatchJobResetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region OnAllTasksComplete
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in the job are in the completed state. If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a job's completion behavior may not be changed from terminatejob to noaction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetOnAllTasksComplete(this AzureBatchJobResetSettings toolSettings, BatchJobScheduleOnAllTasksComplete onAllTasksComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = onAllTasksComplete;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in the job are in the completed state. If omitted, the completion behavior is set to noaction. If the current value is terminatejob, this is an error because a job's completion behavior may not be changed from terminatejob to noaction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetOnAllTasksComplete(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Priority"/>.</em></p><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetPriority(this AzureBatchJobResetSettings toolSettings, int? priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.Priority"/>.</em></p><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetPriority(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetJobMaxTaskRetryCount(this AzureBatchJobResetSettings toolSettings, int? jobMaxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = jobMaxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetJobMaxTaskRetryCount(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxWallClockTime
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetJobMaxWallClockTime(this AzureBatchJobResetSettings toolSettings, string jobMaxWallClockTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = jobMaxWallClockTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetJobMaxWallClockTime(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetPoolId(this AzureBatchJobResetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetPoolId(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetIfMatch(this AzureBatchJobResetSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetIfMatch(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetIfModifiedSince(this AzureBatchJobResetSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetIfModifiedSince(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetIfNoneMatch(this AzureBatchJobResetSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetIfNoneMatch(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetIfUnmodifiedSince(this AzureBatchJobResetSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetIfUnmodifiedSince(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetDebug(this AzureBatchJobResetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetDebug(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetHelp(this AzureBatchJobResetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetHelp(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetOutput(this AzureBatchJobResetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetOutput(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetQuery(this AzureBatchJobResetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetQuery(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings SetVerbose(this AzureBatchJobResetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobResetSettings ResetVerbose(this AzureBatchJobResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobSetSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.JobId"/>.</em></p><p>The ID of the job whose properties you want to update.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetJobId(this AzureBatchJobSetSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.JobId"/>.</em></p><p>The ID of the job whose properties you want to update.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetJobId(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.JsonFile"/>.</em></p><p>A file containing the job patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetJsonFile(this AzureBatchJobSetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.JsonFile"/>.</em></p><p>A file containing the job patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Job Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetJsonFile(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetAccountEndpoint(this AzureBatchJobSetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetAccountEndpoint(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetAccountKey(this AzureBatchJobSetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetAccountKey(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetAccountName(this AzureBatchJobSetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetAccountName(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetMetadata(this AzureBatchJobSetSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchJobSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ClearMetadata(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchJobSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings AddMetadatum(this AzureBatchJobSetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchJobSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings RemoveMetadatum(this AzureBatchJobSetSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchJobSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the job as metadata. If omitted, the existing job metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetMetadatum(this AzureBatchJobSetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region OnAllTasksComplete
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in the job are in the completed state. If omitted, the completion behavior is left unchanged. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails with an 'invalid property value' error response; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetOnAllTasksComplete(this AzureBatchJobSetSettings toolSettings, BatchJobScheduleOnAllTasksComplete onAllTasksComplete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = onAllTasksComplete;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.OnAllTasksComplete"/>.</em></p><p>The action the Batch service should take when all tasks in the job are in the completed state. If omitted, the completion behavior is left unchanged. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails with an 'invalid property value' error response; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetOnAllTasksComplete(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnAllTasksComplete = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Priority"/>.</em></p><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetPriority(this AzureBatchJobSetSettings toolSettings, int? priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.Priority"/>.</em></p><p>The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetPriority(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetJobMaxTaskRetryCount(this AzureBatchJobSetSettings toolSettings, int? jobMaxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = jobMaxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.JobMaxTaskRetryCount"/>.</em></p><p>The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetJobMaxTaskRetryCount(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region JobMaxWallClockTime
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetJobMaxWallClockTime(this AzureBatchJobSetSettings toolSettings, string jobMaxWallClockTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = jobMaxWallClockTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.JobMaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the job may run, measured from the time the job is created. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetJobMaxWallClockTime(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobMaxWallClockTime = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetPoolId(this AzureBatchJobSetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.PoolId"/>.</em></p><p>The id of an existing pool. All the tasks of the job will run on the specified pool.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetPoolId(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetIfMatch(this AzureBatchJobSetSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetIfMatch(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetIfModifiedSince(this AzureBatchJobSetSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetIfModifiedSince(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetIfNoneMatch(this AzureBatchJobSetSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetIfNoneMatch(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetIfUnmodifiedSince(this AzureBatchJobSetSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetIfUnmodifiedSince(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetDebug(this AzureBatchJobSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetDebug(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetHelp(this AzureBatchJobSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetHelp(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetOutput(this AzureBatchJobSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetOutput(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetQuery(this AzureBatchJobSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetQuery(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings SetVerbose(this AzureBatchJobSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobSetSettings ResetVerbose(this AzureBatchJobSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobShowSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetJobId(this AzureBatchJobShowSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetJobId(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetAccountEndpoint(this AzureBatchJobShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetAccountEndpoint(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetAccountKey(this AzureBatchJobShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetAccountKey(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetAccountName(this AzureBatchJobShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetAccountName(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetExpand(this AzureBatchJobShowSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetExpand(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetIfMatch(this AzureBatchJobShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetIfMatch(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetIfModifiedSince(this AzureBatchJobShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetIfModifiedSince(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetIfNoneMatch(this AzureBatchJobShowSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetIfNoneMatch(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetIfUnmodifiedSince(this AzureBatchJobShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetIfUnmodifiedSince(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetSelect(this AzureBatchJobShowSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetSelect(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetDebug(this AzureBatchJobShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetDebug(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetHelp(this AzureBatchJobShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetHelp(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetOutput(this AzureBatchJobShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetOutput(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetQuery(this AzureBatchJobShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetQuery(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings SetVerbose(this AzureBatchJobShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobShowSettings ResetVerbose(this AzureBatchJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobStopSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobStopSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.JobId"/>.</em></p><p>The ID of the job to terminate.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetJobId(this AzureBatchJobStopSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.JobId"/>.</em></p><p>The ID of the job to terminate.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetJobId(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TerminateReason
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.TerminateReason"/>.</em></p><p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetTerminateReason(this AzureBatchJobStopSettings toolSettings, string terminateReason)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TerminateReason = terminateReason;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.TerminateReason"/>.</em></p><p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetTerminateReason(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TerminateReason = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetAccountEndpoint(this AzureBatchJobStopSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetAccountEndpoint(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetAccountKey(this AzureBatchJobStopSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetAccountKey(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetAccountName(this AzureBatchJobStopSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetAccountName(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetIfMatch(this AzureBatchJobStopSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetIfMatch(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetIfModifiedSince(this AzureBatchJobStopSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetIfModifiedSince(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetIfNoneMatch(this AzureBatchJobStopSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetIfNoneMatch(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetIfUnmodifiedSince(this AzureBatchJobStopSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetIfUnmodifiedSince(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetDebug(this AzureBatchJobStopSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetDebug(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetHelp(this AzureBatchJobStopSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetHelp(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetOutput(this AzureBatchJobStopSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetOutput(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetQuery(this AzureBatchJobStopSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetQuery(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobStopSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings SetVerbose(this AzureBatchJobStopSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobStopSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobStopSettings ResetVerbose(this AzureBatchJobStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchLocationSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchLocationSettingsExtensions
    {
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchLocationSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings SetDebug(this AzureBatchLocationSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings ResetDebug(this AzureBatchLocationSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchLocationSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings SetHelp(this AzureBatchLocationSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings ResetHelp(this AzureBatchLocationSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchLocationSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings SetOutput(this AzureBatchLocationSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings ResetOutput(this AzureBatchLocationSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchLocationSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings SetQuery(this AzureBatchLocationSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings ResetQuery(this AzureBatchLocationSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchLocationSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings SetVerbose(this AzureBatchLocationSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationSettings ResetVerbose(this AzureBatchLocationSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeDeleteSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool from which you want to remove nodes.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetPoolId(this AzureBatchNodeDeleteSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool from which you want to remove nodes.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetPoolId(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.JsonFile"/>.</em></p><p>A file containing the node remove parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Node Remove Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetJsonFile(this AzureBatchNodeDeleteSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.JsonFile"/>.</em></p><p>A file containing the node remove parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Node Remove Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetJsonFile(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetAccountEndpoint(this AzureBatchNodeDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetAccountEndpoint(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetAccountKey(this AzureBatchNodeDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetAccountKey(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetAccountName(this AzureBatchNodeDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetAccountName(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region NodeDeallocationOption
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.NodeDeallocationOption"/>.</em></p><p>Determines what to do with a node and its running task(s) after it has been selected for deallocation. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetNodeDeallocationOption(this AzureBatchNodeDeleteSettings toolSettings, BatchNodeNodeDeallocationOption nodeDeallocationOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeDeallocationOption = nodeDeallocationOption;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.NodeDeallocationOption"/>.</em></p><p>Determines what to do with a node and its running task(s) after it has been selected for deallocation. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetNodeDeallocationOption(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeDeallocationOption = null;
            return toolSettings;
        }
        #endregion
        #region NodeList
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.NodeList"/>.</em></p><p>Required. A list containing the IDs of the compute nodes to be removed from the specified pool. Space-separated values.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetNodeList(this AzureBatchNodeDeleteSettings toolSettings, string nodeList)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeList = nodeList;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.NodeList"/>.</em></p><p>Required. A list containing the IDs of the compute nodes to be removed from the specified pool. Space-separated values.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetNodeList(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeList = null;
            return toolSettings;
        }
        #endregion
        #region ResizeTimeout
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.ResizeTimeout"/>.</em></p><p>The timeout for removal of compute nodes to the pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetResizeTimeout(this AzureBatchNodeDeleteSettings toolSettings, string resizeTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResizeTimeout = resizeTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.ResizeTimeout"/>.</em></p><p>The timeout for removal of compute nodes to the pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetResizeTimeout(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResizeTimeout = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetIfMatch(this AzureBatchNodeDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetIfMatch(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetIfModifiedSince(this AzureBatchNodeDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetIfModifiedSince(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetIfNoneMatch(this AzureBatchNodeDeleteSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetIfNoneMatch(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetIfUnmodifiedSince(this AzureBatchNodeDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetIfUnmodifiedSince(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetDebug(this AzureBatchNodeDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetDebug(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetHelp(this AzureBatchNodeDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetHelp(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetOutput(this AzureBatchNodeDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetOutput(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetQuery(this AzureBatchNodeDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetQuery(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings SetVerbose(this AzureBatchNodeDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeDeleteSettings ResetVerbose(this AzureBatchNodeDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeListSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.PoolId"/>.</em></p><p>The ID of the pool from which you want to list nodes.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetPoolId(this AzureBatchNodeListSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.PoolId"/>.</em></p><p>The ID of the pool from which you want to list nodes.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetPoolId(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetAccountEndpoint(this AzureBatchNodeListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetAccountEndpoint(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetAccountKey(this AzureBatchNodeListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetAccountKey(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetAccountName(this AzureBatchNodeListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetAccountName(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool</a>.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetFilter(this AzureBatchNodeListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool</a>.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetFilter(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetSelect(this AzureBatchNodeListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetSelect(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetDebug(this AzureBatchNodeListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetDebug(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetHelp(this AzureBatchNodeListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetHelp(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetOutput(this AzureBatchNodeListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetOutput(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetQuery(this AzureBatchNodeListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetQuery(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings SetVerbose(this AzureBatchNodeListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeListSettings ResetVerbose(this AzureBatchNodeListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeRebootSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeRebootSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.NodeId"/>.</em></p><p>The ID of the compute node that you want to restart.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetNodeId(this AzureBatchNodeRebootSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.NodeId"/>.</em></p><p>The ID of the compute node that you want to restart.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetNodeId(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetPoolId(this AzureBatchNodeRebootSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetPoolId(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region NodeRebootOption
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.NodeRebootOption"/>.</em></p><p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetNodeRebootOption(this AzureBatchNodeRebootSettings toolSettings, BatchNodeNodeDeallocationOption nodeRebootOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeRebootOption = nodeRebootOption;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.NodeRebootOption"/>.</em></p><p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetNodeRebootOption(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeRebootOption = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetAccountEndpoint(this AzureBatchNodeRebootSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetAccountEndpoint(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetAccountKey(this AzureBatchNodeRebootSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetAccountKey(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetAccountName(this AzureBatchNodeRebootSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetAccountName(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetDebug(this AzureBatchNodeRebootSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetDebug(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetHelp(this AzureBatchNodeRebootSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetHelp(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetOutput(this AzureBatchNodeRebootSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetOutput(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetQuery(this AzureBatchNodeRebootSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetQuery(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRebootSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings SetVerbose(this AzureBatchNodeRebootSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRebootSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRebootSettings ResetVerbose(this AzureBatchNodeRebootSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeReimageSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeReimageSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.NodeId"/>.</em></p><p>The ID of the compute node that you want to restart.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetNodeId(this AzureBatchNodeReimageSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.NodeId"/>.</em></p><p>The ID of the compute node that you want to restart.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetNodeId(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetPoolId(this AzureBatchNodeReimageSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetPoolId(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region NodeReimageOption
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.NodeReimageOption"/>.</em></p><p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetNodeReimageOption(this AzureBatchNodeReimageSettings toolSettings, BatchNodeNodeDeallocationOption nodeReimageOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeReimageOption = nodeReimageOption;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.NodeReimageOption"/>.</em></p><p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetNodeReimageOption(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeReimageOption = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetAccountEndpoint(this AzureBatchNodeReimageSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetAccountEndpoint(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetAccountKey(this AzureBatchNodeReimageSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetAccountKey(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetAccountName(this AzureBatchNodeReimageSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetAccountName(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetDebug(this AzureBatchNodeReimageSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetDebug(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetHelp(this AzureBatchNodeReimageSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetHelp(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetOutput(this AzureBatchNodeReimageSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetOutput(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetQuery(this AzureBatchNodeReimageSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetQuery(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeReimageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings SetVerbose(this AzureBatchNodeReimageSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeReimageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeReimageSettings ResetVerbose(this AzureBatchNodeReimageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeShowSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.NodeId"/>.</em></p><p>The ID of the compute node that you want to get information about.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetNodeId(this AzureBatchNodeShowSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.NodeId"/>.</em></p><p>The ID of the compute node that you want to get information about.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetNodeId(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetPoolId(this AzureBatchNodeShowSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetPoolId(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetAccountEndpoint(this AzureBatchNodeShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetAccountEndpoint(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetAccountKey(this AzureBatchNodeShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetAccountKey(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetAccountName(this AzureBatchNodeShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetAccountName(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetSelect(this AzureBatchNodeShowSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetSelect(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetDebug(this AzureBatchNodeShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetDebug(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetHelp(this AzureBatchNodeShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetHelp(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetOutput(this AzureBatchNodeShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetOutput(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetQuery(this AzureBatchNodeShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetQuery(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings SetVerbose(this AzureBatchNodeShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeShowSettings ResetVerbose(this AzureBatchNodeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolCreateSettingsExtensions
    {
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.JsonFile"/>.</em></p><p>A file containing the pool specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Pool Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetJsonFile(this AzureBatchPoolCreateSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.JsonFile"/>.</em></p><p>A file containing the pool specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Pool Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetJsonFile(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetAccountEndpoint(this AzureBatchPoolCreateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetAccountEndpoint(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetAccountKey(this AzureBatchPoolCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetAccountKey(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetAccountName(this AzureBatchPoolCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetAccountName(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ApplicationLicenses
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.ApplicationLicenses"/>.</em></p><p>The list of application licenses the Batch service will make available on each compute node in the pool. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail. Space-separated values.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetApplicationLicenses(this AzureBatchPoolCreateSettings toolSettings, string applicationLicenses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationLicenses = applicationLicenses;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.ApplicationLicenses"/>.</em></p><p>The list of application licenses the Batch service will make available on each compute node in the pool. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail. Space-separated values.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetApplicationLicenses(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationLicenses = null;
            return toolSettings;
        }
        #endregion
        #region ApplicationPackageReferences
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.ApplicationPackageReferences"/>.</em></p><p>The list of application packages to be installed on each compute node in the pool. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetApplicationPackageReferences(this AzureBatchPoolCreateSettings toolSettings, string applicationPackageReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = applicationPackageReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.ApplicationPackageReferences"/>.</em></p><p>The list of application packages to be installed on each compute node in the pool. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetApplicationPackageReferences(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = null;
            return toolSettings;
        }
        #endregion
        #region AutoScaleFormula
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.AutoScaleFormula"/>.</em></p><p>A formula for the desired number of compute nodes in the pool. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see <a href="https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/">https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetAutoScaleFormula(this AzureBatchPoolCreateSettings toolSettings, string autoScaleFormula)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleFormula = autoScaleFormula;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.AutoScaleFormula"/>.</em></p><p>A formula for the desired number of compute nodes in the pool. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see <a href="https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/">https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetAutoScaleFormula(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleFormula = null;
            return toolSettings;
        }
        #endregion
        #region CertificateReferences
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.CertificateReferences"/>.</em></p><p>The list of certificates to be installed on each compute node in the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space-separated certificate thumbprints.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetCertificateReferences(this AzureBatchPoolCreateSettings toolSettings, string certificateReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateReferences = certificateReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.CertificateReferences"/>.</em></p><p>The list of certificates to be installed on each compute node in the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space-separated certificate thumbprints.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetCertificateReferences(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateReferences = null;
            return toolSettings;
        }
        #endregion
        #region EnableInterNodeCommunication
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.EnableInterNodeCommunication"/>.</em></p><p>Whether the pool permits direct communication between nodes. Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetEnableInterNodeCommunication(this AzureBatchPoolCreateSettings toolSettings, string enableInterNodeCommunication)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableInterNodeCommunication = enableInterNodeCommunication;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.EnableInterNodeCommunication"/>.</em></p><p>Whether the pool permits direct communication between nodes. Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetEnableInterNodeCommunication(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableInterNodeCommunication = null;
            return toolSettings;
        }
        #endregion
        #region Id
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Id"/>.</em></p><p>Required. A string that uniquely identifies the pool within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two pool IDs within an account that differ only by case).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetId(this AzureBatchPoolCreateSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Id"/>.</em></p><p>Required. A string that uniquely identifies the pool within the account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two pool IDs within an account that differ only by case).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetId(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region MaxTasksPerNode
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.MaxTasksPerNode"/>.</em></p><p>The maximum number of tasks that can run concurrently on a single compute node in the pool. The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetMaxTasksPerNode(this AzureBatchPoolCreateSettings toolSettings, int? maxTasksPerNode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxTasksPerNode = maxTasksPerNode;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.MaxTasksPerNode"/>.</em></p><p>The maximum number of tasks that can run concurrently on a single compute node in the pool. The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetMaxTasksPerNode(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxTasksPerNode = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetMetadata(this AzureBatchPoolCreateSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchPoolCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ClearMetadata(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchPoolCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings AddMetadatum(this AzureBatchPoolCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchPoolCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings RemoveMetadatum(this AzureBatchPoolCreateSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchPoolCreateSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetMetadatum(this AzureBatchPoolCreateSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region ResizeTimeout
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.ResizeTimeout"/>.</em></p><p>The timeout for allocation of compute nodes to the pool. This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetResizeTimeout(this AzureBatchPoolCreateSettings toolSettings, string resizeTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResizeTimeout = resizeTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.ResizeTimeout"/>.</em></p><p>The timeout for allocation of compute nodes to the pool. This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetResizeTimeout(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResizeTimeout = null;
            return toolSettings;
        }
        #endregion
        #region TargetDedicatedNodes
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.TargetDedicatedNodes"/>.</em></p><p>The desired number of dedicated compute nodes in the pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetTargetDedicatedNodes(this AzureBatchPoolCreateSettings toolSettings, string targetDedicatedNodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDedicatedNodes = targetDedicatedNodes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.TargetDedicatedNodes"/>.</em></p><p>The desired number of dedicated compute nodes in the pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetTargetDedicatedNodes(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDedicatedNodes = null;
            return toolSettings;
        }
        #endregion
        #region TargetLowPriorityNodes
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.TargetLowPriorityNodes"/>.</em></p><p>The desired number of low-priority compute nodes in the pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetTargetLowPriorityNodes(this AzureBatchPoolCreateSettings toolSettings, string targetLowPriorityNodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetLowPriorityNodes = targetLowPriorityNodes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.TargetLowPriorityNodes"/>.</em></p><p>The desired number of low-priority compute nodes in the pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetTargetLowPriorityNodes(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetLowPriorityNodes = null;
            return toolSettings;
        }
        #endregion
        #region VmSize
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.VmSize"/>.</em></p><p>Required. The size of virtual machines in the pool. All virtual machines in a pool are the same size. For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (<a href="https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/">https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/</a>). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (<a href="https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/">https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/</a>) or Sizes for Virtual Machines (Windows) (<a href="https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/">https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/</a>). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetVmSize(this AzureBatchPoolCreateSettings toolSettings, string vmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VmSize = vmSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.VmSize"/>.</em></p><p>Required. The size of virtual machines in the pool. All virtual machines in a pool are the same size. For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (<a href="https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/">https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/</a>). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (<a href="https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/">https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/</a>) or Sizes for Virtual Machines (Windows) (<a href="https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/">https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/</a>). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetVmSize(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VmSize = null;
            return toolSettings;
        }
        #endregion
        #region OsFamily
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.OsFamily"/>.</em></p><p>Required. The Azure Guest OS family to be installed on the virtual machines in the pool. Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (<a href="https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases">https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetOsFamily(this AzureBatchPoolCreateSettings toolSettings, BatchPoolCreateOsFamily osFamily)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFamily = osFamily;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.OsFamily"/>.</em></p><p>Required. The Azure Guest OS family to be installed on the virtual machines in the pool. Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (<a href="https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases">https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetOsFamily(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFamily = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.StartTaskCommandLine"/>.</em></p><p>Required. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetStartTaskCommandLine(this AzureBatchPoolCreateSettings toolSettings, string startTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskCommandLine = startTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.StartTaskCommandLine"/>.</em></p><p>Required. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetStartTaskCommandLine(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.StartTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the task's working directory. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetStartTaskResourceFiles(this AzureBatchPoolCreateSettings toolSettings, string startTaskResourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskResourceFiles = startTaskResourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.StartTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the task's working directory. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetStartTaskResourceFiles(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskWaitForSuccess
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.StartTaskWaitForSuccess"/>.</em></p><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetStartTaskWaitForSuccess(this AzureBatchPoolCreateSettings toolSettings, string startTaskWaitForSuccess)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskWaitForSuccess = startTaskWaitForSuccess;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.StartTaskWaitForSuccess"/>.</em></p><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetStartTaskWaitForSuccess(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskWaitForSuccess = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Image"/>.</em></p><p>OS image reference. This can be either 'publisher:offer:sku[:version]' format, or a fully qualified ARM image id of the form '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}'. If 'publisher:offer:sku[:version]' format, version is optional and if omitted latest will be used. Valid values can be retrieved via 'az batch pool node-agent-skus list'. For example: 'MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:latest'.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetImage(this AzureBatchPoolCreateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Image"/>.</em></p><p>OS image reference. This can be either 'publisher:offer:sku[:version]' format, or a fully qualified ARM image id of the form '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}'. If 'publisher:offer:sku[:version]' format, version is optional and if omitted latest will be used. Valid values can be retrieved via 'az batch pool node-agent-skus list'. For example: 'MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:latest'.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetImage(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region NodeAgentSkuId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.NodeAgentSkuId"/>.</em></p><p>Required. The SKU of the Batch node agent to be provisioned on compute nodes in the pool. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetNodeAgentSkuId(this AzureBatchPoolCreateSettings toolSettings, string nodeAgentSkuId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeAgentSkuId = nodeAgentSkuId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.NodeAgentSkuId"/>.</em></p><p>Required. The SKU of the Batch node agent to be provisioned on compute nodes in the pool. The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetNodeAgentSkuId(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeAgentSkuId = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetDebug(this AzureBatchPoolCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetDebug(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetHelp(this AzureBatchPoolCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetHelp(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetOutput(this AzureBatchPoolCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetOutput(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetQuery(this AzureBatchPoolCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetQuery(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings SetVerbose(this AzureBatchPoolCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolCreateSettings ResetVerbose(this AzureBatchPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolDeleteSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool to delete.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetPoolId(this AzureBatchPoolDeleteSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool to delete.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetPoolId(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetYes(this AzureBatchPoolDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetYes(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetAccountEndpoint(this AzureBatchPoolDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetAccountEndpoint(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetAccountKey(this AzureBatchPoolDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetAccountKey(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetAccountName(this AzureBatchPoolDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetAccountName(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetIfMatch(this AzureBatchPoolDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetIfMatch(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetIfModifiedSince(this AzureBatchPoolDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetIfModifiedSince(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetIfNoneMatch(this AzureBatchPoolDeleteSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetIfNoneMatch(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetIfUnmodifiedSince(this AzureBatchPoolDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetIfUnmodifiedSince(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetDebug(this AzureBatchPoolDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetDebug(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetHelp(this AzureBatchPoolDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetHelp(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetOutput(this AzureBatchPoolDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetOutput(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetQuery(this AzureBatchPoolDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetQuery(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings SetVerbose(this AzureBatchPoolDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolDeleteSettings ResetVerbose(this AzureBatchPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetAccountEndpoint(this AzureBatchPoolListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetAccountEndpoint(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetAccountKey(this AzureBatchPoolListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetAccountKey(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetAccountName(this AzureBatchPoolListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetAccountName(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetExpand(this AzureBatchPoolListSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetExpand(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetFilter(this AzureBatchPoolListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetFilter(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetSelect(this AzureBatchPoolListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetSelect(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetDebug(this AzureBatchPoolListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetDebug(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetHelp(this AzureBatchPoolListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetHelp(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetOutput(this AzureBatchPoolListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetOutput(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetQuery(this AzureBatchPoolListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetQuery(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings SetVerbose(this AzureBatchPoolListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolListSettings ResetVerbose(this AzureBatchPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolResetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolResetSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.PoolId"/>.</em></p><p>The ID of the pool to update.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetPoolId(this AzureBatchPoolResetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.PoolId"/>.</em></p><p>The ID of the pool to update.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetPoolId(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.JsonFile"/>.</em></p><p>The file containing pool update properties parameter specification in JSON(formatted to match REST API request body). If this parameter is specified, all 'Pool Update Properties Parameter Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetJsonFile(this AzureBatchPoolResetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.JsonFile"/>.</em></p><p>The file containing pool update properties parameter specification in JSON(formatted to match REST API request body). If this parameter is specified, all 'Pool Update Properties Parameter Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetJsonFile(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetAccountEndpoint(this AzureBatchPoolResetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetAccountEndpoint(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetAccountKey(this AzureBatchPoolResetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetAccountKey(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetAccountName(this AzureBatchPoolResetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetAccountName(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ApplicationPackageReferences
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.ApplicationPackageReferences"/>.</em></p><p>Required. A list of application packages to be installed on each compute node in the pool. The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetApplicationPackageReferences(this AzureBatchPoolResetSettings toolSettings, string applicationPackageReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = applicationPackageReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.ApplicationPackageReferences"/>.</em></p><p>Required. A list of application packages to be installed on each compute node in the pool. The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetApplicationPackageReferences(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = null;
            return toolSettings;
        }
        #endregion
        #region CertificateReferences
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.CertificateReferences"/>.</em></p><p>Required. A list of certificates to be installed on each compute node in the pool. This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetCertificateReferences(this AzureBatchPoolResetSettings toolSettings, string certificateReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateReferences = certificateReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.CertificateReferences"/>.</em></p><p>Required. A list of certificates to be installed on each compute node in the pool. This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetCertificateReferences(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateReferences = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.Metadata"/>.</em></p><p>Required. A list of name-value pairs associated with the pool as metadata. This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetMetadata(this AzureBatchPoolResetSettings toolSettings, string metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Metadata = metadata;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.Metadata"/>.</em></p><p>Required. A list of name-value pairs associated with the pool as metadata. This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetMetadata(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Metadata = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.StartTaskCommandLine"/>.</em></p><p>The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetStartTaskCommandLine(this AzureBatchPoolResetSettings toolSettings, string startTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskCommandLine = startTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.StartTaskCommandLine"/>.</em></p><p>The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetStartTaskCommandLine(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskEnvironmentSettings
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.StartTaskEnvironmentSettings"/> to a new dictionary.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetStartTaskEnvironmentSettings(this AzureBatchPoolResetSettings toolSettings, IDictionary<string, object> startTaskEnvironmentSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal = startTaskEnvironmentSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchPoolResetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ClearStartTaskEnvironmentSettings(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchPoolResetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings AddStartTaskEnvironmentSetting(this AzureBatchPoolResetSettings toolSettings, string startTaskEnvironmentSettingKey, object startTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal.Add(startTaskEnvironmentSettingKey, startTaskEnvironmentSettingValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchPoolResetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings RemoveStartTaskEnvironmentSetting(this AzureBatchPoolResetSettings toolSettings, string startTaskEnvironmentSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal.Remove(startTaskEnvironmentSettingKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchPoolResetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetStartTaskEnvironmentSetting(this AzureBatchPoolResetSettings toolSettings, string startTaskEnvironmentSettingKey, object startTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal[startTaskEnvironmentSettingKey] = startTaskEnvironmentSettingValue;
            return toolSettings;
        }
        #endregion
        #region StartTaskMaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.StartTaskMaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetStartTaskMaxTaskRetryCount(this AzureBatchPoolResetSettings toolSettings, int? startTaskMaxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskMaxTaskRetryCount = startTaskMaxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.StartTaskMaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetStartTaskMaxTaskRetryCount(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskMaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskWaitForSuccess
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.StartTaskWaitForSuccess"/>.</em></p><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. True if flag present, otherwise defaults to False.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetStartTaskWaitForSuccess(this AzureBatchPoolResetSettings toolSettings, string startTaskWaitForSuccess)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskWaitForSuccess = startTaskWaitForSuccess;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.StartTaskWaitForSuccess"/>.</em></p><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. True if flag present, otherwise defaults to False.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetStartTaskWaitForSuccess(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskWaitForSuccess = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetDebug(this AzureBatchPoolResetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetDebug(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetHelp(this AzureBatchPoolResetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetHelp(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetOutput(this AzureBatchPoolResetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetOutput(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetQuery(this AzureBatchPoolResetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetQuery(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings SetVerbose(this AzureBatchPoolResetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResetSettings ResetVerbose(this AzureBatchPoolResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolResizeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolResizeSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.PoolId"/>.</em></p><p>The ID of the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetPoolId(this AzureBatchPoolResizeSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.PoolId"/>.</em></p><p>The ID of the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetPoolId(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region Abort
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.Abort"/>.</em></p><p>Stop the pool resize operation.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetAbort(this AzureBatchPoolResizeSettings toolSettings, string abort)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Abort = abort;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.Abort"/>.</em></p><p>Stop the pool resize operation.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetAbort(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Abort = null;
            return toolSettings;
        }
        #endregion
        #region NodeDeallocationOption
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.NodeDeallocationOption"/>.</em></p><p>When nodes may be removed from the pool, if the pool size is decreasing.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetNodeDeallocationOption(this AzureBatchPoolResizeSettings toolSettings, BatchNodeNodeDeallocationOption nodeDeallocationOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeDeallocationOption = nodeDeallocationOption;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.NodeDeallocationOption"/>.</em></p><p>When nodes may be removed from the pool, if the pool size is decreasing.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetNodeDeallocationOption(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeDeallocationOption = null;
            return toolSettings;
        }
        #endregion
        #region ResizeTimeout
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.ResizeTimeout"/>.</em></p><p>The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetResizeTimeout(this AzureBatchPoolResizeSettings toolSettings, string resizeTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResizeTimeout = resizeTimeout;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.ResizeTimeout"/>.</em></p><p>The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetResizeTimeout(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResizeTimeout = null;
            return toolSettings;
        }
        #endregion
        #region TargetDedicatedNodes
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.TargetDedicatedNodes"/>.</em></p><p>The desired number of dedicated compute nodes in the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetTargetDedicatedNodes(this AzureBatchPoolResizeSettings toolSettings, string targetDedicatedNodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDedicatedNodes = targetDedicatedNodes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.TargetDedicatedNodes"/>.</em></p><p>The desired number of dedicated compute nodes in the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetTargetDedicatedNodes(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDedicatedNodes = null;
            return toolSettings;
        }
        #endregion
        #region TargetLowPriorityNodes
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.TargetLowPriorityNodes"/>.</em></p><p>The desired number of low-priority compute nodes in the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetTargetLowPriorityNodes(this AzureBatchPoolResizeSettings toolSettings, string targetLowPriorityNodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetLowPriorityNodes = targetLowPriorityNodes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.TargetLowPriorityNodes"/>.</em></p><p>The desired number of low-priority compute nodes in the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetTargetLowPriorityNodes(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetLowPriorityNodes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetAccountEndpoint(this AzureBatchPoolResizeSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetAccountEndpoint(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetAccountKey(this AzureBatchPoolResizeSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetAccountKey(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetAccountName(this AzureBatchPoolResizeSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetAccountName(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.IfMatch"/>.</em></p><p>The operation will be performed only if the resource's current ETag exactly matches the specified value.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetIfMatch(this AzureBatchPoolResizeSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.IfMatch"/>.</em></p><p>The operation will be performed only if the resource's current ETag exactly matches the specified value.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetIfMatch(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.IfModifiedSince"/>.</em></p><p>The operation will be performed only if the resource has been modified since the specified timestamp.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetIfModifiedSince(this AzureBatchPoolResizeSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.IfModifiedSince"/>.</em></p><p>The operation will be performed only if the resource has been modified since the specified timestamp.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetIfModifiedSince(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.IfNoneMatch"/>.</em></p><p>The operation will not be performed only if the resource's current ETag exactly matches the specified value.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetIfNoneMatch(this AzureBatchPoolResizeSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.IfNoneMatch"/>.</em></p><p>The operation will not be performed only if the resource's current ETag exactly matches the specified value.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetIfNoneMatch(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.IfUnmodifiedSince"/>.</em></p><p>The operation will not be performed only if the resource has been modified since the specified timestamp.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetIfUnmodifiedSince(this AzureBatchPoolResizeSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.IfUnmodifiedSince"/>.</em></p><p>The operation will not be performed only if the resource has been modified since the specified timestamp.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetIfUnmodifiedSince(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetDebug(this AzureBatchPoolResizeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetDebug(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetHelp(this AzureBatchPoolResizeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetHelp(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetOutput(this AzureBatchPoolResizeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetOutput(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetQuery(this AzureBatchPoolResizeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetQuery(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolResizeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings SetVerbose(this AzureBatchPoolResizeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolResizeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolResizeSettings ResetVerbose(this AzureBatchPoolResizeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolSetSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.PoolId"/>.</em></p><p>The ID of the pool to update.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetPoolId(this AzureBatchPoolSetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.PoolId"/>.</em></p><p>The ID of the pool to update.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetPoolId(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.JsonFile"/>.</em></p><p>A file containing the pool patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Pool Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetJsonFile(this AzureBatchPoolSetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.JsonFile"/>.</em></p><p>A file containing the pool patch parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Pool Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetJsonFile(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetAccountEndpoint(this AzureBatchPoolSetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetAccountEndpoint(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetAccountKey(this AzureBatchPoolSetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetAccountKey(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetAccountName(this AzureBatchPoolSetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetAccountName(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ApplicationPackageReferences
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.ApplicationPackageReferences"/>.</em></p><p>A list of application packages to be installed on each compute node in the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetApplicationPackageReferences(this AzureBatchPoolSetSettings toolSettings, string applicationPackageReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = applicationPackageReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.ApplicationPackageReferences"/>.</em></p><p>A list of application packages to be installed on each compute node in the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetApplicationPackageReferences(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = null;
            return toolSettings;
        }
        #endregion
        #region CertificateReferences
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.CertificateReferences"/>.</em></p><p>A list of certificates to be installed on each compute node in the pool. If this element is present, it replaces any existing certificate references configured on the pool. If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space-separated certificate thumbprints.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetCertificateReferences(this AzureBatchPoolSetSettings toolSettings, string certificateReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateReferences = certificateReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.CertificateReferences"/>.</em></p><p>A list of certificates to be installed on each compute node in the pool. If this element is present, it replaces any existing certificate references configured on the pool. If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space-separated certificate thumbprints.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetCertificateReferences(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateReferences = null;
            return toolSettings;
        }
        #endregion
        #region Metadata
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.Metadata"/> to a new dictionary.</em></p><p>A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetMetadata(this AzureBatchPoolSetSettings toolSettings, IDictionary<string, object> metadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal = metadata.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchPoolSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ClearMetadata(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchPoolSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings AddMetadatum(this AzureBatchPoolSetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Add(metadatumKey, metadatumValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchPoolSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings RemoveMetadatum(this AzureBatchPoolSetSettings toolSettings, string metadatumKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal.Remove(metadatumKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchPoolSetSettings.Metadata"/>.</em></p><p>A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetMetadatum(this AzureBatchPoolSetSettings toolSettings, string metadatumKey, object metadatumValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MetadataInternal[metadatumKey] = metadatumValue;
            return toolSettings;
        }
        #endregion
        #region StartTaskCommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.StartTaskCommandLine"/>.</em></p><p>Required. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetStartTaskCommandLine(this AzureBatchPoolSetSettings toolSettings, string startTaskCommandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskCommandLine = startTaskCommandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.StartTaskCommandLine"/>.</em></p><p>Required. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetStartTaskCommandLine(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskCommandLine = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskEnvironmentSettings
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.StartTaskEnvironmentSettings"/> to a new dictionary.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetStartTaskEnvironmentSettings(this AzureBatchPoolSetSettings toolSettings, IDictionary<string, object> startTaskEnvironmentSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal = startTaskEnvironmentSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchPoolSetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ClearStartTaskEnvironmentSettings(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchPoolSetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings AddStartTaskEnvironmentSetting(this AzureBatchPoolSetSettings toolSettings, string startTaskEnvironmentSettingKey, object startTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal.Add(startTaskEnvironmentSettingKey, startTaskEnvironmentSettingValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchPoolSetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings RemoveStartTaskEnvironmentSetting(this AzureBatchPoolSetSettings toolSettings, string startTaskEnvironmentSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal.Remove(startTaskEnvironmentSettingKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchPoolSetSettings.StartTaskEnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the start task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetStartTaskEnvironmentSetting(this AzureBatchPoolSetSettings toolSettings, string startTaskEnvironmentSettingKey, object startTaskEnvironmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskEnvironmentSettingsInternal[startTaskEnvironmentSettingKey] = startTaskEnvironmentSettingValue;
            return toolSettings;
        }
        #endregion
        #region StartTaskMaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.StartTaskMaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetStartTaskMaxTaskRetryCount(this AzureBatchPoolSetSettings toolSettings, int? startTaskMaxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskMaxTaskRetryCount = startTaskMaxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.StartTaskMaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetStartTaskMaxTaskRetryCount(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskMaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.StartTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the task's working directory. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetStartTaskResourceFiles(this AzureBatchPoolSetSettings toolSettings, string startTaskResourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskResourceFiles = startTaskResourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.StartTaskResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the task's working directory. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetStartTaskResourceFiles(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region StartTaskWaitForSuccess
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.StartTaskWaitForSuccess"/>.</em></p><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. Specify either 'true' or 'false' to update the property.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetStartTaskWaitForSuccess(this AzureBatchPoolSetSettings toolSettings, string startTaskWaitForSuccess)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskWaitForSuccess = startTaskWaitForSuccess;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.StartTaskWaitForSuccess"/>.</em></p><p>Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. Specify either 'true' or 'false' to update the property.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetStartTaskWaitForSuccess(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTaskWaitForSuccess = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetIfMatch(this AzureBatchPoolSetSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetIfMatch(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetIfModifiedSince(this AzureBatchPoolSetSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetIfModifiedSince(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetIfNoneMatch(this AzureBatchPoolSetSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetIfNoneMatch(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetIfUnmodifiedSince(this AzureBatchPoolSetSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetIfUnmodifiedSince(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetDebug(this AzureBatchPoolSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetDebug(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetHelp(this AzureBatchPoolSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetHelp(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetOutput(this AzureBatchPoolSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetOutput(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetQuery(this AzureBatchPoolSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetQuery(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings SetVerbose(this AzureBatchPoolSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolSetSettings ResetVerbose(this AzureBatchPoolSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolShowSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.PoolId"/>.</em></p><p>The ID of the pool to get.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetPoolId(this AzureBatchPoolShowSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.PoolId"/>.</em></p><p>The ID of the pool to get.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetPoolId(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetAccountEndpoint(this AzureBatchPoolShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetAccountEndpoint(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetAccountKey(this AzureBatchPoolShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetAccountKey(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetAccountName(this AzureBatchPoolShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetAccountName(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetExpand(this AzureBatchPoolShowSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetExpand(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetIfMatch(this AzureBatchPoolShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetIfMatch(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetIfModifiedSince(this AzureBatchPoolShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetIfModifiedSince(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetIfNoneMatch(this AzureBatchPoolShowSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetIfNoneMatch(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetIfUnmodifiedSince(this AzureBatchPoolShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetIfUnmodifiedSince(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetSelect(this AzureBatchPoolShowSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetSelect(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetDebug(this AzureBatchPoolShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetDebug(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetHelp(this AzureBatchPoolShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetHelp(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetOutput(this AzureBatchPoolShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetOutput(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetQuery(this AzureBatchPoolShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetQuery(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings SetVerbose(this AzureBatchPoolShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolShowSettings ResetVerbose(this AzureBatchPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskCreateSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetJobId(this AzureBatchTaskCreateSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetJobId(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region AffinityId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.AffinityId"/>.</em></p><p>Required. An opaque string representing the location of a compute node or a task that has run previously. You can pass the affinityId of a compute node to indicate that this task needs to run on that compute node. Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetAffinityId(this AzureBatchTaskCreateSettings toolSettings, string affinityId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AffinityId = affinityId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.AffinityId"/>.</em></p><p>Required. An opaque string representing the location of a compute node or a task that has run previously. You can pass the affinityId of a compute node to indicate that this task needs to run on that compute node. Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetAffinityId(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AffinityId = null;
            return toolSettings;
        }
        #endregion
        #region ApplicationPackageReferences
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.ApplicationPackageReferences"/>.</em></p><p>The space-separated list of IDs specifying the application packages to be installed. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetApplicationPackageReferences(this AzureBatchTaskCreateSettings toolSettings, string applicationPackageReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = applicationPackageReferences;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.ApplicationPackageReferences"/>.</em></p><p>The space-separated list of IDs specifying the application packages to be installed. Space-separated application IDs with optional version in 'id[#version]' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetApplicationPackageReferences(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationPackageReferences = null;
            return toolSettings;
        }
        #endregion
        #region CommandLine
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.CommandLine"/>.</em></p><p>The command line of the task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetCommandLine(this AzureBatchTaskCreateSettings toolSettings, string commandLine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommandLine = commandLine;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.CommandLine"/>.</em></p><p>The command line of the task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetCommandLine(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CommandLine = null;
            return toolSettings;
        }
        #endregion
        #region EnvironmentSettings
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.EnvironmentSettings"/> to a new dictionary.</em></p><p>A list of environment variable settings for the task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetEnvironmentSettings(this AzureBatchTaskCreateSettings toolSettings, IDictionary<string, object> environmentSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvironmentSettingsInternal = environmentSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="AzureBatchTaskCreateSettings.EnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ClearEnvironmentSettings(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvironmentSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Adds a new key-value-pair <see cref="AzureBatchTaskCreateSettings.EnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings AddEnvironmentSetting(this AzureBatchTaskCreateSettings toolSettings, string environmentSettingKey, object environmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvironmentSettingsInternal.Add(environmentSettingKey, environmentSettingValue);
            return toolSettings;
        }
        /// <summary><p><em>Removes a key-value-pair from <see cref="AzureBatchTaskCreateSettings.EnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings RemoveEnvironmentSetting(this AzureBatchTaskCreateSettings toolSettings, string environmentSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvironmentSettingsInternal.Remove(environmentSettingKey);
            return toolSettings;
        }
        /// <summary><p><em>Sets a key-value-pair in <see cref="AzureBatchTaskCreateSettings.EnvironmentSettings"/>.</em></p><p>A list of environment variable settings for the task. Space-separated values in 'key=value' format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetEnvironmentSetting(this AzureBatchTaskCreateSettings toolSettings, string environmentSettingKey, object environmentSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvironmentSettingsInternal[environmentSettingKey] = environmentSettingValue;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.JsonFile"/>.</em></p><p>The file containing the task(s) to create in JSON(formatted to match REST API request body). When submitting multiple tasks, accepts either an array of tasks or a TaskAddCollectionParamater. If this parameter is specified, all other parameters are ignored.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetJsonFile(this AzureBatchTaskCreateSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.JsonFile"/>.</em></p><p>The file containing the task(s) to create in JSON(formatted to match REST API request body). When submitting multiple tasks, accepts either an array of tasks or a TaskAddCollectionParamater. If this parameter is specified, all other parameters are ignored.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetJsonFile(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region MaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.MaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetMaxTaskRetryCount(this AzureBatchTaskCreateSettings toolSettings, int? maxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxTaskRetryCount = maxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.MaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetMaxTaskRetryCount(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region MaxWallClockTime
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.MaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the task may run.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetMaxWallClockTime(this AzureBatchTaskCreateSettings toolSettings, string maxWallClockTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxWallClockTime = maxWallClockTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.MaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the task may run.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetMaxWallClockTime(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxWallClockTime = null;
            return toolSettings;
        }
        #endregion
        #region ResourceFiles
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.ResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetResourceFiles(this AzureBatchTaskCreateSettings toolSettings, string resourceFiles)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceFiles = resourceFiles;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.ResourceFiles"/>.</em></p><p>A list of files that the Batch service will download to the compute node before running the command line. Space-separated resource references in filename=blobsource format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetResourceFiles(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceFiles = null;
            return toolSettings;
        }
        #endregion
        #region RetentionTime
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.RetentionTime"/>.</em></p><p>The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents. The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetRetentionTime(this AzureBatchTaskCreateSettings toolSettings, string retentionTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionTime = retentionTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.RetentionTime"/>.</em></p><p>The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents. The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetRetentionTime(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionTime = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.TaskId"/>.</em></p><p>The ID of the task.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetTaskId(this AzureBatchTaskCreateSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.TaskId"/>.</em></p><p>The ID of the task.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetTaskId(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetAccountEndpoint(this AzureBatchTaskCreateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetAccountEndpoint(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetAccountKey(this AzureBatchTaskCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.AccountKey"/>.</em></p><p>The Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetAccountKey(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetAccountName(this AzureBatchTaskCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.AccountName"/>.</em></p><p>The Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetAccountName(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetDebug(this AzureBatchTaskCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetDebug(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetHelp(this AzureBatchTaskCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetHelp(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetOutput(this AzureBatchTaskCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetOutput(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetQuery(this AzureBatchTaskCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetQuery(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings SetVerbose(this AzureBatchTaskCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskCreateSettings ResetVerbose(this AzureBatchTaskCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskDeleteSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.JobId"/>.</em></p><p>The ID of the job from which to delete the task.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetJobId(this AzureBatchTaskDeleteSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.JobId"/>.</em></p><p>The ID of the job from which to delete the task.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetJobId(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.TaskId"/>.</em></p><p>The ID of the task to delete.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetTaskId(this AzureBatchTaskDeleteSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.TaskId"/>.</em></p><p>The ID of the task to delete.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetTaskId(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetYes(this AzureBatchTaskDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetYes(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetAccountEndpoint(this AzureBatchTaskDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetAccountEndpoint(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetAccountKey(this AzureBatchTaskDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetAccountKey(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetAccountName(this AzureBatchTaskDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetAccountName(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetIfMatch(this AzureBatchTaskDeleteSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetIfMatch(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetIfModifiedSince(this AzureBatchTaskDeleteSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetIfModifiedSince(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetIfNoneMatch(this AzureBatchTaskDeleteSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetIfNoneMatch(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetIfUnmodifiedSince(this AzureBatchTaskDeleteSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetIfUnmodifiedSince(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetDebug(this AzureBatchTaskDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetDebug(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetHelp(this AzureBatchTaskDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetHelp(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetOutput(this AzureBatchTaskDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetOutput(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetQuery(this AzureBatchTaskDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetQuery(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings SetVerbose(this AzureBatchTaskDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskDeleteSettings ResetVerbose(this AzureBatchTaskDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskListSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetJobId(this AzureBatchTaskListSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetJobId(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetAccountEndpoint(this AzureBatchTaskListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetAccountEndpoint(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetAccountKey(this AzureBatchTaskListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetAccountKey(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetAccountName(this AzureBatchTaskListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetAccountName(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetExpand(this AzureBatchTaskListSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetExpand(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks</a>.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetFilter(this AzureBatchTaskListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks</a>.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetFilter(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetSelect(this AzureBatchTaskListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetSelect(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetDebug(this AzureBatchTaskListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetDebug(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetHelp(this AzureBatchTaskListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetHelp(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetOutput(this AzureBatchTaskListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetOutput(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetQuery(this AzureBatchTaskListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetQuery(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings SetVerbose(this AzureBatchTaskListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskListSettings ResetVerbose(this AzureBatchTaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskReactivateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskReactivateSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetJobId(this AzureBatchTaskReactivateSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetJobId(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.TaskId"/>.</em></p><p>The ID of the task to reactivate.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetTaskId(this AzureBatchTaskReactivateSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.TaskId"/>.</em></p><p>The ID of the task to reactivate.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetTaskId(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetAccountEndpoint(this AzureBatchTaskReactivateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetAccountEndpoint(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetAccountKey(this AzureBatchTaskReactivateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetAccountKey(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetAccountName(this AzureBatchTaskReactivateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetAccountName(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetIfMatch(this AzureBatchTaskReactivateSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetIfMatch(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetIfModifiedSince(this AzureBatchTaskReactivateSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetIfModifiedSince(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetIfNoneMatch(this AzureBatchTaskReactivateSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetIfNoneMatch(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetIfUnmodifiedSince(this AzureBatchTaskReactivateSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetIfUnmodifiedSince(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetDebug(this AzureBatchTaskReactivateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetDebug(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetHelp(this AzureBatchTaskReactivateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetHelp(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetOutput(this AzureBatchTaskReactivateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetOutput(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetQuery(this AzureBatchTaskReactivateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetQuery(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskReactivateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings SetVerbose(this AzureBatchTaskReactivateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskReactivateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskReactivateSettings ResetVerbose(this AzureBatchTaskReactivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskResetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskResetSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetJobId(this AzureBatchTaskResetSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetJobId(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.TaskId"/>.</em></p><p>The ID of the task to update.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetTaskId(this AzureBatchTaskResetSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.TaskId"/>.</em></p><p>The ID of the task to update.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetTaskId(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.JsonFile"/>.</em></p><p>A file containing the constraints specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Constraints Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetJsonFile(this AzureBatchTaskResetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.JsonFile"/>.</em></p><p>A file containing the constraints specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Constraints Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetJsonFile(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetAccountEndpoint(this AzureBatchTaskResetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetAccountEndpoint(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetAccountKey(this AzureBatchTaskResetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetAccountKey(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetAccountName(this AzureBatchTaskResetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetAccountName(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region MaxTaskRetryCount
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.MaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetMaxTaskRetryCount(this AzureBatchTaskResetSettings toolSettings, int? maxTaskRetryCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxTaskRetryCount = maxTaskRetryCount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.MaxTaskRetryCount"/>.</em></p><p>The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetMaxTaskRetryCount(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxTaskRetryCount = null;
            return toolSettings;
        }
        #endregion
        #region MaxWallClockTime
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.MaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the task may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetMaxWallClockTime(this AzureBatchTaskResetSettings toolSettings, string maxWallClockTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxWallClockTime = maxWallClockTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.MaxWallClockTime"/>.</em></p><p>The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the task may run. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetMaxWallClockTime(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxWallClockTime = null;
            return toolSettings;
        }
        #endregion
        #region RetentionTime
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.RetentionTime"/>.</em></p><p>The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents. The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetRetentionTime(this AzureBatchTaskResetSettings toolSettings, string retentionTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionTime = retentionTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.RetentionTime"/>.</em></p><p>The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents. The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged. Expected format is an ISO-8601 duration.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetRetentionTime(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionTime = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetIfMatch(this AzureBatchTaskResetSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetIfMatch(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetIfModifiedSince(this AzureBatchTaskResetSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetIfModifiedSince(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetIfNoneMatch(this AzureBatchTaskResetSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetIfNoneMatch(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetIfUnmodifiedSince(this AzureBatchTaskResetSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetIfUnmodifiedSince(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetDebug(this AzureBatchTaskResetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetDebug(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetHelp(this AzureBatchTaskResetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetHelp(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetOutput(this AzureBatchTaskResetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetOutput(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetQuery(this AzureBatchTaskResetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetQuery(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings SetVerbose(this AzureBatchTaskResetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskResetSettings ResetVerbose(this AzureBatchTaskResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskShowSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetJobId(this AzureBatchTaskShowSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetJobId(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.TaskId"/>.</em></p><p>The ID of the task to get information about.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetTaskId(this AzureBatchTaskShowSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.TaskId"/>.</em></p><p>The ID of the task to get information about.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetTaskId(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetAccountEndpoint(this AzureBatchTaskShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetAccountEndpoint(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetAccountKey(this AzureBatchTaskShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetAccountKey(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetAccountName(this AzureBatchTaskShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetAccountName(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Expand
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetExpand(this AzureBatchTaskShowSettings toolSettings, string expand)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = expand;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Expand"/>.</em></p><p>An OData $expand clause.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetExpand(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expand = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetIfMatch(this AzureBatchTaskShowSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetIfMatch(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetIfModifiedSince(this AzureBatchTaskShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetIfModifiedSince(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetIfNoneMatch(this AzureBatchTaskShowSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetIfNoneMatch(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetIfUnmodifiedSince(this AzureBatchTaskShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetIfUnmodifiedSince(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetSelect(this AzureBatchTaskShowSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetSelect(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetDebug(this AzureBatchTaskShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetDebug(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetHelp(this AzureBatchTaskShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetHelp(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetOutput(this AzureBatchTaskShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetOutput(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetQuery(this AzureBatchTaskShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetQuery(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings SetVerbose(this AzureBatchTaskShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskShowSettings ResetVerbose(this AzureBatchTaskShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskStopSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskStopSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetJobId(this AzureBatchTaskStopSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.JobId"/>.</em></p><p>The ID of the job containing the task.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetJobId(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.TaskId"/>.</em></p><p>The ID of the task to terminate.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetTaskId(this AzureBatchTaskStopSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.TaskId"/>.</em></p><p>The ID of the task to terminate.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetTaskId(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetAccountEndpoint(this AzureBatchTaskStopSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetAccountEndpoint(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetAccountKey(this AzureBatchTaskStopSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetAccountKey(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetAccountName(this AzureBatchTaskStopSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetAccountName(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetIfMatch(this AzureBatchTaskStopSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetIfMatch(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetIfModifiedSince(this AzureBatchTaskStopSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetIfModifiedSince(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetIfNoneMatch(this AzureBatchTaskStopSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetIfNoneMatch(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetIfUnmodifiedSince(this AzureBatchTaskStopSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetIfUnmodifiedSince(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetDebug(this AzureBatchTaskStopSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetDebug(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetHelp(this AzureBatchTaskStopSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetHelp(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetOutput(this AzureBatchTaskStopSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetOutput(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetQuery(this AzureBatchTaskStopSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetQuery(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskStopSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings SetVerbose(this AzureBatchTaskStopSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskStopSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskStopSettings ResetVerbose(this AzureBatchTaskStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountAutostorageKeysSyncSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountAutostorageKeysSyncSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetName(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetName(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetResourceGroup(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetResourceGroup(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetDebug(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetDebug(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetHelp(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetHelp(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetOutput(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetOutput(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetQuery(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetQuery(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings SetVerbose(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountAutostorageKeysSyncSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountAutostorageKeysSyncSettings ResetVerbose(this AzureBatchAccountAutostorageKeysSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountKeysListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountKeysListSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetName(this AzureBatchAccountKeysListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetName(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetResourceGroup(this AzureBatchAccountKeysListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetResourceGroup(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetDebug(this AzureBatchAccountKeysListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetDebug(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetHelp(this AzureBatchAccountKeysListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetHelp(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetOutput(this AzureBatchAccountKeysListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetOutput(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetQuery(this AzureBatchAccountKeysListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetQuery(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings SetVerbose(this AzureBatchAccountKeysListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysListSettings ResetVerbose(this AzureBatchAccountKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchAccountKeysRenewSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchAccountKeysRenewSettingsExtensions
    {
        #region KeyName
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.KeyName"/>.</em></p><p>The type of account key to regenerate.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetKeyName(this AzureBatchAccountKeysRenewSettings toolSettings, BatchAccountKeysRenewKeyName keyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyName = keyName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.KeyName"/>.</em></p><p>The type of account key to regenerate.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetKeyName(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetName(this AzureBatchAccountKeysRenewSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetName(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetResourceGroup(this AzureBatchAccountKeysRenewSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetResourceGroup(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetDebug(this AzureBatchAccountKeysRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetDebug(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetHelp(this AzureBatchAccountKeysRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetHelp(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetOutput(this AzureBatchAccountKeysRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetOutput(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetQuery(this AzureBatchAccountKeysRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetQuery(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchAccountKeysRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings SetVerbose(this AzureBatchAccountKeysRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchAccountKeysRenewSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchAccountKeysRenewSettings ResetVerbose(this AzureBatchAccountKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationPackageActivateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationPackageActivateSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetApplicationId(this AzureBatchApplicationPackageActivateSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetApplicationId(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Format"/>.</em></p><p>The format of the application package binary file.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetFormat(this AzureBatchApplicationPackageActivateSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Format"/>.</em></p><p>The format of the application package binary file.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetFormat(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetName(this AzureBatchApplicationPackageActivateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetName(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetResourceGroup(this AzureBatchApplicationPackageActivateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetResourceGroup(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Version"/>.</em></p><p>The version of the application to activate.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetVersion(this AzureBatchApplicationPackageActivateSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Version"/>.</em></p><p>The version of the application to activate.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetVersion(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetDebug(this AzureBatchApplicationPackageActivateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetDebug(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetHelp(this AzureBatchApplicationPackageActivateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetHelp(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetOutput(this AzureBatchApplicationPackageActivateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetOutput(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetQuery(this AzureBatchApplicationPackageActivateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetQuery(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageActivateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings SetVerbose(this AzureBatchApplicationPackageActivateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageActivateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageActivateSettings ResetVerbose(this AzureBatchApplicationPackageActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationPackageCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationPackageCreateSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetApplicationId(this AzureBatchApplicationPackageCreateSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetApplicationId(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetName(this AzureBatchApplicationPackageCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetName(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region PackageFile
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.PackageFile"/>.</em></p><p>The path of the application package in zip format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetPackageFile(this AzureBatchApplicationPackageCreateSettings toolSettings, string packageFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PackageFile = packageFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.PackageFile"/>.</em></p><p>The path of the application package in zip format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetPackageFile(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PackageFile = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetResourceGroup(this AzureBatchApplicationPackageCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetResourceGroup(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Version"/>.</em></p><p>The version of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetVersion(this AzureBatchApplicationPackageCreateSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Version"/>.</em></p><p>The version of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetVersion(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetDebug(this AzureBatchApplicationPackageCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetDebug(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetHelp(this AzureBatchApplicationPackageCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetHelp(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetOutput(this AzureBatchApplicationPackageCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetOutput(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetQuery(this AzureBatchApplicationPackageCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetQuery(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings SetVerbose(this AzureBatchApplicationPackageCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageCreateSettings ResetVerbose(this AzureBatchApplicationPackageCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationPackageDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationPackageDeleteSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetApplicationId(this AzureBatchApplicationPackageDeleteSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetApplicationId(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetName(this AzureBatchApplicationPackageDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetName(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetResourceGroup(this AzureBatchApplicationPackageDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetResourceGroup(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Version"/>.</em></p><p>The version of the application to delete.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetVersion(this AzureBatchApplicationPackageDeleteSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Version"/>.</em></p><p>The version of the application to delete.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetVersion(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetYes(this AzureBatchApplicationPackageDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetYes(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetDebug(this AzureBatchApplicationPackageDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetDebug(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetHelp(this AzureBatchApplicationPackageDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetHelp(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetOutput(this AzureBatchApplicationPackageDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetOutput(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetQuery(this AzureBatchApplicationPackageDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetQuery(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings SetVerbose(this AzureBatchApplicationPackageDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageDeleteSettings ResetVerbose(this AzureBatchApplicationPackageDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationPackageShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationPackageShowSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetApplicationId(this AzureBatchApplicationPackageShowSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetApplicationId(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetName(this AzureBatchApplicationPackageShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Name"/>.</em></p><p>Name of the Batch account.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetName(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetResourceGroup(this AzureBatchApplicationPackageShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.ResourceGroup"/>.</em></p><p>Name of the resource group.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetResourceGroup(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Version"/>.</em></p><p>The version of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetVersion(this AzureBatchApplicationPackageShowSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Version"/>.</em></p><p>The version of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetVersion(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetDebug(this AzureBatchApplicationPackageShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetDebug(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetHelp(this AzureBatchApplicationPackageShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetHelp(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetOutput(this AzureBatchApplicationPackageShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetOutput(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetQuery(this AzureBatchApplicationPackageShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetQuery(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationPackageShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings SetVerbose(this AzureBatchApplicationPackageShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationPackageShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationPackageShowSettings ResetVerbose(this AzureBatchApplicationPackageShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationSummaryListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationSummaryListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetAccountEndpoint(this AzureBatchApplicationSummaryListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetAccountEndpoint(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetAccountKey(this AzureBatchApplicationSummaryListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetAccountKey(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetAccountName(this AzureBatchApplicationSummaryListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetAccountName(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetDebug(this AzureBatchApplicationSummaryListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetDebug(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetHelp(this AzureBatchApplicationSummaryListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetHelp(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetOutput(this AzureBatchApplicationSummaryListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetOutput(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetQuery(this AzureBatchApplicationSummaryListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetQuery(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings SetVerbose(this AzureBatchApplicationSummaryListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryListSettings ResetVerbose(this AzureBatchApplicationSummaryListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchApplicationSummaryShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchApplicationSummaryShowSettingsExtensions
    {
        #region ApplicationId
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetApplicationId(this AzureBatchApplicationSummaryShowSettings toolSettings, string applicationId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = applicationId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.ApplicationId"/>.</em></p><p>The ID of the application.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetApplicationId(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApplicationId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetAccountEndpoint(this AzureBatchApplicationSummaryShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetAccountEndpoint(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetAccountKey(this AzureBatchApplicationSummaryShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetAccountKey(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetAccountName(this AzureBatchApplicationSummaryShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetAccountName(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetDebug(this AzureBatchApplicationSummaryShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetDebug(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetHelp(this AzureBatchApplicationSummaryShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetHelp(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetOutput(this AzureBatchApplicationSummaryShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetOutput(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetQuery(this AzureBatchApplicationSummaryShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetQuery(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchApplicationSummaryShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings SetVerbose(this AzureBatchApplicationSummaryShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchApplicationSummaryShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchApplicationSummaryShowSettings ResetVerbose(this AzureBatchApplicationSummaryShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobAllStatisticsShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobAllStatisticsShowSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetAccountEndpoint(this AzureBatchJobAllStatisticsShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetAccountEndpoint(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetAccountKey(this AzureBatchJobAllStatisticsShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetAccountKey(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetAccountName(this AzureBatchJobAllStatisticsShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetAccountName(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetDebug(this AzureBatchJobAllStatisticsShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetDebug(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetHelp(this AzureBatchJobAllStatisticsShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetHelp(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetOutput(this AzureBatchJobAllStatisticsShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetOutput(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetQuery(this AzureBatchJobAllStatisticsShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetQuery(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobAllStatisticsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings SetVerbose(this AzureBatchJobAllStatisticsShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobAllStatisticsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobAllStatisticsShowSettings ResetVerbose(this AzureBatchJobAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobPrepReleaseStatusListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobPrepReleaseStatusListSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetJobId(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetJobId(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetAccountEndpoint(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetAccountEndpoint(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetAccountKey(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetAccountKey(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetAccountName(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetAccountName(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status</a>.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetFilter(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status</a>.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetFilter(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetSelect(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetSelect(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetDebug(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetDebug(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetHelp(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetHelp(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetOutput(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetOutput(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetQuery(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetQuery(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings SetVerbose(this AzureBatchJobPrepReleaseStatusListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobPrepReleaseStatusListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobPrepReleaseStatusListSettings ResetVerbose(this AzureBatchJobPrepReleaseStatusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchJobTaskCountsShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchJobTaskCountsShowSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetJobId(this AzureBatchJobTaskCountsShowSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetJobId(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetAccountEndpoint(this AzureBatchJobTaskCountsShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetAccountEndpoint(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetAccountKey(this AzureBatchJobTaskCountsShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetAccountKey(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetAccountName(this AzureBatchJobTaskCountsShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetAccountName(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetDebug(this AzureBatchJobTaskCountsShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetDebug(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetHelp(this AzureBatchJobTaskCountsShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetHelp(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetOutput(this AzureBatchJobTaskCountsShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetOutput(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetQuery(this AzureBatchJobTaskCountsShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetQuery(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchJobTaskCountsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings SetVerbose(this AzureBatchJobTaskCountsShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchJobTaskCountsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchJobTaskCountsShowSettings ResetVerbose(this AzureBatchJobTaskCountsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchLocationQuotasShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchLocationQuotasShowSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureBatchLocationQuotasShowSettings.Location"/>.</em></p><p>The region from which to display the Batch service quotas.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings SetLocation(this AzureBatchLocationQuotasShowSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationQuotasShowSettings.Location"/>.</em></p><p>The region from which to display the Batch service quotas.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings ResetLocation(this AzureBatchLocationQuotasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchLocationQuotasShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings SetDebug(this AzureBatchLocationQuotasShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationQuotasShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings ResetDebug(this AzureBatchLocationQuotasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchLocationQuotasShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings SetHelp(this AzureBatchLocationQuotasShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationQuotasShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings ResetHelp(this AzureBatchLocationQuotasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchLocationQuotasShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings SetOutput(this AzureBatchLocationQuotasShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationQuotasShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings ResetOutput(this AzureBatchLocationQuotasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchLocationQuotasShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings SetQuery(this AzureBatchLocationQuotasShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationQuotasShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings ResetQuery(this AzureBatchLocationQuotasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchLocationQuotasShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings SetVerbose(this AzureBatchLocationQuotasShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchLocationQuotasShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchLocationQuotasShowSettings ResetVerbose(this AzureBatchLocationQuotasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeFileDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeFileDeleteSettingsExtensions
    {
        #region FilePath
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.FilePath"/>.</em></p><p>The path to the file or directory that you want to delete.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetFilePath(this AzureBatchNodeFileDeleteSettings toolSettings, string filePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = filePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.FilePath"/>.</em></p><p>The path to the file or directory that you want to delete.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetFilePath(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = null;
            return toolSettings;
        }
        #endregion
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.NodeId"/>.</em></p><p>The ID of the compute node from which you want to delete the file.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetNodeId(this AzureBatchNodeFileDeleteSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.NodeId"/>.</em></p><p>The ID of the compute node from which you want to delete the file.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetNodeId(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetPoolId(this AzureBatchNodeFileDeleteSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetPoolId(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region Recursive
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Recursive"/>.</em></p><p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetRecursive(this AzureBatchNodeFileDeleteSettings toolSettings, string recursive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = recursive;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Recursive"/>.</em></p><p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetRecursive(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetYes(this AzureBatchNodeFileDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetYes(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetAccountEndpoint(this AzureBatchNodeFileDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetAccountEndpoint(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetAccountKey(this AzureBatchNodeFileDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetAccountKey(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetAccountName(this AzureBatchNodeFileDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetAccountName(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetDebug(this AzureBatchNodeFileDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetDebug(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetHelp(this AzureBatchNodeFileDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetHelp(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetOutput(this AzureBatchNodeFileDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetOutput(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetQuery(this AzureBatchNodeFileDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetQuery(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings SetVerbose(this AzureBatchNodeFileDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDeleteSettings ResetVerbose(this AzureBatchNodeFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeFileDownloadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeFileDownloadSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.Destination"/>.</em></p><p>The path to the destination file or directory.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetDestination(this AzureBatchNodeFileDownloadSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.Destination"/>.</em></p><p>The path to the destination file or directory.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetDestination(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region FilePath
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.FilePath"/>.</em></p><p>The path to the compute node file that you want to get the content of.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetFilePath(this AzureBatchNodeFileDownloadSettings toolSettings, string filePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = filePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.FilePath"/>.</em></p><p>The path to the compute node file that you want to get the content of.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetFilePath(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = null;
            return toolSettings;
        }
        #endregion
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.NodeId"/>.</em></p><p>The ID of the compute node that contains the file.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetNodeId(this AzureBatchNodeFileDownloadSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.NodeId"/>.</em></p><p>The ID of the compute node that contains the file.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetNodeId(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetPoolId(this AzureBatchNodeFileDownloadSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetPoolId(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetAccountEndpoint(this AzureBatchNodeFileDownloadSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetAccountEndpoint(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetAccountKey(this AzureBatchNodeFileDownloadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetAccountKey(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetAccountName(this AzureBatchNodeFileDownloadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetAccountName(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region EndRange
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.EndRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved to the end.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetEndRange(this AzureBatchNodeFileDownloadSettings toolSettings, string endRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = endRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.EndRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved to the end.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetEndRange(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetIfModifiedSince(this AzureBatchNodeFileDownloadSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetIfModifiedSince(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetIfUnmodifiedSince(this AzureBatchNodeFileDownloadSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetIfUnmodifiedSince(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region StartRange
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.StartRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved from the beginning.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetStartRange(this AzureBatchNodeFileDownloadSettings toolSettings, string startRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = startRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.StartRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved from the beginning.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetStartRange(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetDebug(this AzureBatchNodeFileDownloadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetDebug(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetHelp(this AzureBatchNodeFileDownloadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetHelp(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetOutput(this AzureBatchNodeFileDownloadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetOutput(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetQuery(this AzureBatchNodeFileDownloadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetQuery(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings SetVerbose(this AzureBatchNodeFileDownloadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileDownloadSettings ResetVerbose(this AzureBatchNodeFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeFileListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeFileListSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.NodeId"/>.</em></p><p>The ID of the compute node whose files you want to list.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetNodeId(this AzureBatchNodeFileListSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.NodeId"/>.</em></p><p>The ID of the compute node whose files you want to list.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetNodeId(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetPoolId(this AzureBatchNodeFileListSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetPoolId(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region Recursive
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Recursive"/>.</em></p><p>Whether to list children of a directory.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetRecursive(this AzureBatchNodeFileListSettings toolSettings, string recursive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = recursive;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Recursive"/>.</em></p><p>Whether to list children of a directory.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetRecursive(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetAccountEndpoint(this AzureBatchNodeFileListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetAccountEndpoint(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetAccountKey(this AzureBatchNodeFileListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetAccountKey(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetAccountName(this AzureBatchNodeFileListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetAccountName(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files</a>.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetFilter(this AzureBatchNodeFileListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files</a>.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetFilter(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetDebug(this AzureBatchNodeFileListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetDebug(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetHelp(this AzureBatchNodeFileListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetHelp(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetOutput(this AzureBatchNodeFileListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetOutput(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetQuery(this AzureBatchNodeFileListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetQuery(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings SetVerbose(this AzureBatchNodeFileListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileListSettings ResetVerbose(this AzureBatchNodeFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeFileShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeFileShowSettingsExtensions
    {
        #region FilePath
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.FilePath"/>.</em></p><p>The path to the compute node file that you want to get the properties of.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetFilePath(this AzureBatchNodeFileShowSettings toolSettings, string filePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = filePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.FilePath"/>.</em></p><p>The path to the compute node file that you want to get the properties of.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetFilePath(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = null;
            return toolSettings;
        }
        #endregion
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.NodeId"/>.</em></p><p>The ID of the compute node that contains the file.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetNodeId(this AzureBatchNodeFileShowSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.NodeId"/>.</em></p><p>The ID of the compute node that contains the file.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetNodeId(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetPoolId(this AzureBatchNodeFileShowSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetPoolId(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetAccountEndpoint(this AzureBatchNodeFileShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetAccountEndpoint(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetAccountKey(this AzureBatchNodeFileShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetAccountKey(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetAccountName(this AzureBatchNodeFileShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetAccountName(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetIfModifiedSince(this AzureBatchNodeFileShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetIfModifiedSince(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetIfUnmodifiedSince(this AzureBatchNodeFileShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetIfUnmodifiedSince(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetDebug(this AzureBatchNodeFileShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetDebug(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetHelp(this AzureBatchNodeFileShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetHelp(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetOutput(this AzureBatchNodeFileShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetOutput(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetQuery(this AzureBatchNodeFileShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetQuery(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeFileShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings SetVerbose(this AzureBatchNodeFileShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeFileShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeFileShowSettings ResetVerbose(this AzureBatchNodeFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeRemoteDesktopDownloadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeRemoteDesktopDownloadSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Destination"/>.</em></p><p>The path to the destination file or directory.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetDestination(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Destination"/>.</em></p><p>The path to the destination file or directory.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetDestination(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.NodeId"/>.</em></p><p>The ID of the compute node for which you want to get the Remote Desktop Protocol file.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetNodeId(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.NodeId"/>.</em></p><p>The ID of the compute node for which you want to get the Remote Desktop Protocol file.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetNodeId(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetPoolId(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetPoolId(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetAccountEndpoint(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetAccountEndpoint(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetAccountKey(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetAccountKey(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetAccountName(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetAccountName(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetDebug(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetDebug(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetHelp(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetHelp(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetOutput(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetOutput(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetQuery(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetQuery(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings SetVerbose(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteDesktopDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteDesktopDownloadSettings ResetVerbose(this AzureBatchNodeRemoteDesktopDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeRemoteLoginSettingsShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeRemoteLoginSettingsShowSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.NodeId"/>.</em></p><p>The ID of the compute node for which to obtain the remote login settings.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetNodeId(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.NodeId"/>.</em></p><p>The ID of the compute node for which to obtain the remote login settings.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetNodeId(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetPoolId(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetPoolId(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetAccountEndpoint(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetAccountEndpoint(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetAccountKey(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetAccountKey(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetAccountName(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetAccountName(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetDebug(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetDebug(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetHelp(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetHelp(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetOutput(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetOutput(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetQuery(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetQuery(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings SetVerbose(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeRemoteLoginSettingsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeRemoteLoginSettingsShowSettings ResetVerbose(this AzureBatchNodeRemoteLoginSettingsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeSchedulingDisableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeSchedulingDisableSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.NodeId"/>.</em></p><p>The ID of the compute node on which you want to disable task scheduling.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetNodeId(this AzureBatchNodeSchedulingDisableSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.NodeId"/>.</em></p><p>The ID of the compute node on which you want to disable task scheduling.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetNodeId(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetPoolId(this AzureBatchNodeSchedulingDisableSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetPoolId(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region NodeDisableSchedulingOption
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.NodeDisableSchedulingOption"/>.</em></p><p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetNodeDisableSchedulingOption(this AzureBatchNodeSchedulingDisableSettings toolSettings, BatchNodeSchedulingDisableNodeDisableSchedulingOption nodeDisableSchedulingOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeDisableSchedulingOption = nodeDisableSchedulingOption;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.NodeDisableSchedulingOption"/>.</em></p><p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetNodeDisableSchedulingOption(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeDisableSchedulingOption = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetAccountEndpoint(this AzureBatchNodeSchedulingDisableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetAccountEndpoint(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetAccountKey(this AzureBatchNodeSchedulingDisableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetAccountKey(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetAccountName(this AzureBatchNodeSchedulingDisableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetAccountName(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetDebug(this AzureBatchNodeSchedulingDisableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetDebug(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetHelp(this AzureBatchNodeSchedulingDisableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetHelp(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetOutput(this AzureBatchNodeSchedulingDisableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetOutput(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetQuery(this AzureBatchNodeSchedulingDisableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetQuery(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings SetVerbose(this AzureBatchNodeSchedulingDisableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingDisableSettings ResetVerbose(this AzureBatchNodeSchedulingDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeSchedulingEnableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeSchedulingEnableSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.NodeId"/>.</em></p><p>The ID of the compute node on which you want to enable task scheduling.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetNodeId(this AzureBatchNodeSchedulingEnableSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.NodeId"/>.</em></p><p>The ID of the compute node on which you want to enable task scheduling.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetNodeId(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetPoolId(this AzureBatchNodeSchedulingEnableSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetPoolId(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetAccountEndpoint(this AzureBatchNodeSchedulingEnableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetAccountEndpoint(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetAccountKey(this AzureBatchNodeSchedulingEnableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetAccountKey(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetAccountName(this AzureBatchNodeSchedulingEnableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetAccountName(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetDebug(this AzureBatchNodeSchedulingEnableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetDebug(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetHelp(this AzureBatchNodeSchedulingEnableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetHelp(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetOutput(this AzureBatchNodeSchedulingEnableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetOutput(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetQuery(this AzureBatchNodeSchedulingEnableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetQuery(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeSchedulingEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings SetVerbose(this AzureBatchNodeSchedulingEnableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeSchedulingEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeSchedulingEnableSettings ResetVerbose(this AzureBatchNodeSchedulingEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeServiceLogsUploadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeServiceLogsUploadSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.NodeId"/>.</em></p><p>The ID of the compute node from which you want to upload the Azure Batch service log files.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetNodeId(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.NodeId"/>.</em></p><p>The ID of the compute node from which you want to upload the Azure Batch service log files.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetNodeId(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetPoolId(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetPoolId(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.JsonFile"/>.</em></p><p>A file containing the upload batch service logs configuration specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Upload Batch Service Logs Configuration Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetJsonFile(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.JsonFile"/>.</em></p><p>A file containing the upload batch service logs configuration specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Upload Batch Service Logs Configuration Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetJsonFile(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetAccountEndpoint(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetAccountEndpoint(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetAccountKey(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetAccountKey(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetAccountName(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetAccountName(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ContainerUrl
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.ContainerUrl"/>.</em></p><p>Required. The URL of the container within Azure Blob Storage to which to upload the Batch Service log file(s). The URL must include a Shared Access Signature (SAS) granting write permissions to the container. The SAS duration must allow enough time for the upload to finish. The start time for SAS is optional and recommended to not be specified.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetContainerUrl(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string containerUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerUrl = containerUrl;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.ContainerUrl"/>.</em></p><p>Required. The URL of the container within Azure Blob Storage to which to upload the Batch Service log file(s). The URL must include a Shared Access Signature (SAS) granting write permissions to the container. The SAS duration must allow enough time for the upload to finish. The start time for SAS is optional and recommended to not be specified.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetContainerUrl(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerUrl = null;
            return toolSettings;
        }
        #endregion
        #region EndTime
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.EndTime"/>.</em></p><p>The end of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetEndTime(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string endTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTime = endTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.EndTime"/>.</em></p><p>The end of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetEndTime(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTime = null;
            return toolSettings;
        }
        #endregion
        #region StartTime
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.StartTime"/>.</em></p><p>Required. The start of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetStartTime(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string startTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTime = startTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.StartTime"/>.</em></p><p>Required. The start of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetStartTime(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTime = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetDebug(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetDebug(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetHelp(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetHelp(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetOutput(this AzureBatchNodeServiceLogsUploadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetOutput(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetQuery(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetQuery(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeServiceLogsUploadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings SetVerbose(this AzureBatchNodeServiceLogsUploadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeServiceLogsUploadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeServiceLogsUploadSettings ResetVerbose(this AzureBatchNodeServiceLogsUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeUserCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeUserCreateSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.NodeId"/>.</em></p><p>The ID of the machine on which you want to create a user account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetNodeId(this AzureBatchNodeUserCreateSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.NodeId"/>.</em></p><p>The ID of the machine on which you want to create a user account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetNodeId(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetPoolId(this AzureBatchNodeUserCreateSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetPoolId(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.JsonFile"/>.</em></p><p>A file containing the user specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'User Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetJsonFile(this AzureBatchNodeUserCreateSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.JsonFile"/>.</em></p><p>A file containing the user specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'User Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetJsonFile(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetAccountEndpoint(this AzureBatchNodeUserCreateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetAccountEndpoint(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetAccountKey(this AzureBatchNodeUserCreateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetAccountKey(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetAccountName(this AzureBatchNodeUserCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetAccountName(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ExpiryTime
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.ExpiryTime"/>.</em></p><p>The time at which the account should expire. If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetExpiryTime(this AzureBatchNodeUserCreateSettings toolSettings, string expiryTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpiryTime = expiryTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.ExpiryTime"/>.</em></p><p>The time at which the account should expire. If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetExpiryTime(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpiryTime = null;
            return toolSettings;
        }
        #endregion
        #region IsAdmin
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.IsAdmin"/>.</em></p><p>Whether the account should be an administrator on the compute node. The default value is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetIsAdmin(this AzureBatchNodeUserCreateSettings toolSettings, string isAdmin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsAdmin = isAdmin;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.IsAdmin"/>.</em></p><p>Whether the account should be an administrator on the compute node. The default value is false. True if flag present.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetIsAdmin(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsAdmin = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Name"/>.</em></p><p>Required. The user name of the account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetName(this AzureBatchNodeUserCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Name"/>.</em></p><p>Required. The user name of the account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetName(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Password"/>.</em></p><p>The password of the account. The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetPassword(this AzureBatchNodeUserCreateSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Password"/>.</em></p><p>The password of the account. The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetPassword(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region SshPublicKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.SshPublicKey"/>.</em></p><p>The SSH public key that can be used for remote login to the compute node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetSshPublicKey(this AzureBatchNodeUserCreateSettings toolSettings, string sshPublicKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SshPublicKey = sshPublicKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.SshPublicKey"/>.</em></p><p>The SSH public key that can be used for remote login to the compute node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetSshPublicKey(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SshPublicKey = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetDebug(this AzureBatchNodeUserCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetDebug(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetHelp(this AzureBatchNodeUserCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetHelp(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetOutput(this AzureBatchNodeUserCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetOutput(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetQuery(this AzureBatchNodeUserCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetQuery(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings SetVerbose(this AzureBatchNodeUserCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserCreateSettings ResetVerbose(this AzureBatchNodeUserCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeUserDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeUserDeleteSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.NodeId"/>.</em></p><p>The ID of the machine on which you want to delete a user account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetNodeId(this AzureBatchNodeUserDeleteSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.NodeId"/>.</em></p><p>The ID of the machine on which you want to delete a user account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetNodeId(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetPoolId(this AzureBatchNodeUserDeleteSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetPoolId(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region UserName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.UserName"/>.</em></p><p>The name of the user account to delete.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetUserName(this AzureBatchNodeUserDeleteSettings toolSettings, string userName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = userName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.UserName"/>.</em></p><p>The name of the user account to delete.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetUserName(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetYes(this AzureBatchNodeUserDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetYes(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetAccountEndpoint(this AzureBatchNodeUserDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetAccountEndpoint(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetAccountKey(this AzureBatchNodeUserDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetAccountKey(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetAccountName(this AzureBatchNodeUserDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetAccountName(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetDebug(this AzureBatchNodeUserDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetDebug(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetHelp(this AzureBatchNodeUserDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetHelp(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetOutput(this AzureBatchNodeUserDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetOutput(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetQuery(this AzureBatchNodeUserDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetQuery(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings SetVerbose(this AzureBatchNodeUserDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserDeleteSettings ResetVerbose(this AzureBatchNodeUserDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchNodeUserResetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchNodeUserResetSettingsExtensions
    {
        #region NodeId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.NodeId"/>.</em></p><p>The ID of the machine on which you want to update a user account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetNodeId(this AzureBatchNodeUserResetSettings toolSettings, string nodeId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = nodeId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.NodeId"/>.</em></p><p>The ID of the machine on which you want to update a user account.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetNodeId(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodeId = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetPoolId(this AzureBatchNodeUserResetSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.PoolId"/>.</em></p><p>The ID of the pool that contains the compute node.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetPoolId(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region UserName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.UserName"/>.</em></p><p>The name of the user account to update.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetUserName(this AzureBatchNodeUserResetSettings toolSettings, string userName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = userName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.UserName"/>.</em></p><p>The name of the user account to update.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetUserName(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = null;
            return toolSettings;
        }
        #endregion
        #region JsonFile
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.JsonFile"/>.</em></p><p>A file containing the node update user parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Node Update User Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetJsonFile(this AzureBatchNodeUserResetSettings toolSettings, string jsonFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = jsonFile;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.JsonFile"/>.</em></p><p>A file containing the node update user parameter specification in JSON (formatted to match the respective REST API body). If this parameter is specified, all 'Node Update User Arguments' are ignored.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetJsonFile(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonFile = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetAccountEndpoint(this AzureBatchNodeUserResetSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetAccountEndpoint(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetAccountKey(this AzureBatchNodeUserResetSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetAccountKey(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetAccountName(this AzureBatchNodeUserResetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetAccountName(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ExpiryTime
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.ExpiryTime"/>.</em></p><p>The time at which the account should expire. If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetExpiryTime(this AzureBatchNodeUserResetSettings toolSettings, string expiryTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpiryTime = expiryTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.ExpiryTime"/>.</em></p><p>The time at which the account should expire. If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day. Expected format is an ISO-8601 timestamp.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetExpiryTime(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpiryTime = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.Password"/>.</em></p><p>The password of the account. The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetPassword(this AzureBatchNodeUserResetSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.Password"/>.</em></p><p>The password of the account. The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetPassword(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region SshPublicKey
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.SshPublicKey"/>.</em></p><p>The SSH public key that can be used for remote login to the compute node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetSshPublicKey(this AzureBatchNodeUserResetSettings toolSettings, string sshPublicKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SshPublicKey = sshPublicKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.SshPublicKey"/>.</em></p><p>The SSH public key that can be used for remote login to the compute node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetSshPublicKey(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SshPublicKey = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetDebug(this AzureBatchNodeUserResetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetDebug(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetHelp(this AzureBatchNodeUserResetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetHelp(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetOutput(this AzureBatchNodeUserResetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetOutput(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetQuery(this AzureBatchNodeUserResetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetQuery(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchNodeUserResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings SetVerbose(this AzureBatchNodeUserResetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchNodeUserResetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchNodeUserResetSettings ResetVerbose(this AzureBatchNodeUserResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolAllStatisticsShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolAllStatisticsShowSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetAccountEndpoint(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetAccountEndpoint(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetAccountKey(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetAccountKey(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetAccountName(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetAccountName(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetDebug(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetDebug(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetHelp(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetHelp(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetOutput(this AzureBatchPoolAllStatisticsShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetOutput(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetQuery(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetQuery(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAllStatisticsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings SetVerbose(this AzureBatchPoolAllStatisticsShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAllStatisticsShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAllStatisticsShowSettings ResetVerbose(this AzureBatchPoolAllStatisticsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolAutoscaleDisableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolAutoscaleDisableSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.PoolId"/>.</em></p><p>The ID of the pool on which to disable automatic scaling.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetPoolId(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.PoolId"/>.</em></p><p>The ID of the pool on which to disable automatic scaling.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetPoolId(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetAccountEndpoint(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetAccountEndpoint(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetAccountKey(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetAccountKey(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetAccountName(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetAccountName(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetDebug(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetDebug(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetHelp(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetHelp(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetOutput(this AzureBatchPoolAutoscaleDisableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetOutput(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetQuery(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetQuery(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings SetVerbose(this AzureBatchPoolAutoscaleDisableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleDisableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleDisableSettings ResetVerbose(this AzureBatchPoolAutoscaleDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolAutoscaleEnableSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolAutoscaleEnableSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.PoolId"/>.</em></p><p>The ID of the pool on which to enable automatic scaling.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetPoolId(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.PoolId"/>.</em></p><p>The ID of the pool on which to enable automatic scaling.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetPoolId(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AutoScaleEvaluationInterval
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.AutoScaleEvaluationInterval"/>.</em></p><p>The time interval at which to automatically adjust the pool size according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetAutoScaleEvaluationInterval(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string autoScaleEvaluationInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleEvaluationInterval = autoScaleEvaluationInterval;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.AutoScaleEvaluationInterval"/>.</em></p><p>The time interval at which to automatically adjust the pool size according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetAutoScaleEvaluationInterval(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleEvaluationInterval = null;
            return toolSettings;
        }
        #endregion
        #region AutoScaleFormula
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.AutoScaleFormula"/>.</em></p><p>The formula for the desired number of compute nodes in the pool. The formula is checked for validity before it is applied to the pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetAutoScaleFormula(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string autoScaleFormula)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleFormula = autoScaleFormula;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.AutoScaleFormula"/>.</em></p><p>The formula for the desired number of compute nodes in the pool. The formula is checked for validity before it is applied to the pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetAutoScaleFormula(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleFormula = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetAccountEndpoint(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetAccountEndpoint(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetAccountKey(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetAccountKey(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetAccountName(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetAccountName(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetIfMatch(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetIfMatch(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetIfModifiedSince(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetIfModifiedSince(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetIfNoneMatch(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetIfNoneMatch(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetIfUnmodifiedSince(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetIfUnmodifiedSince(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetDebug(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetDebug(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetHelp(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetHelp(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetOutput(this AzureBatchPoolAutoscaleEnableSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetOutput(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetQuery(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetQuery(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings SetVerbose(this AzureBatchPoolAutoscaleEnableSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEnableSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEnableSettings ResetVerbose(this AzureBatchPoolAutoscaleEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolAutoscaleEvaluateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolAutoscaleEvaluateSettingsExtensions
    {
        #region AutoScaleFormula
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AutoScaleFormula"/>.</em></p><p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetAutoScaleFormula(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string autoScaleFormula)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleFormula = autoScaleFormula;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AutoScaleFormula"/>.</em></p><p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>).</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetAutoScaleFormula(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoScaleFormula = null;
            return toolSettings;
        }
        #endregion
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.PoolId"/>.</em></p><p>The ID of the pool on which to evaluate the automatic scaling formula.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetPoolId(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.PoolId"/>.</em></p><p>The ID of the pool on which to evaluate the automatic scaling formula.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetPoolId(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetAccountEndpoint(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetAccountEndpoint(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetAccountKey(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetAccountKey(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetAccountName(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetAccountName(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetDebug(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetDebug(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetHelp(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetHelp(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetOutput(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetOutput(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetQuery(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetQuery(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings SetVerbose(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolAutoscaleEvaluateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolAutoscaleEvaluateSettings ResetVerbose(this AzureBatchPoolAutoscaleEvaluateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolNodeAgentSkusListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolNodeAgentSkusListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetAccountEndpoint(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetAccountEndpoint(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetAccountKey(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetAccountKey(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetAccountName(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetAccountName(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetFilter(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetFilter(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetDebug(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetDebug(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetHelp(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetHelp(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetOutput(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetOutput(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetQuery(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetQuery(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings SetVerbose(this AzureBatchPoolNodeAgentSkusListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeAgentSkusListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeAgentSkusListSettings ResetVerbose(this AzureBatchPoolNodeAgentSkusListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolNodeCountsListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolNodeCountsListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetAccountEndpoint(this AzureBatchPoolNodeCountsListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetAccountEndpoint(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetAccountKey(this AzureBatchPoolNodeCountsListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetAccountKey(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetAccountName(this AzureBatchPoolNodeCountsListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetAccountName(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetFilter(this AzureBatchPoolNodeCountsListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetFilter(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetDebug(this AzureBatchPoolNodeCountsListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetDebug(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetHelp(this AzureBatchPoolNodeCountsListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetHelp(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetOutput(this AzureBatchPoolNodeCountsListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetOutput(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetQuery(this AzureBatchPoolNodeCountsListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetQuery(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolNodeCountsListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings SetVerbose(this AzureBatchPoolNodeCountsListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolNodeCountsListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolNodeCountsListSettings ResetVerbose(this AzureBatchPoolNodeCountsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolOsUpgradeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolOsUpgradeSettingsExtensions
    {
        #region PoolId
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.PoolId"/>.</em></p><p>The ID of the pool to upgrade.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetPoolId(this AzureBatchPoolOsUpgradeSettings toolSettings, string poolId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = poolId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.PoolId"/>.</em></p><p>The ID of the pool to upgrade.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetPoolId(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PoolId = null;
            return toolSettings;
        }
        #endregion
        #region TargetOsVersion
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.TargetOsVersion"/>.</em></p><p>The Azure Guest OS version to be installed on the virtual machines in the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetTargetOsVersion(this AzureBatchPoolOsUpgradeSettings toolSettings, string targetOsVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetOsVersion = targetOsVersion;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.TargetOsVersion"/>.</em></p><p>The Azure Guest OS version to be installed on the virtual machines in the pool.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetTargetOsVersion(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetOsVersion = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetAccountEndpoint(this AzureBatchPoolOsUpgradeSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetAccountEndpoint(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetAccountKey(this AzureBatchPoolOsUpgradeSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetAccountKey(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetAccountName(this AzureBatchPoolOsUpgradeSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetAccountName(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetIfMatch(this AzureBatchPoolOsUpgradeSettings toolSettings, string ifMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = ifMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.IfMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetIfMatch(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetIfModifiedSince(this AzureBatchPoolOsUpgradeSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetIfModifiedSince(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfNoneMatch
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetIfNoneMatch(this AzureBatchPoolOsUpgradeSettings toolSettings, string ifNoneMatch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = ifNoneMatch;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.IfNoneMatch"/>.</em></p><p>An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetIfNoneMatch(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfNoneMatch = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetIfUnmodifiedSince(this AzureBatchPoolOsUpgradeSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetIfUnmodifiedSince(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetDebug(this AzureBatchPoolOsUpgradeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetDebug(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetHelp(this AzureBatchPoolOsUpgradeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetHelp(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetOutput(this AzureBatchPoolOsUpgradeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetOutput(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetQuery(this AzureBatchPoolOsUpgradeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetQuery(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolOsUpgradeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings SetVerbose(this AzureBatchPoolOsUpgradeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolOsUpgradeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolOsUpgradeSettings ResetVerbose(this AzureBatchPoolOsUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchPoolUsageMetricsListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchPoolUsageMetricsListSettingsExtensions
    {
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetAccountEndpoint(this AzureBatchPoolUsageMetricsListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetAccountEndpoint(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetAccountKey(this AzureBatchPoolUsageMetricsListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetAccountKey(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetAccountName(this AzureBatchPoolUsageMetricsListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetAccountName(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region EndTime
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.EndTime"/>.</em></p><p>The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetEndTime(this AzureBatchPoolUsageMetricsListSettings toolSettings, string endTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTime = endTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.EndTime"/>.</em></p><p>The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetEndTime(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTime = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetFilter(this AzureBatchPoolUsageMetricsListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics</a>.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetFilter(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region StartTime
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.StartTime"/>.</em></p><p>The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetStartTime(this AzureBatchPoolUsageMetricsListSettings toolSettings, string startTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTime = startTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.StartTime"/>.</em></p><p>The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetStartTime(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTime = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetDebug(this AzureBatchPoolUsageMetricsListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetDebug(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetHelp(this AzureBatchPoolUsageMetricsListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetHelp(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetOutput(this AzureBatchPoolUsageMetricsListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetOutput(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetQuery(this AzureBatchPoolUsageMetricsListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetQuery(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchPoolUsageMetricsListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings SetVerbose(this AzureBatchPoolUsageMetricsListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchPoolUsageMetricsListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchPoolUsageMetricsListSettings ResetVerbose(this AzureBatchPoolUsageMetricsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskFileDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskFileDeleteSettingsExtensions
    {
        #region FilePath
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.FilePath"/>.</em></p><p>The path to the task file or directory that you want to delete.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetFilePath(this AzureBatchTaskFileDeleteSettings toolSettings, string filePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = filePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.FilePath"/>.</em></p><p>The path to the task file or directory that you want to delete.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetFilePath(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = null;
            return toolSettings;
        }
        #endregion
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetJobId(this AzureBatchTaskFileDeleteSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetJobId(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.TaskId"/>.</em></p><p>The ID of the task whose file you want to delete.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetTaskId(this AzureBatchTaskFileDeleteSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.TaskId"/>.</em></p><p>The ID of the task whose file you want to delete.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetTaskId(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region Recursive
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Recursive"/>.</em></p><p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetRecursive(this AzureBatchTaskFileDeleteSettings toolSettings, string recursive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = recursive;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Recursive"/>.</em></p><p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetRecursive(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetYes(this AzureBatchTaskFileDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetYes(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetAccountEndpoint(this AzureBatchTaskFileDeleteSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetAccountEndpoint(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetAccountKey(this AzureBatchTaskFileDeleteSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetAccountKey(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetAccountName(this AzureBatchTaskFileDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetAccountName(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetDebug(this AzureBatchTaskFileDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetDebug(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetHelp(this AzureBatchTaskFileDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetHelp(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetOutput(this AzureBatchTaskFileDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetOutput(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetQuery(this AzureBatchTaskFileDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetQuery(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings SetVerbose(this AzureBatchTaskFileDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDeleteSettings ResetVerbose(this AzureBatchTaskFileDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskFileDownloadSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskFileDownloadSettingsExtensions
    {
        #region Destination
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.Destination"/>.</em></p><p>The path to the destination file or directory.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetDestination(this AzureBatchTaskFileDownloadSettings toolSettings, string destination)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = destination;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.Destination"/>.</em></p><p>The path to the destination file or directory.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetDestination(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Destination = null;
            return toolSettings;
        }
        #endregion
        #region FilePath
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.FilePath"/>.</em></p><p>The path to the task file that you want to get the content of.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetFilePath(this AzureBatchTaskFileDownloadSettings toolSettings, string filePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = filePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.FilePath"/>.</em></p><p>The path to the task file that you want to get the content of.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetFilePath(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = null;
            return toolSettings;
        }
        #endregion
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetJobId(this AzureBatchTaskFileDownloadSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetJobId(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.TaskId"/>.</em></p><p>The ID of the task whose file you want to retrieve.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetTaskId(this AzureBatchTaskFileDownloadSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.TaskId"/>.</em></p><p>The ID of the task whose file you want to retrieve.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetTaskId(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetAccountEndpoint(this AzureBatchTaskFileDownloadSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetAccountEndpoint(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetAccountKey(this AzureBatchTaskFileDownloadSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetAccountKey(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetAccountName(this AzureBatchTaskFileDownloadSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetAccountName(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region EndRange
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.EndRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved to the end.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetEndRange(this AzureBatchTaskFileDownloadSettings toolSettings, string endRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = endRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.EndRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved to the end.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetEndRange(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndRange = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetIfModifiedSince(this AzureBatchTaskFileDownloadSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetIfModifiedSince(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetIfUnmodifiedSince(this AzureBatchTaskFileDownloadSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetIfUnmodifiedSince(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region StartRange
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.StartRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved from the beginning.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetStartRange(this AzureBatchTaskFileDownloadSettings toolSettings, string startRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = startRange;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.StartRange"/>.</em></p><p>The byte range to be retrieved. If not set the file will be retrieved from the beginning.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetStartRange(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartRange = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetDebug(this AzureBatchTaskFileDownloadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetDebug(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetHelp(this AzureBatchTaskFileDownloadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetHelp(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetOutput(this AzureBatchTaskFileDownloadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetOutput(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetQuery(this AzureBatchTaskFileDownloadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetQuery(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings SetVerbose(this AzureBatchTaskFileDownloadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileDownloadSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileDownloadSettings ResetVerbose(this AzureBatchTaskFileDownloadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskFileListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskFileListSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetJobId(this AzureBatchTaskFileListSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetJobId(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.TaskId"/>.</em></p><p>The ID of the task whose files you want to list.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetTaskId(this AzureBatchTaskFileListSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.TaskId"/>.</em></p><p>The ID of the task whose files you want to list.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetTaskId(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region Recursive
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Recursive"/>.</em></p><p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetRecursive(this AzureBatchTaskFileListSettings toolSettings, string recursive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = recursive;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Recursive"/>.</em></p><p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetRecursive(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Recursive = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetAccountEndpoint(this AzureBatchTaskFileListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetAccountEndpoint(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetAccountKey(this AzureBatchTaskFileListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetAccountKey(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetAccountName(this AzureBatchTaskFileListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetAccountName(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files</a>.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetFilter(this AzureBatchTaskFileListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Filter"/>.</em></p><p>An OData $filter clause. For more information on constructing this filter, see <a href="https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files">https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files</a>.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetFilter(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetDebug(this AzureBatchTaskFileListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetDebug(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetHelp(this AzureBatchTaskFileListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetHelp(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetOutput(this AzureBatchTaskFileListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetOutput(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetQuery(this AzureBatchTaskFileListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetQuery(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings SetVerbose(this AzureBatchTaskFileListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileListSettings ResetVerbose(this AzureBatchTaskFileListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskFileShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskFileShowSettingsExtensions
    {
        #region FilePath
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.FilePath"/>.</em></p><p>The path to the task file that you want to get the properties of.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetFilePath(this AzureBatchTaskFileShowSettings toolSettings, string filePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = filePath;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.FilePath"/>.</em></p><p>The path to the task file that you want to get the properties of.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetFilePath(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilePath = null;
            return toolSettings;
        }
        #endregion
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetJobId(this AzureBatchTaskFileShowSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.JobId"/>.</em></p><p>The ID of the job that contains the task.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetJobId(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.TaskId"/>.</em></p><p>The ID of the task whose file you want to get the properties of.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetTaskId(this AzureBatchTaskFileShowSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.TaskId"/>.</em></p><p>The ID of the task whose file you want to get the properties of.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetTaskId(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetAccountEndpoint(this AzureBatchTaskFileShowSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetAccountEndpoint(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetAccountKey(this AzureBatchTaskFileShowSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetAccountKey(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetAccountName(this AzureBatchTaskFileShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetAccountName(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region IfModifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetIfModifiedSince(this AzureBatchTaskFileShowSettings toolSettings, string ifModifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = ifModifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.IfModifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetIfModifiedSince(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfModifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region IfUnmodifiedSince
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetIfUnmodifiedSince(this AzureBatchTaskFileShowSettings toolSettings, string ifUnmodifiedSince)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = ifUnmodifiedSince;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.IfUnmodifiedSince"/>.</em></p><p>A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetIfUnmodifiedSince(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IfUnmodifiedSince = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetDebug(this AzureBatchTaskFileShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetDebug(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetHelp(this AzureBatchTaskFileShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetHelp(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetOutput(this AzureBatchTaskFileShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetOutput(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetQuery(this AzureBatchTaskFileShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetQuery(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskFileShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings SetVerbose(this AzureBatchTaskFileShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskFileShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskFileShowSettings ResetVerbose(this AzureBatchTaskFileShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureBatchTaskSubtaskListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureBatchTaskSubtaskListSettingsExtensions
    {
        #region JobId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetJobId(this AzureBatchTaskSubtaskListSettings toolSettings, string jobId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = jobId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.JobId"/>.</em></p><p>The ID of the job.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetJobId(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JobId = null;
            return toolSettings;
        }
        #endregion
        #region TaskId
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.TaskId"/>.</em></p><p>The ID of the task.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetTaskId(this AzureBatchTaskSubtaskListSettings toolSettings, string taskId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = taskId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.TaskId"/>.</em></p><p>The ID of the task.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetTaskId(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskId = null;
            return toolSettings;
        }
        #endregion
        #region AccountEndpoint
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetAccountEndpoint(this AzureBatchTaskSubtaskListSettings toolSettings, string accountEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = accountEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.AccountEndpoint"/>.</em></p><p>Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetAccountEndpoint(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region AccountKey
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetAccountKey(this AzureBatchTaskSubtaskListSettings toolSettings, string accountKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = accountKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.AccountKey"/>.</em></p><p>Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetAccountKey(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountKey = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetAccountName(this AzureBatchTaskSubtaskListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.AccountName"/>.</em></p><p>Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetAccountName(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Select
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetSelect(this AzureBatchTaskSubtaskListSettings toolSettings, string select)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = select;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.Select"/>.</em></p><p>An OData $select clause.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetSelect(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Select = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetDebug(this AzureBatchTaskSubtaskListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetDebug(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetHelp(this AzureBatchTaskSubtaskListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetHelp(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetOutput(this AzureBatchTaskSubtaskListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetOutput(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetQuery(this AzureBatchTaskSubtaskListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.Query"/>.</em></p><p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetQuery(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureBatchTaskSubtaskListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings SetVerbose(this AzureBatchTaskSubtaskListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureBatchTaskSubtaskListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureBatchTaskSubtaskListSettings ResetVerbose(this AzureBatchTaskSubtaskListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region BatchJobScheduleOnAllTasksComplete
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class BatchJobScheduleOnAllTasksComplete : Enumeration
    {
        public static BatchJobScheduleOnAllTasksComplete noaction = new BatchJobScheduleOnAllTasksComplete { Value = "noaction" };
        public static BatchJobScheduleOnAllTasksComplete terminatejob = new BatchJobScheduleOnAllTasksComplete { Value = "terminatejob" };
    }
    #endregion
    #region BatchJobDisableDisableTasks
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class BatchJobDisableDisableTasks : Enumeration
    {
        public static BatchJobDisableDisableTasks requeue = new BatchJobDisableDisableTasks { Value = "requeue" };
        public static BatchJobDisableDisableTasks terminate = new BatchJobDisableDisableTasks { Value = "terminate" };
        public static BatchJobDisableDisableTasks wait = new BatchJobDisableDisableTasks { Value = "wait" };
    }
    #endregion
    #region BatchNodeNodeDeallocationOption
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class BatchNodeNodeDeallocationOption : Enumeration
    {
        public static BatchNodeNodeDeallocationOption requeue = new BatchNodeNodeDeallocationOption { Value = "requeue" };
        public static BatchNodeNodeDeallocationOption retaineddata = new BatchNodeNodeDeallocationOption { Value = "retaineddata" };
        public static BatchNodeNodeDeallocationOption taskcompletion = new BatchNodeNodeDeallocationOption { Value = "taskcompletion" };
        public static BatchNodeNodeDeallocationOption terminate = new BatchNodeNodeDeallocationOption { Value = "terminate" };
    }
    #endregion
    #region BatchPoolCreateOsFamily
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class BatchPoolCreateOsFamily : Enumeration
    {
        public static BatchPoolCreateOsFamily _2 = new BatchPoolCreateOsFamily { Value = "2" };
        public static BatchPoolCreateOsFamily _3 = new BatchPoolCreateOsFamily { Value = "3" };
        public static BatchPoolCreateOsFamily _4 = new BatchPoolCreateOsFamily { Value = "4" };
        public static BatchPoolCreateOsFamily _5 = new BatchPoolCreateOsFamily { Value = "5" };
    }
    #endregion
    #region BatchAccountKeysRenewKeyName
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class BatchAccountKeysRenewKeyName : Enumeration
    {
        public static BatchAccountKeysRenewKeyName primary = new BatchAccountKeysRenewKeyName { Value = "primary" };
        public static BatchAccountKeysRenewKeyName secondary = new BatchAccountKeysRenewKeyName { Value = "secondary" };
    }
    #endregion
    #region BatchNodeSchedulingDisableNodeDisableSchedulingOption
    /// <summary><p>Used within <see cref="AzureBatchTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    public partial class BatchNodeSchedulingDisableNodeDisableSchedulingOption : Enumeration
    {
        public static BatchNodeSchedulingDisableNodeDisableSchedulingOption requeue = new BatchNodeSchedulingDisableNodeDisableSchedulingOption { Value = "requeue" };
        public static BatchNodeSchedulingDisableNodeDisableSchedulingOption taskcompletion = new BatchNodeSchedulingDisableNodeDisableSchedulingOption { Value = "taskcompletion" };
        public static BatchNodeSchedulingDisableNodeDisableSchedulingOption terminate = new BatchNodeSchedulingDisableNodeDisableSchedulingOption { Value = "terminate" };
    }
    #endregion
}
