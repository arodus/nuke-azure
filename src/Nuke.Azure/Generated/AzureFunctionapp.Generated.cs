// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureFunctionapp.json
// Generated with Nuke.CodeGeneration version 0.20.1 (Windows,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappTasks
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public static string AzureFunctionappPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("AZUREFUNCTIONAPP_EXE") ??
            ToolPathResolver.GetPathExecutable("az");
        public static Action<OutputType, string> AzureFunctionappLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   Manage function apps.
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionapp(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureFunctionappPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, AzureFunctionappLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappCreate(AzureFunctionappCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--app-insights</c> via <see cref="AzureFunctionappCreateSettings.AppInsights"/></li>
        ///     <li><c>--app-insights-key</c> via <see cref="AzureFunctionappCreateSettings.AppInsightsKey"/></li>
        ///     <li><c>--consumption-plan-location</c> via <see cref="AzureFunctionappCreateSettings.ConsumptionPlanLocation"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCreateSettings.Debug"/></li>
        ///     <li><c>--deployment-container-image-name</c> via <see cref="AzureFunctionappCreateSettings.DeploymentContainerImageName"/></li>
        ///     <li><c>--deployment-local-git</c> via <see cref="AzureFunctionappCreateSettings.DeploymentLocalGit"/></li>
        ///     <li><c>--deployment-source-branch</c> via <see cref="AzureFunctionappCreateSettings.DeploymentSourceBranch"/></li>
        ///     <li><c>--deployment-source-url</c> via <see cref="AzureFunctionappCreateSettings.DeploymentSourceUrl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCreateSettings.Name"/></li>
        ///     <li><c>--os-type</c> via <see cref="AzureFunctionappCreateSettings.OsType"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCreateSettings.Output"/></li>
        ///     <li><c>--plan</c> via <see cref="AzureFunctionappCreateSettings.Plan"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--runtime</c> via <see cref="AzureFunctionappCreateSettings.Runtime"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureFunctionappCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureFunctionappCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappCreate(Configure<AzureFunctionappCreateSettings> configurator)
        {
            return AzureFunctionappCreate(configurator(new AzureFunctionappCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--app-insights</c> via <see cref="AzureFunctionappCreateSettings.AppInsights"/></li>
        ///     <li><c>--app-insights-key</c> via <see cref="AzureFunctionappCreateSettings.AppInsightsKey"/></li>
        ///     <li><c>--consumption-plan-location</c> via <see cref="AzureFunctionappCreateSettings.ConsumptionPlanLocation"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCreateSettings.Debug"/></li>
        ///     <li><c>--deployment-container-image-name</c> via <see cref="AzureFunctionappCreateSettings.DeploymentContainerImageName"/></li>
        ///     <li><c>--deployment-local-git</c> via <see cref="AzureFunctionappCreateSettings.DeploymentLocalGit"/></li>
        ///     <li><c>--deployment-source-branch</c> via <see cref="AzureFunctionappCreateSettings.DeploymentSourceBranch"/></li>
        ///     <li><c>--deployment-source-url</c> via <see cref="AzureFunctionappCreateSettings.DeploymentSourceUrl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCreateSettings.Name"/></li>
        ///     <li><c>--os-type</c> via <see cref="AzureFunctionappCreateSettings.OsType"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCreateSettings.Output"/></li>
        ///     <li><c>--plan</c> via <see cref="AzureFunctionappCreateSettings.Plan"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--runtime</c> via <see cref="AzureFunctionappCreateSettings.Runtime"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureFunctionappCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureFunctionappCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappCreate(CombinatorialConfigure<AzureFunctionappCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappCreate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDelete(AzureFunctionappDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDelete(Configure<AzureFunctionappDeleteSettings> configurator)
        {
            return AzureFunctionappDelete(configurator(new AzureFunctionappDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDelete(CombinatorialConfigure<AzureFunctionappDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappList(AzureFunctionappListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappList(Configure<AzureFunctionappListSettings> configurator)
        {
            return AzureFunctionappList(configurator(new AzureFunctionappListSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappListSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappList(CombinatorialConfigure<AzureFunctionappListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappList, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappListConsumptionLocations(AzureFunctionappListConsumptionLocationsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappListConsumptionLocationsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappListConsumptionLocations(Configure<AzureFunctionappListConsumptionLocationsSettings> configurator)
        {
            return AzureFunctionappListConsumptionLocations(configurator(new AzureFunctionappListConsumptionLocationsSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappListConsumptionLocationsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappListConsumptionLocationsSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappListConsumptionLocations(CombinatorialConfigure<AzureFunctionappListConsumptionLocationsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappListConsumptionLocations, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappRestart(AzureFunctionappRestartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappRestartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappRestartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappRestartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappRestartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappRestartSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappRestartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappRestartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappRestartSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappRestartSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappRestartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappRestartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappRestart(Configure<AzureFunctionappRestartSettings> configurator)
        {
            return AzureFunctionappRestart(configurator(new AzureFunctionappRestartSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappRestartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappRestartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappRestartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappRestartSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappRestartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappRestartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappRestartSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappRestartSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappRestartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappRestartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappRestartSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappRestart(CombinatorialConfigure<AzureFunctionappRestartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappRestart, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappShow(AzureFunctionappShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappShow(Configure<AzureFunctionappShowSettings> configurator)
        {
            return AzureFunctionappShow(configurator(new AzureFunctionappShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappShow(CombinatorialConfigure<AzureFunctionappShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappStart(AzureFunctionappStartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappStartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappStartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappStartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappStartSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappStartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappStartSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappStartSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappStartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappStart(Configure<AzureFunctionappStartSettings> configurator)
        {
            return AzureFunctionappStart(configurator(new AzureFunctionappStartSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappStartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappStartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappStartSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappStartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappStartSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappStartSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappStartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappStartSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappStart(CombinatorialConfigure<AzureFunctionappStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappStart, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappStop(AzureFunctionappStopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappStopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappStopSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappStopSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappStopSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappStopSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappStopSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappStopSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappStopSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappStopSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappStopSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappStopSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappStop(Configure<AzureFunctionappStopSettings> configurator)
        {
            return AzureFunctionappStop(configurator(new AzureFunctionappStopSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappStopSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappStopSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappStopSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappStopSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappStopSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappStopSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappStopSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappStopSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappStopSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappStopSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappStopSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappStop(CombinatorialConfigure<AzureFunctionappStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappStop, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappUpdate(AzureFunctionappUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureFunctionappUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureFunctionappUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappUpdateSettings.Output"/></li>
        ///     <li><c>--plan</c> via <see cref="AzureFunctionappUpdateSettings.Plan"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureFunctionappUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureFunctionappUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappUpdate(Configure<AzureFunctionappUpdateSettings> configurator)
        {
            return AzureFunctionappUpdate(configurator(new AzureFunctionappUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureFunctionappUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureFunctionappUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappUpdateSettings.Output"/></li>
        ///     <li><c>--plan</c> via <see cref="AzureFunctionappUpdateSettings.Plan"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureFunctionappUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureFunctionappUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappUpdate(CombinatorialConfigure<AzureFunctionappUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappUpdate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSet(AzureFunctionappConfigSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--always-on</c> via <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></li>
        ///     <li><c>--auto-heal-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSetSettings.Debug"/></li>
        ///     <li><c>--ftps-state</c> via <see cref="AzureFunctionappConfigSetSettings.FtpsState"/></li>
        ///     <li><c>--generic-configurations</c> via <see cref="AzureFunctionappConfigSetSettings.GenericConfigurations"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSetSettings.Help"/></li>
        ///     <li><c>--http20-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSetSettings.Ids"/></li>
        ///     <li><c>--java-container</c> via <see cref="AzureFunctionappConfigSetSettings.JavaContainer"/></li>
        ///     <li><c>--java-container-version</c> via <see cref="AzureFunctionappConfigSetSettings.JavaContainerVersion"/></li>
        ///     <li><c>--java-version</c> via <see cref="AzureFunctionappConfigSetSettings.JavaVersion"/></li>
        ///     <li><c>--linux-fx-version</c> via <see cref="AzureFunctionappConfigSetSettings.LinuxFxVersion"/></li>
        ///     <li><c>--min-tls-version</c> via <see cref="AzureFunctionappConfigSetSettings.MinTlsVersion"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSetSettings.Name"/></li>
        ///     <li><c>--net-framework-version</c> via <see cref="AzureFunctionappConfigSetSettings.NetFrameworkVersion"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSetSettings.Output"/></li>
        ///     <li><c>--php-version</c> via <see cref="AzureFunctionappConfigSetSettings.PhpVersion"/></li>
        ///     <li><c>--prewarmed-instance-count</c> via <see cref="AzureFunctionappConfigSetSettings.PrewarmedInstanceCount"/></li>
        ///     <li><c>--python-version</c> via <see cref="AzureFunctionappConfigSetSettings.PythonVersion"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSetSettings.Query"/></li>
        ///     <li><c>--remote-debugging-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSetSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigSetSettings.Slot"/></li>
        ///     <li><c>--startup-file</c> via <see cref="AzureFunctionappConfigSetSettings.StartupFile"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSetSettings.Subscription"/></li>
        ///     <li><c>--use-32bit-worker-process</c> via <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSetSettings.Verbose"/></li>
        ///     <li><c>--web-sockets-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSet(Configure<AzureFunctionappConfigSetSettings> configurator)
        {
            return AzureFunctionappConfigSet(configurator(new AzureFunctionappConfigSetSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--always-on</c> via <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></li>
        ///     <li><c>--auto-heal-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSetSettings.Debug"/></li>
        ///     <li><c>--ftps-state</c> via <see cref="AzureFunctionappConfigSetSettings.FtpsState"/></li>
        ///     <li><c>--generic-configurations</c> via <see cref="AzureFunctionappConfigSetSettings.GenericConfigurations"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSetSettings.Help"/></li>
        ///     <li><c>--http20-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSetSettings.Ids"/></li>
        ///     <li><c>--java-container</c> via <see cref="AzureFunctionappConfigSetSettings.JavaContainer"/></li>
        ///     <li><c>--java-container-version</c> via <see cref="AzureFunctionappConfigSetSettings.JavaContainerVersion"/></li>
        ///     <li><c>--java-version</c> via <see cref="AzureFunctionappConfigSetSettings.JavaVersion"/></li>
        ///     <li><c>--linux-fx-version</c> via <see cref="AzureFunctionappConfigSetSettings.LinuxFxVersion"/></li>
        ///     <li><c>--min-tls-version</c> via <see cref="AzureFunctionappConfigSetSettings.MinTlsVersion"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSetSettings.Name"/></li>
        ///     <li><c>--net-framework-version</c> via <see cref="AzureFunctionappConfigSetSettings.NetFrameworkVersion"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSetSettings.Output"/></li>
        ///     <li><c>--php-version</c> via <see cref="AzureFunctionappConfigSetSettings.PhpVersion"/></li>
        ///     <li><c>--prewarmed-instance-count</c> via <see cref="AzureFunctionappConfigSetSettings.PrewarmedInstanceCount"/></li>
        ///     <li><c>--python-version</c> via <see cref="AzureFunctionappConfigSetSettings.PythonVersion"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSetSettings.Query"/></li>
        ///     <li><c>--remote-debugging-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSetSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigSetSettings.Slot"/></li>
        ///     <li><c>--startup-file</c> via <see cref="AzureFunctionappConfigSetSettings.StartupFile"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSetSettings.Subscription"/></li>
        ///     <li><c>--use-32bit-worker-process</c> via <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSetSettings.Verbose"/></li>
        ///     <li><c>--web-sockets-enabled</c> via <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigSetSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigSet(CombinatorialConfigure<AzureFunctionappConfigSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigSet, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigShow(AzureFunctionappConfigShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigShow(Configure<AzureFunctionappConfigShowSettings> configurator)
        {
            return AzureFunctionappConfigShow(configurator(new AzureFunctionappConfigShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigShow(CombinatorialConfigure<AzureFunctionappConfigShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappCorsAdd(AzureFunctionappCorsAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappCorsAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allowed-origins</c> via <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCorsAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCorsAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappCorsAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCorsAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCorsAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCorsAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCorsAddSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappCorsAddSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCorsAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCorsAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappCorsAdd(Configure<AzureFunctionappCorsAddSettings> configurator)
        {
            return AzureFunctionappCorsAdd(configurator(new AzureFunctionappCorsAddSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allowed-origins</c> via <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCorsAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCorsAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappCorsAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCorsAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCorsAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCorsAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCorsAddSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappCorsAddSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCorsAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCorsAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappCorsAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappCorsAdd(CombinatorialConfigure<AzureFunctionappCorsAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappCorsAdd, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappCorsRemove(AzureFunctionappCorsRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappCorsRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allowed-origins</c> via <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCorsRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCorsRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCorsRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCorsRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCorsRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCorsRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappCorsRemoveSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCorsRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCorsRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappCorsRemove(Configure<AzureFunctionappCorsRemoveSettings> configurator)
        {
            return AzureFunctionappCorsRemove(configurator(new AzureFunctionappCorsRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allowed-origins</c> via <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCorsRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCorsRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCorsRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCorsRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCorsRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCorsRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappCorsRemoveSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCorsRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCorsRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappCorsRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappCorsRemove(CombinatorialConfigure<AzureFunctionappCorsRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappCorsRemove, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappCorsShow(AzureFunctionappCorsShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappCorsShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCorsShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCorsShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappCorsShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCorsShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCorsShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCorsShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCorsShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappCorsShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCorsShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCorsShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappCorsShow(Configure<AzureFunctionappCorsShowSettings> configurator)
        {
            return AzureFunctionappCorsShow(configurator(new AzureFunctionappCorsShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappCorsShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappCorsShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappCorsShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappCorsShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappCorsShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappCorsShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappCorsShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappCorsShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappCorsShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappCorsShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappCorsShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappCorsShow(CombinatorialConfigure<AzureFunctionappCorsShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappCorsShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentListPublishingCredentials(AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentListPublishingCredentialsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentListPublishingCredentials(Configure<AzureFunctionappDeploymentListPublishingCredentialsSettings> configurator)
        {
            return AzureFunctionappDeploymentListPublishingCredentials(configurator(new AzureFunctionappDeploymentListPublishingCredentialsSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentListPublishingCredentialsSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentListPublishingCredentials(CombinatorialConfigure<AzureFunctionappDeploymentListPublishingCredentialsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentListPublishingCredentials, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentListPublishingProfiles(AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentListPublishingProfilesSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentListPublishingProfiles(Configure<AzureFunctionappDeploymentListPublishingProfilesSettings> configurator)
        {
            return AzureFunctionappDeploymentListPublishingProfiles(configurator(new AzureFunctionappDeploymentListPublishingProfilesSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentListPublishingProfilesSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentListPublishingProfiles(CombinatorialConfigure<AzureFunctionappDeploymentListPublishingProfilesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentListPublishingProfiles, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDevopsBuildCreate(AzureFunctionappDevopsBuildCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDevopsBuildCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-force-push</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Debug"/></li>
        ///     <li><c>--functionapp-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.FunctionappName"/></li>
        ///     <li><c>--github-pat</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubPat"/></li>
        ///     <li><c>--github-repository</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubRepository"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Help"/></li>
        ///     <li><c>--organization-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.OrganizationName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Output"/></li>
        ///     <li><c>--overwrite-yaml</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></li>
        ///     <li><c>--project-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.ProjectName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Query"/></li>
        ///     <li><c>--repository-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.RepositoryName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDevopsBuildCreate(Configure<AzureFunctionappDevopsBuildCreateSettings> configurator)
        {
            return AzureFunctionappDevopsBuildCreate(configurator(new AzureFunctionappDevopsBuildCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-force-push</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Debug"/></li>
        ///     <li><c>--functionapp-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.FunctionappName"/></li>
        ///     <li><c>--github-pat</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubPat"/></li>
        ///     <li><c>--github-repository</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubRepository"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Help"/></li>
        ///     <li><c>--organization-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.OrganizationName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Output"/></li>
        ///     <li><c>--overwrite-yaml</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></li>
        ///     <li><c>--project-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.ProjectName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Query"/></li>
        ///     <li><c>--repository-name</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.RepositoryName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDevopsBuildCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDevopsBuildCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDevopsBuildCreate(CombinatorialConfigure<AzureFunctionappDevopsBuildCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDevopsBuildCreate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDevopsPipelineCreate(AzureFunctionappDevopsPipelineCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDevopsPipelineCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-force-push</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Debug"/></li>
        ///     <li><c>--functionapp-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.FunctionappName"/></li>
        ///     <li><c>--github-pat</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubPat"/></li>
        ///     <li><c>--github-repository</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubRepository"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Help"/></li>
        ///     <li><c>--organization-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.OrganizationName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Output"/></li>
        ///     <li><c>--overwrite-yaml</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></li>
        ///     <li><c>--project-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.ProjectName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Query"/></li>
        ///     <li><c>--repository-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.RepositoryName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDevopsPipelineCreate(Configure<AzureFunctionappDevopsPipelineCreateSettings> configurator)
        {
            return AzureFunctionappDevopsPipelineCreate(configurator(new AzureFunctionappDevopsPipelineCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--allow-force-push</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Debug"/></li>
        ///     <li><c>--functionapp-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.FunctionappName"/></li>
        ///     <li><c>--github-pat</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubPat"/></li>
        ///     <li><c>--github-repository</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubRepository"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Help"/></li>
        ///     <li><c>--organization-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.OrganizationName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Output"/></li>
        ///     <li><c>--overwrite-yaml</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></li>
        ///     <li><c>--project-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.ProjectName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Query"/></li>
        ///     <li><c>--repository-name</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.RepositoryName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDevopsPipelineCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDevopsPipelineCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDevopsPipelineCreate(CombinatorialConfigure<AzureFunctionappDevopsPipelineCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDevopsPipelineCreate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappIdentityAssign(AzureFunctionappIdentityAssignSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappIdentityAssignSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappIdentityAssignSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappIdentityAssignSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappIdentityAssignSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappIdentityAssignSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappIdentityAssignSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappIdentityAssignSettings.ResourceGroup"/></li>
        ///     <li><c>--role</c> via <see cref="AzureFunctionappIdentityAssignSettings.Role"/></li>
        ///     <li><c>--scope</c> via <see cref="AzureFunctionappIdentityAssignSettings.Scope"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappIdentityAssignSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappIdentityAssignSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappIdentityAssignSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappIdentityAssign(Configure<AzureFunctionappIdentityAssignSettings> configurator)
        {
            return AzureFunctionappIdentityAssign(configurator(new AzureFunctionappIdentityAssignSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappIdentityAssignSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappIdentityAssignSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappIdentityAssignSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappIdentityAssignSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappIdentityAssignSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappIdentityAssignSettings.ResourceGroup"/></li>
        ///     <li><c>--role</c> via <see cref="AzureFunctionappIdentityAssignSettings.Role"/></li>
        ///     <li><c>--scope</c> via <see cref="AzureFunctionappIdentityAssignSettings.Scope"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappIdentityAssignSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappIdentityAssignSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappIdentityAssignSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappIdentityAssignSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappIdentityAssign(CombinatorialConfigure<AzureFunctionappIdentityAssignSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappIdentityAssign, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappIdentityRemove(AzureFunctionappIdentityRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappIdentityRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappIdentityRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappIdentityRemove(Configure<AzureFunctionappIdentityRemoveSettings> configurator)
        {
            return AzureFunctionappIdentityRemove(configurator(new AzureFunctionappIdentityRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappIdentityRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappIdentityRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappIdentityRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappIdentityRemove(CombinatorialConfigure<AzureFunctionappIdentityRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappIdentityRemove, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappIdentityShow(AzureFunctionappIdentityShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappIdentityShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappIdentityShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappIdentityShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappIdentityShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappIdentityShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappIdentityShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappIdentityShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappIdentityShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappIdentityShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappIdentityShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappIdentityShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappIdentityShow(Configure<AzureFunctionappIdentityShowSettings> configurator)
        {
            return AzureFunctionappIdentityShow(configurator(new AzureFunctionappIdentityShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappIdentityShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappIdentityShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappIdentityShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappIdentityShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappIdentityShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappIdentityShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappIdentityShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappIdentityShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappIdentityShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappIdentityShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappIdentityShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappIdentityShow(CombinatorialConfigure<AzureFunctionappIdentityShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappIdentityShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanCreate(AzureFunctionappPlanCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappPlanCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanCreateSettings.Help"/></li>
        ///     <li><c>--is-linux</c> via <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></li>
        ///     <li><c>--location</c> via <see cref="AzureFunctionappPlanCreateSettings.Location"/></li>
        ///     <li><c>--max-burst</c> via <see cref="AzureFunctionappPlanCreateSettings.MaxBurst"/></li>
        ///     <li><c>--min-instances</c> via <see cref="AzureFunctionappPlanCreateSettings.MinInstances"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureFunctionappPlanCreateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureFunctionappPlanCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanCreate(Configure<AzureFunctionappPlanCreateSettings> configurator)
        {
            return AzureFunctionappPlanCreate(configurator(new AzureFunctionappPlanCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanCreateSettings.Help"/></li>
        ///     <li><c>--is-linux</c> via <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></li>
        ///     <li><c>--location</c> via <see cref="AzureFunctionappPlanCreateSettings.Location"/></li>
        ///     <li><c>--max-burst</c> via <see cref="AzureFunctionappPlanCreateSettings.MaxBurst"/></li>
        ///     <li><c>--min-instances</c> via <see cref="AzureFunctionappPlanCreateSettings.MinInstances"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureFunctionappPlanCreateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureFunctionappPlanCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappPlanCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappPlanCreate(CombinatorialConfigure<AzureFunctionappPlanCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappPlanCreate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanDelete(AzureFunctionappPlanDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappPlanDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureFunctionappPlanDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanDelete(Configure<AzureFunctionappPlanDeleteSettings> configurator)
        {
            return AzureFunctionappPlanDelete(configurator(new AzureFunctionappPlanDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanDeleteSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="AzureFunctionappPlanDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappPlanDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappPlanDelete(CombinatorialConfigure<AzureFunctionappPlanDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappPlanDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanList(AzureFunctionappPlanListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappPlanListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanList(Configure<AzureFunctionappPlanListSettings> configurator)
        {
            return AzureFunctionappPlanList(configurator(new AzureFunctionappPlanListSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappPlanListSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappPlanList(CombinatorialConfigure<AzureFunctionappPlanListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappPlanList, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanShow(AzureFunctionappPlanShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappPlanShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappPlanShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanShow(Configure<AzureFunctionappPlanShowSettings> configurator)
        {
            return AzureFunctionappPlanShow(configurator(new AzureFunctionappPlanShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappPlanShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappPlanShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappPlanShow(CombinatorialConfigure<AzureFunctionappPlanShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappPlanShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanUpdate(AzureFunctionappPlanUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappPlanUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureFunctionappPlanUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureFunctionappPlanUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></li>
        ///     <li><c>--max-burst</c> via <see cref="AzureFunctionappPlanUpdateSettings.MaxBurst"/></li>
        ///     <li><c>--min-instances</c> via <see cref="AzureFunctionappPlanUpdateSettings.MinInstances"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureFunctionappPlanUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureFunctionappPlanUpdateSettings.Set"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureFunctionappPlanUpdateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappPlanUpdate(Configure<AzureFunctionappPlanUpdateSettings> configurator)
        {
            return AzureFunctionappPlanUpdate(configurator(new AzureFunctionappPlanUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureFunctionappPlanUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappPlanUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureFunctionappPlanUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappPlanUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></li>
        ///     <li><c>--max-burst</c> via <see cref="AzureFunctionappPlanUpdateSettings.MaxBurst"/></li>
        ///     <li><c>--min-instances</c> via <see cref="AzureFunctionappPlanUpdateSettings.MinInstances"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappPlanUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappPlanUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappPlanUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureFunctionappPlanUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappPlanUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureFunctionappPlanUpdateSettings.Set"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureFunctionappPlanUpdateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappPlanUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappPlanUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappPlanUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappPlanUpdate(CombinatorialConfigure<AzureFunctionappPlanUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappPlanUpdate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigAppsettingsDelete(AzureFunctionappConfigAppsettingsDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigAppsettingsDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--setting-names</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigAppsettingsDelete(Configure<AzureFunctionappConfigAppsettingsDeleteSettings> configurator)
        {
            return AzureFunctionappConfigAppsettingsDelete(configurator(new AzureFunctionappConfigAppsettingsDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--setting-names</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigAppsettingsDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigAppsettingsDelete(CombinatorialConfigure<AzureFunctionappConfigAppsettingsDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigAppsettingsDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigAppsettingsList(AzureFunctionappConfigAppsettingsListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigAppsettingsListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigAppsettingsList(Configure<AzureFunctionappConfigAppsettingsListSettings> configurator)
        {
            return AzureFunctionappConfigAppsettingsList(configurator(new AzureFunctionappConfigAppsettingsListSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigAppsettingsListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigAppsettingsListSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigAppsettingsList(CombinatorialConfigure<AzureFunctionappConfigAppsettingsListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigAppsettingsList, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigAppsettingsSet(AzureFunctionappConfigAppsettingsSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigAppsettingsSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.ResourceGroup"/></li>
        ///     <li><c>--settings</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Slot"/></li>
        ///     <li><c>--slot-settings</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigAppsettingsSet(Configure<AzureFunctionappConfigAppsettingsSetSettings> configurator)
        {
            return AzureFunctionappConfigAppsettingsSet(configurator(new AzureFunctionappConfigAppsettingsSetSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.ResourceGroup"/></li>
        ///     <li><c>--settings</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Slot"/></li>
        ///     <li><c>--slot-settings</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigAppsettingsSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigAppsettingsSetSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigAppsettingsSet(CombinatorialConfigure<AzureFunctionappConfigAppsettingsSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigAppsettingsSet, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigContainerDelete(AzureFunctionappConfigContainerDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigContainerDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigContainerDelete(Configure<AzureFunctionappConfigContainerDeleteSettings> configurator)
        {
            return AzureFunctionappConfigContainerDelete(configurator(new AzureFunctionappConfigContainerDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigContainerDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigContainerDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigContainerDelete(CombinatorialConfigure<AzureFunctionappConfigContainerDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigContainerDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigContainerSet(AzureFunctionappConfigContainerSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigContainerSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Debug"/></li>
        ///     <li><c>--docker-custom-image-name</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerCustomImageName"/></li>
        ///     <li><c>--docker-registry-server-password</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerPassword"/></li>
        ///     <li><c>--docker-registry-server-url</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUrl"/></li>
        ///     <li><c>--docker-registry-server-user</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUser"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigContainerSetSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigContainerSet(Configure<AzureFunctionappConfigContainerSetSettings> configurator)
        {
            return AzureFunctionappConfigContainerSet(configurator(new AzureFunctionappConfigContainerSetSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Debug"/></li>
        ///     <li><c>--docker-custom-image-name</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerCustomImageName"/></li>
        ///     <li><c>--docker-registry-server-password</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerPassword"/></li>
        ///     <li><c>--docker-registry-server-url</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUrl"/></li>
        ///     <li><c>--docker-registry-server-user</c> via <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUser"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigContainerSetSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigContainerSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigContainerSetSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigContainerSet(CombinatorialConfigure<AzureFunctionappConfigContainerSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigContainerSet, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigContainerShow(AzureFunctionappConfigContainerShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigContainerShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigContainerShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigContainerShow(Configure<AzureFunctionappConfigContainerShowSettings> configurator)
        {
            return AzureFunctionappConfigContainerShow(configurator(new AzureFunctionappConfigContainerShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigContainerShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigContainerShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigContainerShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigContainerShow(CombinatorialConfigure<AzureFunctionappConfigContainerShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigContainerShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameAdd(AzureFunctionappConfigHostnameAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigHostnameAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Hostname"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameAdd(Configure<AzureFunctionappConfigHostnameAddSettings> configurator)
        {
            return AzureFunctionappConfigHostnameAdd(configurator(new AzureFunctionappConfigHostnameAddSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Hostname"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigHostnameAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigHostnameAdd(CombinatorialConfigure<AzureFunctionappConfigHostnameAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigHostnameAdd, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameDelete(AzureFunctionappConfigHostnameDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigHostnameDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Hostname"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameDelete(Configure<AzureFunctionappConfigHostnameDeleteSettings> configurator)
        {
            return AzureFunctionappConfigHostnameDelete(configurator(new AzureFunctionappConfigHostnameDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Hostname"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigHostnameDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigHostnameDelete(CombinatorialConfigure<AzureFunctionappConfigHostnameDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigHostnameDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameGetExternalIp(AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigHostnameGetExternalIpSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameGetExternalIp(Configure<AzureFunctionappConfigHostnameGetExternalIpSettings> configurator)
        {
            return AzureFunctionappConfigHostnameGetExternalIp(configurator(new AzureFunctionappConfigHostnameGetExternalIpSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigHostnameGetExternalIpSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigHostnameGetExternalIp(CombinatorialConfigure<AzureFunctionappConfigHostnameGetExternalIpSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigHostnameGetExternalIp, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameList(AzureFunctionappConfigHostnameListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigHostnameListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameListSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Verbose"/></li>
        ///     <li><c>--webapp-name</c> via <see cref="AzureFunctionappConfigHostnameListSettings.WebappName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigHostnameList(Configure<AzureFunctionappConfigHostnameListSettings> configurator)
        {
            return AzureFunctionappConfigHostnameList(configurator(new AzureFunctionappConfigHostnameListSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigHostnameListSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigHostnameListSettings.Verbose"/></li>
        ///     <li><c>--webapp-name</c> via <see cref="AzureFunctionappConfigHostnameListSettings.WebappName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigHostnameListSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigHostnameList(CombinatorialConfigure<AzureFunctionappConfigHostnameListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigHostnameList, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslBind(AzureFunctionappConfigSslBindSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigSslBindSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-thumbprint</c> via <see cref="AzureFunctionappConfigSslBindSettings.CertificateThumbprint"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslBindSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslBindSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSslBindSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslBindSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslBindSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslBindSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigSslBindSettings.Slot"/></li>
        ///     <li><c>--ssl-type</c> via <see cref="AzureFunctionappConfigSslBindSettings.SslType"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslBindSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslBindSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslBind(Configure<AzureFunctionappConfigSslBindSettings> configurator)
        {
            return AzureFunctionappConfigSslBind(configurator(new AzureFunctionappConfigSslBindSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-thumbprint</c> via <see cref="AzureFunctionappConfigSslBindSettings.CertificateThumbprint"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslBindSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslBindSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSslBindSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslBindSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslBindSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslBindSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigSslBindSettings.Slot"/></li>
        ///     <li><c>--ssl-type</c> via <see cref="AzureFunctionappConfigSslBindSettings.SslType"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslBindSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslBindSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigSslBindSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigSslBind(CombinatorialConfigure<AzureFunctionappConfigSslBindSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigSslBind, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslDelete(AzureFunctionappConfigSslDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigSslDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-thumbprint</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.CertificateThumbprint"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslDelete(Configure<AzureFunctionappConfigSslDeleteSettings> configurator)
        {
            return AzureFunctionappConfigSslDelete(configurator(new AzureFunctionappConfigSslDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-thumbprint</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.CertificateThumbprint"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigSslDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigSslDelete(CombinatorialConfigure<AzureFunctionappConfigSslDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigSslDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslList(AzureFunctionappConfigSslListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigSslListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslList(Configure<AzureFunctionappConfigSslListSettings> configurator)
        {
            return AzureFunctionappConfigSslList(configurator(new AzureFunctionappConfigSslListSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigSslListSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigSslList(CombinatorialConfigure<AzureFunctionappConfigSslListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigSslList, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslUnbind(AzureFunctionappConfigSslUnbindSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigSslUnbindSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-thumbprint</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.CertificateThumbprint"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslUnbind(Configure<AzureFunctionappConfigSslUnbindSettings> configurator)
        {
            return AzureFunctionappConfigSslUnbind(configurator(new AzureFunctionappConfigSslUnbindSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-thumbprint</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.CertificateThumbprint"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslUnbindSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigSslUnbindSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigSslUnbind(CombinatorialConfigure<AzureFunctionappConfigSslUnbindSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigSslUnbind, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslUpload(AzureFunctionappConfigSslUploadSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappConfigSslUploadSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-file</c> via <see cref="AzureFunctionappConfigSslUploadSettings.CertificateFile"/></li>
        ///     <li><c>--certificate-password</c> via <see cref="AzureFunctionappConfigSslUploadSettings.CertificatePassword"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslUploadSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappConfigSslUpload(Configure<AzureFunctionappConfigSslUploadSettings> configurator)
        {
            return AzureFunctionappConfigSslUpload(configurator(new AzureFunctionappConfigSslUploadSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--certificate-file</c> via <see cref="AzureFunctionappConfigSslUploadSettings.CertificateFile"/></li>
        ///     <li><c>--certificate-password</c> via <see cref="AzureFunctionappConfigSslUploadSettings.CertificatePassword"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappConfigSslUploadSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappConfigSslUploadSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappConfigSslUploadSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappConfigSslUpload(CombinatorialConfigure<AzureFunctionappConfigSslUploadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappConfigSslUpload, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentContainerConfig(AzureFunctionappDeploymentContainerConfigSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentContainerConfigSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Debug"/></li>
        ///     <li><c>--enable-cd</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentContainerConfig(Configure<AzureFunctionappDeploymentContainerConfigSettings> configurator)
        {
            return AzureFunctionappDeploymentContainerConfig(configurator(new AzureFunctionappDeploymentContainerConfigSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Debug"/></li>
        ///     <li><c>--enable-cd</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentContainerConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentContainerConfigSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentContainerConfig(CombinatorialConfigure<AzureFunctionappDeploymentContainerConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentContainerConfig, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentContainerShowCdUrl(AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentContainerShowCdUrlSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentContainerShowCdUrl(Configure<AzureFunctionappDeploymentContainerShowCdUrlSettings> configurator)
        {
            return AzureFunctionappDeploymentContainerShowCdUrl(configurator(new AzureFunctionappDeploymentContainerShowCdUrlSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentContainerShowCdUrlSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentContainerShowCdUrl(CombinatorialConfigure<AzureFunctionappDeploymentContainerShowCdUrlSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentContainerShowCdUrl, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotAutoSwap(AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSlotAutoSwapSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auto-swap-slot</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.AutoSwapSlot"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Debug"/></li>
        ///     <li><c>--disable</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Disable"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotAutoSwap(Configure<AzureFunctionappDeploymentSlotAutoSwapSettings> configurator)
        {
            return AzureFunctionappDeploymentSlotAutoSwap(configurator(new AzureFunctionappDeploymentSlotAutoSwapSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--auto-swap-slot</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.AutoSwapSlot"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Debug"/></li>
        ///     <li><c>--disable</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Disable"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSlotAutoSwapSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSlotAutoSwap(CombinatorialConfigure<AzureFunctionappDeploymentSlotAutoSwapSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSlotAutoSwap, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotCreate(AzureFunctionappDeploymentSlotCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSlotCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--configuration-source</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.ConfigurationSource"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotCreate(Configure<AzureFunctionappDeploymentSlotCreateSettings> configurator)
        {
            return AzureFunctionappDeploymentSlotCreate(configurator(new AzureFunctionappDeploymentSlotCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--configuration-source</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.ConfigurationSource"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSlotCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSlotCreate(CombinatorialConfigure<AzureFunctionappDeploymentSlotCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSlotCreate, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotDelete(AzureFunctionappDeploymentSlotDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSlotDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotDelete(Configure<AzureFunctionappDeploymentSlotDeleteSettings> configurator)
        {
            return AzureFunctionappDeploymentSlotDelete(configurator(new AzureFunctionappDeploymentSlotDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSlotDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSlotDelete(CombinatorialConfigure<AzureFunctionappDeploymentSlotDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSlotDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotList(AzureFunctionappDeploymentSlotListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSlotListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotList(Configure<AzureFunctionappDeploymentSlotListSettings> configurator)
        {
            return AzureFunctionappDeploymentSlotList(configurator(new AzureFunctionappDeploymentSlotListSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSlotListSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSlotList(CombinatorialConfigure<AzureFunctionappDeploymentSlotListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSlotList, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotSwap(AzureFunctionappDeploymentSlotSwapSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSlotSwapSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--action</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Action"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Subscription"/></li>
        ///     <li><c>--target-slot</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.TargetSlot"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSlotSwap(Configure<AzureFunctionappDeploymentSlotSwapSettings> configurator)
        {
            return AzureFunctionappDeploymentSlotSwap(configurator(new AzureFunctionappDeploymentSlotSwapSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--action</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Action"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Subscription"/></li>
        ///     <li><c>--target-slot</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.TargetSlot"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSlotSwapSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSlotSwapSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSlotSwap(CombinatorialConfigure<AzureFunctionappDeploymentSlotSwapSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSlotSwap, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceConfig(AzureFunctionappDeploymentSourceConfigSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceConfigSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--app-working-dir</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.AppWorkingDir"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Branch"/></li>
        ///     <li><c>--cd-account-create</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAccountCreate"/></li>
        ///     <li><c>--cd-app-type</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAppType"/></li>
        ///     <li><c>--cd-project-url</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdProjectUrl"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Debug"/></li>
        ///     <li><c>--git-token</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.GitToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></li>
        ///     <li><c>--manual-integration</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.ManualIntegration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Name"/></li>
        ///     <li><c>--nodejs-task-runner</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.NodejsTaskRunner"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Output"/></li>
        ///     <li><c>--private-repo-password</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoPassword"/></li>
        ///     <li><c>--private-repo-username</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoUsername"/></li>
        ///     <li><c>--python-framework</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonFramework"/></li>
        ///     <li><c>--python-version</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonVersion"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Query"/></li>
        ///     <li><c>--repository-type</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepositoryType"/></li>
        ///     <li><c>--repo-url</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepoUrl"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Slot"/></li>
        ///     <li><c>--slot-swap</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.SlotSwap"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Subscription"/></li>
        ///     <li><c>--test</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Test"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceConfig(Configure<AzureFunctionappDeploymentSourceConfigSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceConfig(configurator(new AzureFunctionappDeploymentSourceConfigSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--app-working-dir</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.AppWorkingDir"/></li>
        ///     <li><c>--branch</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Branch"/></li>
        ///     <li><c>--cd-account-create</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAccountCreate"/></li>
        ///     <li><c>--cd-app-type</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAppType"/></li>
        ///     <li><c>--cd-project-url</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdProjectUrl"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Debug"/></li>
        ///     <li><c>--git-token</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.GitToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></li>
        ///     <li><c>--manual-integration</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.ManualIntegration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Name"/></li>
        ///     <li><c>--nodejs-task-runner</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.NodejsTaskRunner"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Output"/></li>
        ///     <li><c>--private-repo-password</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoPassword"/></li>
        ///     <li><c>--private-repo-username</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoUsername"/></li>
        ///     <li><c>--python-framework</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonFramework"/></li>
        ///     <li><c>--python-version</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonVersion"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Query"/></li>
        ///     <li><c>--repository-type</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepositoryType"/></li>
        ///     <li><c>--repo-url</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepoUrl"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Slot"/></li>
        ///     <li><c>--slot-swap</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.SlotSwap"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Subscription"/></li>
        ///     <li><c>--test</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Test"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceConfigSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceConfig(CombinatorialConfigure<AzureFunctionappDeploymentSourceConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceConfig, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceConfigLocalGit(AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceConfigLocalGitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceConfigLocalGit(Configure<AzureFunctionappDeploymentSourceConfigLocalGitSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceConfigLocalGit(configurator(new AzureFunctionappDeploymentSourceConfigLocalGitSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceConfigLocalGitSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceConfigLocalGit(CombinatorialConfigure<AzureFunctionappDeploymentSourceConfigLocalGitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceConfigLocalGit, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceConfigZip(AzureFunctionappDeploymentSourceConfigZipSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceConfigZipSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Slot"/></li>
        ///     <li><c>--src</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Src"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Timeout"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceConfigZip(Configure<AzureFunctionappDeploymentSourceConfigZipSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceConfigZip(configurator(new AzureFunctionappDeploymentSourceConfigZipSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Slot"/></li>
        ///     <li><c>--src</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Src"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Timeout"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceConfigZipSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceConfigZip(CombinatorialConfigure<AzureFunctionappDeploymentSourceConfigZipSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceConfigZip, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceDelete(AzureFunctionappDeploymentSourceDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceDelete(Configure<AzureFunctionappDeploymentSourceDeleteSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceDelete(configurator(new AzureFunctionappDeploymentSourceDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceDelete(CombinatorialConfigure<AzureFunctionappDeploymentSourceDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceDelete, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceShow(AzureFunctionappDeploymentSourceShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceShow(Configure<AzureFunctionappDeploymentSourceShowSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceShow(configurator(new AzureFunctionappDeploymentSourceShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceShow(CombinatorialConfigure<AzureFunctionappDeploymentSourceShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceSync(AzureFunctionappDeploymentSourceSyncSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceSyncSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceSync(Configure<AzureFunctionappDeploymentSourceSyncSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceSync(configurator(new AzureFunctionappDeploymentSourceSyncSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.ResourceGroup"/></li>
        ///     <li><c>--slot</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Slot"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceSyncSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceSyncSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceSync(CombinatorialConfigure<AzureFunctionappDeploymentSourceSyncSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceSync, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceUpdateToken(AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentSourceUpdateTokenSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Debug"/></li>
        ///     <li><c>--git-token</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.GitToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentSourceUpdateToken(Configure<AzureFunctionappDeploymentSourceUpdateTokenSettings> configurator)
        {
            return AzureFunctionappDeploymentSourceUpdateToken(configurator(new AzureFunctionappDeploymentSourceUpdateTokenSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Debug"/></li>
        ///     <li><c>--git-token</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.GitToken"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentSourceUpdateTokenSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentSourceUpdateToken(CombinatorialConfigure<AzureFunctionappDeploymentSourceUpdateTokenSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentSourceUpdateToken, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentUserSet(AzureFunctionappDeploymentUserSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentUserSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Subscription"/></li>
        ///     <li><c>--user-name</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.UserName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentUserSet(Configure<AzureFunctionappDeploymentUserSetSettings> configurator)
        {
            return AzureFunctionappDeploymentUserSet(configurator(new AzureFunctionappDeploymentUserSetSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Subscription"/></li>
        ///     <li><c>--user-name</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.UserName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentUserSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentUserSetSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentUserSet(CombinatorialConfigure<AzureFunctionappDeploymentUserSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentUserSet, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentUserShow(AzureFunctionappDeploymentUserShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureFunctionappDeploymentUserShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureFunctionappDeploymentUserShow(Configure<AzureFunctionappDeploymentUserShowSettings> configurator)
        {
            return AzureFunctionappDeploymentUserShow(configurator(new AzureFunctionappDeploymentUserShowSettings()));
        }
        /// <summary>
        ///   <p>Manage function apps.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureFunctionappDeploymentUserShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureFunctionappDeploymentUserShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureFunctionappDeploymentUserShow(CombinatorialConfigure<AzureFunctionappDeploymentUserShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureFunctionappDeploymentUserShow, AzureFunctionappLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region AzureFunctionappCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Provide a string value of a Storage Account in the provided Resource Group. Or Resource ID of a Storage Account in a different Resource Group.
        /// </summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary>
        ///   Name of the existing App Insights project to be added to the Function app. Must be in the same resource group.
        /// </summary>
        public virtual string AppInsights { get; internal set; }
        /// <summary>
        ///   Instrumentation key of App Insights to be added.
        /// </summary>
        public virtual string AppInsightsKey { get; internal set; }
        /// <summary>
        ///   Geographic location where Function App will be hosted. Use 'functionapp list-consumption-locations' to view available locations.
        /// </summary>
        public virtual string ConsumptionPlanLocation { get; internal set; }
        /// <summary>
        ///   Linux only. Container image name from Docker Hub, e.g. publisher/image-name:tag.
        /// </summary>
        public virtual string DeploymentContainerImageName { get; internal set; }
        /// <summary>
        ///   Enable local git.
        /// </summary>
        public virtual string DeploymentLocalGit { get; internal set; }
        /// <summary>
        ///   The branch to deploy.
        /// </summary>
        public virtual string DeploymentSourceBranch { get; internal set; }
        /// <summary>
        ///   Git repository URL to link with manual integration.
        /// </summary>
        public virtual string DeploymentSourceUrl { get; internal set; }
        /// <summary>
        ///   Set the OS type for the app to be created.
        /// </summary>
        public virtual FunctionappCreateOsType OsType { get; internal set; }
        /// <summary>
        ///   Name or resource id of the function app service plan. Use 'appservice plan create' to get one.
        /// </summary>
        public virtual string Plan { get; internal set; }
        /// <summary>
        ///   The functions runtime stack.
        /// </summary>
        public virtual FunctionappCreateRuntime Runtime { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--app-insights {value}", AppInsights)
              .Add("--app-insights-key {value}", AppInsightsKey)
              .Add("--consumption-plan-location {value}", ConsumptionPlanLocation)
              .Add("--deployment-container-image-name {value}", DeploymentContainerImageName)
              .Add("--deployment-local-git {value}", DeploymentLocalGit)
              .Add("--deployment-source-branch {value}", DeploymentSourceBranch)
              .Add("--deployment-source-url {value}", DeploymentSourceUrl)
              .Add("--os-type {value}", OsType)
              .Add("--plan {value}", Plan)
              .Add("--runtime {value}", Runtime)
              .Add("--tags {value}", Tags)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp delete")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappListSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappListConsumptionLocationsSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappListConsumptionLocationsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp list-consumption-locations")
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappRestartSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappRestartSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp restart")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp show")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappStartSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappStartSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp start")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappStopSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappStopSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp stop")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name or resource id of the plan to update the functionapp with.
        /// </summary>
        public virtual string Plan { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp update")
              .Add("--plan {value}", Plan)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigSetSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Ensure web app gets loaded all the time, rather unloaded after been idle. Recommended when you have continuous web jobs running.
        /// </summary>
        public virtual bool? AlwaysOn { get; internal set; }
        /// <summary>
        ///   Enable or disable auto heal.
        /// </summary>
        public virtual bool? AutoHealEnabled { get; internal set; }
        /// <summary>
        ///   Set the Ftps state value for an app. Default value is 'AllAllowed'.
        /// </summary>
        public virtual FunctionappConfigSetFtpsState FtpsState { get; internal set; }
        /// <summary>
        ///   Provide site configuration list in a format of either "key=value" pair or "@&lt;json_file&gt;".
        /// </summary>
        public virtual string GenericConfigurations { get; internal set; }
        /// <summary>
        ///   Configures a web site to allow clients to connect over http2.0.
        /// </summary>
        public virtual bool? Http20Enabled { get; internal set; }
        /// <summary>
        ///   The java container, e.g., Tomcat, Jetty.
        /// </summary>
        public virtual string JavaContainer { get; internal set; }
        /// <summary>
        ///   The version of the java container, e.g., '8.0.23' for Tomcat.
        /// </summary>
        public virtual string JavaContainerVersion { get; internal set; }
        /// <summary>
        ///   The version used to run your web app if using Java, e.g., '1.7' for Java 7, '1.8' for Java 8.
        /// </summary>
        public virtual string JavaVersion { get; internal set; }
        /// <summary>
        ///   The runtime stack used for your linux-based webapp, e.g., "RUBY|2.3", "NODE|6.6", "PHP|5.6", "DOTNETCORE|1.1.0". See <a href="https://aka.ms/linux-stacks">https://aka.ms/linux-stacks</a> for more info.
        /// </summary>
        public virtual string LinuxFxVersion { get; internal set; }
        /// <summary>
        ///   The minimum version of TLS required for SSL requests, e.g., '1.0', '1.1', '1.2'.
        /// </summary>
        public virtual string MinTlsVersion { get; internal set; }
        /// <summary>
        ///   The version used to run your web app if using .NET Framework, e.g., 'v4.0' for .NET 4.6 and 'v3.0' for .NET 3.5.
        /// </summary>
        public virtual string NetFrameworkVersion { get; internal set; }
        /// <summary>
        ///   The version used to run your web app if using PHP, e.g., 5.5, 5.6, 7.0.
        /// </summary>
        public virtual string PhpVersion { get; internal set; }
        /// <summary>
        ///   Number of pre-warmed instances a function app has.
        /// </summary>
        public virtual int? PrewarmedInstanceCount { get; internal set; }
        /// <summary>
        ///   The version used to run your web app if using Python, e.g., 2.7, 3.4.
        /// </summary>
        public virtual string PythonVersion { get; internal set; }
        /// <summary>
        ///   Enable or disable remote debugging.
        /// </summary>
        public virtual bool? RemoteDebuggingEnabled { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   The startup file for linux hosted web apps, e.g. 'process.json' for Node.js web.
        /// </summary>
        public virtual string StartupFile { get; internal set; }
        /// <summary>
        ///   Use 32 bits worker process or not.
        /// </summary>
        public virtual bool? Use32bitWorkerProcess { get; internal set; }
        /// <summary>
        ///   Enable or disable web sockets.
        /// </summary>
        public virtual bool? WebSocketsEnabled { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config set")
              .Add("--always-on", AlwaysOn)
              .Add("--auto-heal-enabled", AutoHealEnabled)
              .Add("--ftps-state {value}", FtpsState)
              .Add("--generic-configurations {value}", GenericConfigurations)
              .Add("--http20-enabled", Http20Enabled)
              .Add("--java-container {value}", JavaContainer)
              .Add("--java-container-version {value}", JavaContainerVersion)
              .Add("--java-version {value}", JavaVersion)
              .Add("--linux-fx-version {value}", LinuxFxVersion)
              .Add("--min-tls-version {value}", MinTlsVersion)
              .Add("--net-framework-version {value}", NetFrameworkVersion)
              .Add("--php-version {value}", PhpVersion)
              .Add("--prewarmed-instance-count {value}", PrewarmedInstanceCount)
              .Add("--python-version {value}", PythonVersion)
              .Add("--remote-debugging-enabled", RemoteDebuggingEnabled)
              .Add("--slot {value}", Slot)
              .Add("--startup-file {value}", StartupFile)
              .Add("--use-32bit-worker-process", Use32bitWorkerProcess)
              .Add("--web-sockets-enabled", WebSocketsEnabled)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config show")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappCorsAddSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappCorsAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.
        /// </summary>
        public virtual IReadOnlyList<string> AllowedOrigins => AllowedOriginsInternal.AsReadOnly();
        internal List<string> AllowedOriginsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp cors add")
              .Add("--allowed-origins {value}", AllowedOrigins, separator: ' ')
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappCorsRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappCorsRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.
        /// </summary>
        public virtual IReadOnlyList<string> AllowedOrigins => AllowedOriginsInternal.AsReadOnly();
        internal List<string> AllowedOriginsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp cors remove")
              .Add("--allowed-origins {value}", AllowedOrigins, separator: ' ')
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappCorsShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappCorsShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp cors show")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentListPublishingCredentialsSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentListPublishingCredentialsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment list-publishing-credentials")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentListPublishingProfilesSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentListPublishingProfilesSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment list-publishing-profiles")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDevopsBuildCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDevopsBuildCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   If Azure DevOps repository is not clean, should it overwrite remote content?.
        /// </summary>
        public virtual bool? AllowForcePush { get; internal set; }
        /// <summary>
        ///   Name of the Azure function app that you want to use.
        /// </summary>
        public virtual string FunctionappName { get; internal set; }
        /// <summary>
        ///   Github personal access token for creating pipeline from Github repository.
        /// </summary>
        public virtual string GithubPat { get; internal set; }
        /// <summary>
        ///   Fullname of your Github repository (e.g. Azure/azure-cli).
        /// </summary>
        public virtual string GithubRepository { get; internal set; }
        /// <summary>
        ///   Name of the Azure DevOps organization that you want to use.
        /// </summary>
        public virtual string OrganizationName { get; internal set; }
        /// <summary>
        ///   If you have an existing yaml, should it be overwritten?.
        /// </summary>
        public virtual bool? OverwriteYaml { get; internal set; }
        /// <summary>
        ///   Name of the Azure DevOps project that you want to use.
        /// </summary>
        public virtual string ProjectName { get; internal set; }
        /// <summary>
        ///   Name of the Azure DevOps repository that you want to use.
        /// </summary>
        public virtual string RepositoryName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp devops-build create")
              .Add("--allow-force-push", AllowForcePush)
              .Add("--functionapp-name {value}", FunctionappName)
              .Add("--github-pat {value}", GithubPat)
              .Add("--github-repository {value}", GithubRepository)
              .Add("--organization-name {value}", OrganizationName)
              .Add("--overwrite-yaml", OverwriteYaml)
              .Add("--project-name {value}", ProjectName)
              .Add("--repository-name {value}", RepositoryName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDevopsPipelineCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDevopsPipelineCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   If Azure DevOps repository is not clean, should it overwrite remote content?.
        /// </summary>
        public virtual bool? AllowForcePush { get; internal set; }
        /// <summary>
        ///   Name of the Azure function app that you want to use.
        /// </summary>
        public virtual string FunctionappName { get; internal set; }
        /// <summary>
        ///   Github personal access token for creating pipeline from Github repository.
        /// </summary>
        public virtual string GithubPat { get; internal set; }
        /// <summary>
        ///   Fullname of your Github repository (e.g. Azure/azure-cli).
        /// </summary>
        public virtual string GithubRepository { get; internal set; }
        /// <summary>
        ///   Name of the Azure DevOps organization that you want to use.
        /// </summary>
        public virtual string OrganizationName { get; internal set; }
        /// <summary>
        ///   If you have an existing yaml, should it be overwritten?.
        /// </summary>
        public virtual bool? OverwriteYaml { get; internal set; }
        /// <summary>
        ///   Name of the Azure DevOps project that you want to use.
        /// </summary>
        public virtual string ProjectName { get; internal set; }
        /// <summary>
        ///   Name of the Azure DevOps repository that you want to use.
        /// </summary>
        public virtual string RepositoryName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp devops-pipeline create")
              .Add("--allow-force-push", AllowForcePush)
              .Add("--functionapp-name {value}", FunctionappName)
              .Add("--github-pat {value}", GithubPat)
              .Add("--github-repository {value}", GithubRepository)
              .Add("--organization-name {value}", OrganizationName)
              .Add("--overwrite-yaml", OverwriteYaml)
              .Add("--project-name {value}", ProjectName)
              .Add("--repository-name {value}", RepositoryName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappIdentityAssignSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappIdentityAssignSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Role name or id the managed identity will be assigned.
        /// </summary>
        public virtual string Role { get; internal set; }
        /// <summary>
        ///   The scope the managed identity has access to.
        /// </summary>
        public virtual string Scope { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp identity assign")
              .Add("--role {value}", Role)
              .Add("--scope {value}", Scope)
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappIdentityRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappIdentityRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp identity remove")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappIdentityShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappIdentityShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp identity show")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappPlanCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappPlanCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the app service plan.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The SKU of the app service plan.
        /// </summary>
        public virtual string Sku { get; internal set; }
        /// <summary>
        ///   Host function app on Linux worker.
        /// </summary>
        public virtual bool? IsLinux { get; internal set; }
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   The maximum number of elastic workers for the plan.
        /// </summary>
        public virtual int? MaxBurst { get; internal set; }
        /// <summary>
        ///   The number of workers for the app service plan.
        /// </summary>
        public virtual string MinInstances { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp plan create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--sku {value}", Sku)
              .Add("--is-linux", IsLinux)
              .Add("--location {value}", Location)
              .Add("--max-burst {value}", MaxBurst)
              .Add("--min-instances {value}", MinInstances)
              .Add("--tags {value}", Tags)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappPlanDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappPlanDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual string Yes { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the app service plan.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp plan delete")
              .Add("--yes {value}", Yes)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappPlanListSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappPlanListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp plan list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappPlanShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappPlanShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the app service plan.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp plan show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappPlanUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappPlanUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The maximum number of elastic workers for the plan.
        /// </summary>
        public virtual int? MaxBurst { get; internal set; }
        /// <summary>
        ///   The number of workers for the app service plan.
        /// </summary>
        public virtual string MinInstances { get; internal set; }
        /// <summary>
        ///   The SKU of the app service plan.
        /// </summary>
        public virtual string Sku { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the app service plan.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp plan update")
              .Add("--max-burst {value}", MaxBurst)
              .Add("--min-instances {value}", MinInstances)
              .Add("--sku {value}", Sku)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigAppsettingsDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigAppsettingsDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Space-separated app setting names.
        /// </summary>
        public virtual IReadOnlyList<string> SettingNames => SettingNamesInternal.AsReadOnly();
        internal List<string> SettingNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config appsettings delete")
              .Add("--setting-names {value}", SettingNames, separator: ' ')
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigAppsettingsListSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigAppsettingsListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of the web app. You can configure the default using 'az configure --defaults web=&lt;name&gt;'.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config appsettings list")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--slot {value}", Slot)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigAppsettingsSetSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigAppsettingsSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Space-separated app settings in a format of &lt;name&gt;=&lt;value&gt;.
        /// </summary>
        public virtual IReadOnlyDictionary<string, object> Settings => SettingsInternal.AsReadOnly();
        internal Dictionary<string, object> SettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Space-separated slot app settings in a format of &lt;name&gt;=&lt;value&gt;.
        /// </summary>
        public virtual IReadOnlyDictionary<string, object> SlotSettings => SlotSettingsInternal.AsReadOnly();
        internal Dictionary<string, object> SlotSettingsInternal { get; set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config appsettings set")
              .Add("--settings {value}", Settings, "{key}={value}", separator: ' ')
              .Add("--slot {value}", Slot)
              .Add("--slot-settings {value}", SlotSettings, "{key}={value}", separator: ' ')
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigContainerDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigContainerDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config container delete")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigContainerSetSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigContainerSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The container custom image name and optionally the tag name.
        /// </summary>
        public virtual string DockerCustomImageName { get; internal set; }
        /// <summary>
        ///   The container registry server password.
        /// </summary>
        public virtual string DockerRegistryServerPassword { get; internal set; }
        /// <summary>
        ///   The container registry server url.
        /// </summary>
        public virtual string DockerRegistryServerUrl { get; internal set; }
        /// <summary>
        ///   The container registry server username.
        /// </summary>
        public virtual string DockerRegistryServerUser { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config container set")
              .Add("--docker-custom-image-name {value}", DockerCustomImageName)
              .Add("--docker-registry-server-password {value}", DockerRegistryServerPassword, secret: true)
              .Add("--docker-registry-server-url {value}", DockerRegistryServerUrl)
              .Add("--docker-registry-server-user {value}", DockerRegistryServerUser)
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigContainerShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigContainerShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config container show")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigHostnameAddSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigHostnameAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Hostname assigned to the site, such as custom domains.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config hostname add")
              .Add("--slot {value}", Slot)
              .Add("--hostname {value}", Hostname)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigHostnameDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigHostnameDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Hostname assigned to the site, such as custom domains.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config hostname delete")
              .Add("--slot {value}", Slot)
              .Add("--hostname {value}", Hostname)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigHostnameGetExternalIpSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigHostnameGetExternalIpSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config hostname get-external-ip")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigHostnameListSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigHostnameListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name of the web app. You can configure the default using 'az configure --defaults web=&lt;name&gt;'.
        /// </summary>
        public virtual string WebappName { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config hostname list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--webapp-name {value}", WebappName)
              .Add("--slot {value}", Slot)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigSslBindSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigSslBindSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The ssl cert thumbprint.
        /// </summary>
        public virtual string CertificateThumbprint { get; internal set; }
        /// <summary>
        ///   The ssl cert type.
        /// </summary>
        public virtual FunctionappConfigSslBindSslType SslType { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config ssl bind")
              .Add("--certificate-thumbprint {value}", CertificateThumbprint)
              .Add("--ssl-type {value}", SslType)
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigSslDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigSslDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The ssl cert thumbprint.
        /// </summary>
        public virtual string CertificateThumbprint { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config ssl delete")
              .Add("--certificate-thumbprint {value}", CertificateThumbprint)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigSslListSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigSslListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config ssl list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigSslUnbindSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigSslUnbindSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The ssl cert thumbprint.
        /// </summary>
        public virtual string CertificateThumbprint { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config ssl unbind")
              .Add("--certificate-thumbprint {value}", CertificateThumbprint)
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappConfigSslUploadSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappConfigSslUploadSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The filepath for the .pfx file.
        /// </summary>
        public virtual string CertificateFile { get; internal set; }
        /// <summary>
        ///   The ssl cert password.
        /// </summary>
        public virtual string CertificatePassword { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp config ssl upload")
              .Add("--certificate-file {value}", CertificateFile)
              .Add("--certificate-password {value}", CertificatePassword, secret: true)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentContainerConfigSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentContainerConfigSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Enable/disable continuous deployment.
        /// </summary>
        public virtual bool? EnableCd { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment container config")
              .Add("--enable-cd", EnableCd)
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentContainerShowCdUrlSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentContainerShowCdUrlSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment container show-cd-url")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSlotAutoSwapSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSlotAutoSwapSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Target slot to auto swap.
        /// </summary>
        public virtual string AutoSwapSlot { get; internal set; }
        /// <summary>
        ///   Disable auto swap.
        /// </summary>
        public virtual string Disable { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment slot auto-swap")
              .Add("--slot {value}", Slot)
              .Add("--auto-swap-slot {value}", AutoSwapSlot)
              .Add("--disable {value}", Disable)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSlotCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSlotCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The name of the slot.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Source slot to clone configurations from. Use function app's name to refer to the production slot.
        /// </summary>
        public virtual string ConfigurationSource { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment slot create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--slot {value}", Slot)
              .Add("--configuration-source {value}", ConfigurationSource)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSlotDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSlotDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment slot delete")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSlotListSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSlotListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment slot list")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSlotSwapSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSlotSwapSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Swap types. use 'preview' to apply target slot's settings on the source slot first; use 'swap' to complete it; use 'reset' to reset the swap.
        /// </summary>
        public virtual FunctionappDeploymentSlotSwapAction Action { get; internal set; }
        /// <summary>
        ///   Target slot to swap, default to 'production'.
        /// </summary>
        public virtual string TargetSlot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment slot swap")
              .Add("--slot {value}", Slot)
              .Add("--action {value}", Action)
              .Add("--target-slot {value}", TargetSlot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceConfigSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceConfigSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Repository url to pull the latest source from, e.g. <a href="https://github.com/foo/foo-web">https://github.com/foo/foo-web</a>.
        /// </summary>
        public virtual string RepoUrl { get; internal set; }
        /// <summary>
        ///   The branch name of the repository.
        /// </summary>
        public virtual string Branch { get; internal set; }
        /// <summary>
        ///   Git access token required for auto sync.
        /// </summary>
        public virtual string GitToken { get; internal set; }
        /// <summary>
        ///   Disable automatic sync between source control and web.
        /// </summary>
        public virtual string ManualIntegration { get; internal set; }
        /// <summary>
        ///   Repository type.
        /// </summary>
        public virtual FunctionappDeploymentSourceConfigRepositoryType RepositoryType { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Working directory of the application. Default will be root of the repo.
        /// </summary>
        public virtual string AppWorkingDir { get; internal set; }
        /// <summary>
        ///   To create a new Visual Studio Team Services (VSTS) account if it doesn't exist already.
        /// </summary>
        public virtual string CdAccountCreate { get; internal set; }
        /// <summary>
        ///   Web application framework you used to develop your app. Default is AspNet.
        /// </summary>
        public virtual FunctionappDeploymentSourceConfigCdAppType CdAppType { get; internal set; }
        /// <summary>
        ///   URL of the Visual Studio Team Services (VSTS) project to use for continuous delivery. URL should be in format https://&amp;lt;accountname&amp;gt;.visualstudio.com/&amp;lt;projectname&amp;gt;.
        /// </summary>
        public virtual string CdProjectUrl { get; internal set; }
        /// <summary>
        ///   Task runner for nodejs. Default is None.
        /// </summary>
        public virtual FunctionappDeploymentSourceConfigNodejsTaskRunner NodejsTaskRunner { get; internal set; }
        /// <summary>
        ///   Password for the private repository.
        /// </summary>
        public virtual string PrivateRepoPassword { get; internal set; }
        /// <summary>
        ///   Username for the private repository.
        /// </summary>
        public virtual string PrivateRepoUsername { get; internal set; }
        /// <summary>
        ///   Framework used for Python application. Default is Django.
        /// </summary>
        public virtual FunctionappDeploymentSourceConfigPythonFramework PythonFramework { get; internal set; }
        /// <summary>
        ///   Python version used for application. Default is Python 3.5.3 x86.
        /// </summary>
        public virtual FunctionappDeploymentSourceConfigPythonVersion PythonVersion { get; internal set; }
        /// <summary>
        ///   Name of the slot to be used for deployment and later promote to production. If slot is not available, it will be created. Default: Not configured.
        /// </summary>
        public virtual string SlotSwap { get; internal set; }
        /// <summary>
        ///   Name of the web app to be used for load testing. If web app is not available, it will be created. Default: Disable.
        /// </summary>
        public virtual string Test { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source config")
              .Add("--repo-url {value}", RepoUrl)
              .Add("--branch {value}", Branch)
              .Add("--git-token {value}", GitToken)
              .Add("--manual-integration {value}", ManualIntegration)
              .Add("--repository-type {value}", RepositoryType)
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--app-working-dir {value}", AppWorkingDir)
              .Add("--cd-account-create {value}", CdAccountCreate)
              .Add("--cd-app-type {value}", CdAppType)
              .Add("--cd-project-url {value}", CdProjectUrl)
              .Add("--nodejs-task-runner {value}", NodejsTaskRunner)
              .Add("--private-repo-password {value}", PrivateRepoPassword, secret: true)
              .Add("--private-repo-username {value}", PrivateRepoUsername)
              .Add("--python-framework {value}", PythonFramework)
              .Add("--python-version {value}", PythonVersion)
              .Add("--slot-swap {value}", SlotSwap)
              .Add("--test {value}", Test)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceConfigLocalGitSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceConfigLocalGitSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source config-local-git")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceConfigZipSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceConfigZipSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   A zip file path for deployment.
        /// </summary>
        public virtual string Src { get; internal set; }
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   Configurable timeout in seconds for checking the status of deployment.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source config-zip")
              .Add("--src {value}", Src)
              .Add("--slot {value}", Slot)
              .Add("--timeout {value}", Timeout)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source delete")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source show")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceSyncSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceSyncSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   The name of the slot. Default to the productions slot if not specified.
        /// </summary>
        public virtual string Slot { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the function app.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source sync")
              .Add("--slot {value}", Slot)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentSourceUpdateTokenSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentSourceUpdateTokenSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Git access token required for auto sync.
        /// </summary>
        public virtual string GitToken { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment source update-token")
              .Add("--git-token {value}", GitToken)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentUserSetSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentUserSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   User name.
        /// </summary>
        public virtual string UserName { get; internal set; }
        /// <summary>
        ///   Password, will prompt if not specified.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment user set")
              .Add("--user-name {value}", UserName)
              .Add("--password {value}", Password, secret: true)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappDeploymentUserShowSettings
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureFunctionappDeploymentUserShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureFunctionapp executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureFunctionappTasks.AzureFunctionappPath;
        public override Action<OutputType, string> CustomLogger => AzureFunctionappTasks.AzureFunctionappLogger;
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("functionapp deployment user show")
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureFunctionappCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetName(this AzureFunctionappCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetName(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetResourceGroup(this AzureFunctionappCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetResourceGroup(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.StorageAccount"/></em></p>
        ///   <p>Provide a string value of a Storage Account in the provided Resource Group. Or Resource ID of a Storage Account in a different Resource Group.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetStorageAccount(this AzureFunctionappCreateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.StorageAccount"/></em></p>
        ///   <p>Provide a string value of a Storage Account in the provided Resource Group. Or Resource ID of a Storage Account in a different Resource Group.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetStorageAccount(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region AppInsights
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.AppInsights"/></em></p>
        ///   <p>Name of the existing App Insights project to be added to the Function app. Must be in the same resource group.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetAppInsights(this AzureFunctionappCreateSettings toolSettings, string appInsights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AppInsights = appInsights;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.AppInsights"/></em></p>
        ///   <p>Name of the existing App Insights project to be added to the Function app. Must be in the same resource group.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetAppInsights(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AppInsights = null;
            return toolSettings;
        }
        #endregion
        #region AppInsightsKey
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.AppInsightsKey"/></em></p>
        ///   <p>Instrumentation key of App Insights to be added.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetAppInsightsKey(this AzureFunctionappCreateSettings toolSettings, string appInsightsKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AppInsightsKey = appInsightsKey;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.AppInsightsKey"/></em></p>
        ///   <p>Instrumentation key of App Insights to be added.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetAppInsightsKey(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AppInsightsKey = null;
            return toolSettings;
        }
        #endregion
        #region ConsumptionPlanLocation
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.ConsumptionPlanLocation"/></em></p>
        ///   <p>Geographic location where Function App will be hosted. Use 'functionapp list-consumption-locations' to view available locations.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetConsumptionPlanLocation(this AzureFunctionappCreateSettings toolSettings, string consumptionPlanLocation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConsumptionPlanLocation = consumptionPlanLocation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.ConsumptionPlanLocation"/></em></p>
        ///   <p>Geographic location where Function App will be hosted. Use 'functionapp list-consumption-locations' to view available locations.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetConsumptionPlanLocation(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConsumptionPlanLocation = null;
            return toolSettings;
        }
        #endregion
        #region DeploymentContainerImageName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.DeploymentContainerImageName"/></em></p>
        ///   <p>Linux only. Container image name from Docker Hub, e.g. publisher/image-name:tag.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetDeploymentContainerImageName(this AzureFunctionappCreateSettings toolSettings, string deploymentContainerImageName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentContainerImageName = deploymentContainerImageName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.DeploymentContainerImageName"/></em></p>
        ///   <p>Linux only. Container image name from Docker Hub, e.g. publisher/image-name:tag.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetDeploymentContainerImageName(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentContainerImageName = null;
            return toolSettings;
        }
        #endregion
        #region DeploymentLocalGit
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.DeploymentLocalGit"/></em></p>
        ///   <p>Enable local git.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetDeploymentLocalGit(this AzureFunctionappCreateSettings toolSettings, string deploymentLocalGit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentLocalGit = deploymentLocalGit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.DeploymentLocalGit"/></em></p>
        ///   <p>Enable local git.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetDeploymentLocalGit(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentLocalGit = null;
            return toolSettings;
        }
        #endregion
        #region DeploymentSourceBranch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.DeploymentSourceBranch"/></em></p>
        ///   <p>The branch to deploy.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetDeploymentSourceBranch(this AzureFunctionappCreateSettings toolSettings, string deploymentSourceBranch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentSourceBranch = deploymentSourceBranch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.DeploymentSourceBranch"/></em></p>
        ///   <p>The branch to deploy.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetDeploymentSourceBranch(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentSourceBranch = null;
            return toolSettings;
        }
        #endregion
        #region DeploymentSourceUrl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.DeploymentSourceUrl"/></em></p>
        ///   <p>Git repository URL to link with manual integration.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetDeploymentSourceUrl(this AzureFunctionappCreateSettings toolSettings, string deploymentSourceUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentSourceUrl = deploymentSourceUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.DeploymentSourceUrl"/></em></p>
        ///   <p>Git repository URL to link with manual integration.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetDeploymentSourceUrl(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeploymentSourceUrl = null;
            return toolSettings;
        }
        #endregion
        #region OsType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.OsType"/></em></p>
        ///   <p>Set the OS type for the app to be created.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetOsType(this AzureFunctionappCreateSettings toolSettings, FunctionappCreateOsType osType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsType = osType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.OsType"/></em></p>
        ///   <p>Set the OS type for the app to be created.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetOsType(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsType = null;
            return toolSettings;
        }
        #endregion
        #region Plan
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Plan"/></em></p>
        ///   <p>Name or resource id of the function app service plan. Use 'appservice plan create' to get one.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetPlan(this AzureFunctionappCreateSettings toolSettings, string plan)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plan = plan;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Plan"/></em></p>
        ///   <p>Name or resource id of the function app service plan. Use 'appservice plan create' to get one.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetPlan(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plan = null;
            return toolSettings;
        }
        #endregion
        #region Runtime
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Runtime"/></em></p>
        ///   <p>The functions runtime stack.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetRuntime(this AzureFunctionappCreateSettings toolSettings, FunctionappCreateRuntime runtime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = runtime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Runtime"/></em></p>
        ///   <p>The functions runtime stack.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetRuntime(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetTags(this AzureFunctionappCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetTags(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetSubscription(this AzureFunctionappCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetSubscription(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetDebug(this AzureFunctionappCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetDebug(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetHelp(this AzureFunctionappCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetHelp(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetOutput(this AzureFunctionappCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetOutput(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetQuery(this AzureFunctionappCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetQuery(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings SetVerbose(this AzureFunctionappCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCreateSettings ResetVerbose(this AzureFunctionappCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeleteSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetSlot(this AzureFunctionappDeleteSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetSlot(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetIds(this AzureFunctionappDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetIds(this AzureFunctionappDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings AddIds(this AzureFunctionappDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings AddIds(this AzureFunctionappDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ClearIds(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings RemoveIds(this AzureFunctionappDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings RemoveIds(this AzureFunctionappDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetName(this AzureFunctionappDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetName(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetResourceGroup(this AzureFunctionappDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetResourceGroup(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetSubscription(this AzureFunctionappDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetSubscription(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetDebug(this AzureFunctionappDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetDebug(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetHelp(this AzureFunctionappDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetHelp(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetOutput(this AzureFunctionappDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetOutput(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetQuery(this AzureFunctionappDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetQuery(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings SetVerbose(this AzureFunctionappDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeleteSettings ResetVerbose(this AzureFunctionappDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetResourceGroup(this AzureFunctionappListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetResourceGroup(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetSubscription(this AzureFunctionappListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetSubscription(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetDebug(this AzureFunctionappListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetDebug(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetHelp(this AzureFunctionappListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetHelp(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetOutput(this AzureFunctionappListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetOutput(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetQuery(this AzureFunctionappListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetQuery(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings SetVerbose(this AzureFunctionappListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListSettings ResetVerbose(this AzureFunctionappListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappListConsumptionLocationsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappListConsumptionLocationsSettingsExtensions
    {
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListConsumptionLocationsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings SetSubscription(this AzureFunctionappListConsumptionLocationsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListConsumptionLocationsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings ResetSubscription(this AzureFunctionappListConsumptionLocationsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListConsumptionLocationsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings SetDebug(this AzureFunctionappListConsumptionLocationsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListConsumptionLocationsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings ResetDebug(this AzureFunctionappListConsumptionLocationsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListConsumptionLocationsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings SetHelp(this AzureFunctionappListConsumptionLocationsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListConsumptionLocationsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings ResetHelp(this AzureFunctionappListConsumptionLocationsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListConsumptionLocationsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings SetOutput(this AzureFunctionappListConsumptionLocationsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListConsumptionLocationsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings ResetOutput(this AzureFunctionappListConsumptionLocationsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListConsumptionLocationsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings SetQuery(this AzureFunctionappListConsumptionLocationsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListConsumptionLocationsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings ResetQuery(this AzureFunctionappListConsumptionLocationsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappListConsumptionLocationsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings SetVerbose(this AzureFunctionappListConsumptionLocationsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappListConsumptionLocationsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappListConsumptionLocationsSettings ResetVerbose(this AzureFunctionappListConsumptionLocationsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappRestartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappRestartSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetSlot(this AzureFunctionappRestartSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetSlot(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetIds(this AzureFunctionappRestartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetIds(this AzureFunctionappRestartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappRestartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings AddIds(this AzureFunctionappRestartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappRestartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings AddIds(this AzureFunctionappRestartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappRestartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ClearIds(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappRestartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings RemoveIds(this AzureFunctionappRestartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappRestartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings RemoveIds(this AzureFunctionappRestartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetName(this AzureFunctionappRestartSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetName(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetResourceGroup(this AzureFunctionappRestartSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetResourceGroup(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetSubscription(this AzureFunctionappRestartSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetSubscription(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetDebug(this AzureFunctionappRestartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetDebug(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetHelp(this AzureFunctionappRestartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetHelp(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetOutput(this AzureFunctionappRestartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetOutput(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetQuery(this AzureFunctionappRestartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetQuery(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappRestartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings SetVerbose(this AzureFunctionappRestartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappRestartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappRestartSettings ResetVerbose(this AzureFunctionappRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappShowSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetSlot(this AzureFunctionappShowSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetSlot(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetIds(this AzureFunctionappShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetIds(this AzureFunctionappShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings AddIds(this AzureFunctionappShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings AddIds(this AzureFunctionappShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ClearIds(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings RemoveIds(this AzureFunctionappShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings RemoveIds(this AzureFunctionappShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetName(this AzureFunctionappShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetName(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetResourceGroup(this AzureFunctionappShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetResourceGroup(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetSubscription(this AzureFunctionappShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetSubscription(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetDebug(this AzureFunctionappShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetDebug(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetHelp(this AzureFunctionappShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetHelp(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetOutput(this AzureFunctionappShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetOutput(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetQuery(this AzureFunctionappShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetQuery(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings SetVerbose(this AzureFunctionappShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappShowSettings ResetVerbose(this AzureFunctionappShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappStartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappStartSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetSlot(this AzureFunctionappStartSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetSlot(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetIds(this AzureFunctionappStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetIds(this AzureFunctionappStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings AddIds(this AzureFunctionappStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings AddIds(this AzureFunctionappStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ClearIds(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings RemoveIds(this AzureFunctionappStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings RemoveIds(this AzureFunctionappStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetName(this AzureFunctionappStartSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetName(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetResourceGroup(this AzureFunctionappStartSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetResourceGroup(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetSubscription(this AzureFunctionappStartSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetSubscription(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetDebug(this AzureFunctionappStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetDebug(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetHelp(this AzureFunctionappStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetHelp(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetOutput(this AzureFunctionappStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetOutput(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetQuery(this AzureFunctionappStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetQuery(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings SetVerbose(this AzureFunctionappStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStartSettings ResetVerbose(this AzureFunctionappStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappStopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappStopSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetSlot(this AzureFunctionappStopSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetSlot(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetIds(this AzureFunctionappStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetIds(this AzureFunctionappStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings AddIds(this AzureFunctionappStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings AddIds(this AzureFunctionappStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ClearIds(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings RemoveIds(this AzureFunctionappStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings RemoveIds(this AzureFunctionappStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetName(this AzureFunctionappStopSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetName(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetResourceGroup(this AzureFunctionappStopSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetResourceGroup(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetSubscription(this AzureFunctionappStopSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetSubscription(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetDebug(this AzureFunctionappStopSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetDebug(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetHelp(this AzureFunctionappStopSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetHelp(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetOutput(this AzureFunctionappStopSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetOutput(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetQuery(this AzureFunctionappStopSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetQuery(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappStopSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings SetVerbose(this AzureFunctionappStopSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappStopSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappStopSettings ResetVerbose(this AzureFunctionappStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappUpdateSettingsExtensions
    {
        #region Plan
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Plan"/></em></p>
        ///   <p>The name or resource id of the plan to update the functionapp with.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetPlan(this AzureFunctionappUpdateSettings toolSettings, string plan)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plan = plan;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Plan"/></em></p>
        ///   <p>The name or resource id of the plan to update the functionapp with.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetPlan(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plan = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetIds(this AzureFunctionappUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetIds(this AzureFunctionappUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings AddIds(this AzureFunctionappUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings AddIds(this AzureFunctionappUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ClearIds(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings RemoveIds(this AzureFunctionappUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings RemoveIds(this AzureFunctionappUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetName(this AzureFunctionappUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetName(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetResourceGroup(this AzureFunctionappUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetResourceGroup(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetSubscription(this AzureFunctionappUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetSubscription(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetAdd(this AzureFunctionappUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetAdd(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetForceString(this AzureFunctionappUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetForceString(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetRemove(this AzureFunctionappUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetRemove(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetSet(this AzureFunctionappUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetSet(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetDebug(this AzureFunctionappUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetDebug(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetHelp(this AzureFunctionappUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetHelp(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetOutput(this AzureFunctionappUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetOutput(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetQuery(this AzureFunctionappUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetQuery(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings SetVerbose(this AzureFunctionappUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappUpdateSettings ResetVerbose(this AzureFunctionappUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigSetSettingsExtensions
    {
        #region AlwaysOn
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></em></p>
        ///   <p>Ensure web app gets loaded all the time, rather unloaded after been idle. Recommended when you have continuous web jobs running.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetAlwaysOn(this AzureFunctionappConfigSetSettings toolSettings, bool? alwaysOn)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlwaysOn = alwaysOn;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></em></p>
        ///   <p>Ensure web app gets loaded all the time, rather unloaded after been idle. Recommended when you have continuous web jobs running.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetAlwaysOn(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlwaysOn = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></em></p>
        ///   <p>Ensure web app gets loaded all the time, rather unloaded after been idle. Recommended when you have continuous web jobs running.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings EnableAlwaysOn(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlwaysOn = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></em></p>
        ///   <p>Ensure web app gets loaded all the time, rather unloaded after been idle. Recommended when you have continuous web jobs running.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings DisableAlwaysOn(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlwaysOn = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappConfigSetSettings.AlwaysOn"/></em></p>
        ///   <p>Ensure web app gets loaded all the time, rather unloaded after been idle. Recommended when you have continuous web jobs running.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ToggleAlwaysOn(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlwaysOn = !toolSettings.AlwaysOn;
            return toolSettings;
        }
        #endregion
        #region AutoHealEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></em></p>
        ///   <p>Enable or disable auto heal.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetAutoHealEnabled(this AzureFunctionappConfigSetSettings toolSettings, bool? autoHealEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoHealEnabled = autoHealEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></em></p>
        ///   <p>Enable or disable auto heal.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetAutoHealEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoHealEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></em></p>
        ///   <p>Enable or disable auto heal.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings EnableAutoHealEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoHealEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></em></p>
        ///   <p>Enable or disable auto heal.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings DisableAutoHealEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoHealEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappConfigSetSettings.AutoHealEnabled"/></em></p>
        ///   <p>Enable or disable auto heal.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ToggleAutoHealEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoHealEnabled = !toolSettings.AutoHealEnabled;
            return toolSettings;
        }
        #endregion
        #region FtpsState
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.FtpsState"/></em></p>
        ///   <p>Set the Ftps state value for an app. Default value is 'AllAllowed'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetFtpsState(this AzureFunctionappConfigSetSettings toolSettings, FunctionappConfigSetFtpsState ftpsState)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FtpsState = ftpsState;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.FtpsState"/></em></p>
        ///   <p>Set the Ftps state value for an app. Default value is 'AllAllowed'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetFtpsState(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FtpsState = null;
            return toolSettings;
        }
        #endregion
        #region GenericConfigurations
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.GenericConfigurations"/></em></p>
        ///   <p>Provide site configuration list in a format of either "key=value" pair or "@&lt;json_file&gt;".</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetGenericConfigurations(this AzureFunctionappConfigSetSettings toolSettings, string genericConfigurations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericConfigurations = genericConfigurations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.GenericConfigurations"/></em></p>
        ///   <p>Provide site configuration list in a format of either "key=value" pair or "@&lt;json_file&gt;".</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetGenericConfigurations(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericConfigurations = null;
            return toolSettings;
        }
        #endregion
        #region Http20Enabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></em></p>
        ///   <p>Configures a web site to allow clients to connect over http2.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetHttp20Enabled(this AzureFunctionappConfigSetSettings toolSettings, bool? http20Enabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Http20Enabled = http20Enabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></em></p>
        ///   <p>Configures a web site to allow clients to connect over http2.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetHttp20Enabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Http20Enabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></em></p>
        ///   <p>Configures a web site to allow clients to connect over http2.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings EnableHttp20Enabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Http20Enabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></em></p>
        ///   <p>Configures a web site to allow clients to connect over http2.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings DisableHttp20Enabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Http20Enabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappConfigSetSettings.Http20Enabled"/></em></p>
        ///   <p>Configures a web site to allow clients to connect over http2.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ToggleHttp20Enabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Http20Enabled = !toolSettings.Http20Enabled;
            return toolSettings;
        }
        #endregion
        #region JavaContainer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.JavaContainer"/></em></p>
        ///   <p>The java container, e.g., Tomcat, Jetty.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetJavaContainer(this AzureFunctionappConfigSetSettings toolSettings, string javaContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JavaContainer = javaContainer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.JavaContainer"/></em></p>
        ///   <p>The java container, e.g., Tomcat, Jetty.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetJavaContainer(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JavaContainer = null;
            return toolSettings;
        }
        #endregion
        #region JavaContainerVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.JavaContainerVersion"/></em></p>
        ///   <p>The version of the java container, e.g., '8.0.23' for Tomcat.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetJavaContainerVersion(this AzureFunctionappConfigSetSettings toolSettings, string javaContainerVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JavaContainerVersion = javaContainerVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.JavaContainerVersion"/></em></p>
        ///   <p>The version of the java container, e.g., '8.0.23' for Tomcat.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetJavaContainerVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JavaContainerVersion = null;
            return toolSettings;
        }
        #endregion
        #region JavaVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.JavaVersion"/></em></p>
        ///   <p>The version used to run your web app if using Java, e.g., '1.7' for Java 7, '1.8' for Java 8.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetJavaVersion(this AzureFunctionappConfigSetSettings toolSettings, string javaVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JavaVersion = javaVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.JavaVersion"/></em></p>
        ///   <p>The version used to run your web app if using Java, e.g., '1.7' for Java 7, '1.8' for Java 8.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetJavaVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JavaVersion = null;
            return toolSettings;
        }
        #endregion
        #region LinuxFxVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.LinuxFxVersion"/></em></p>
        ///   <p>The runtime stack used for your linux-based webapp, e.g., "RUBY|2.3", "NODE|6.6", "PHP|5.6", "DOTNETCORE|1.1.0". See <a href="https://aka.ms/linux-stacks">https://aka.ms/linux-stacks</a> for more info.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetLinuxFxVersion(this AzureFunctionappConfigSetSettings toolSettings, string linuxFxVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinuxFxVersion = linuxFxVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.LinuxFxVersion"/></em></p>
        ///   <p>The runtime stack used for your linux-based webapp, e.g., "RUBY|2.3", "NODE|6.6", "PHP|5.6", "DOTNETCORE|1.1.0". See <a href="https://aka.ms/linux-stacks">https://aka.ms/linux-stacks</a> for more info.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetLinuxFxVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinuxFxVersion = null;
            return toolSettings;
        }
        #endregion
        #region MinTlsVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.MinTlsVersion"/></em></p>
        ///   <p>The minimum version of TLS required for SSL requests, e.g., '1.0', '1.1', '1.2'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetMinTlsVersion(this AzureFunctionappConfigSetSettings toolSettings, string minTlsVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinTlsVersion = minTlsVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.MinTlsVersion"/></em></p>
        ///   <p>The minimum version of TLS required for SSL requests, e.g., '1.0', '1.1', '1.2'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetMinTlsVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinTlsVersion = null;
            return toolSettings;
        }
        #endregion
        #region NetFrameworkVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.NetFrameworkVersion"/></em></p>
        ///   <p>The version used to run your web app if using .NET Framework, e.g., 'v4.0' for .NET 4.6 and 'v3.0' for .NET 3.5.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetNetFrameworkVersion(this AzureFunctionappConfigSetSettings toolSettings, string netFrameworkVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetFrameworkVersion = netFrameworkVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.NetFrameworkVersion"/></em></p>
        ///   <p>The version used to run your web app if using .NET Framework, e.g., 'v4.0' for .NET 4.6 and 'v3.0' for .NET 3.5.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetNetFrameworkVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetFrameworkVersion = null;
            return toolSettings;
        }
        #endregion
        #region PhpVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.PhpVersion"/></em></p>
        ///   <p>The version used to run your web app if using PHP, e.g., 5.5, 5.6, 7.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetPhpVersion(this AzureFunctionappConfigSetSettings toolSettings, string phpVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PhpVersion = phpVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.PhpVersion"/></em></p>
        ///   <p>The version used to run your web app if using PHP, e.g., 5.5, 5.6, 7.0.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetPhpVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PhpVersion = null;
            return toolSettings;
        }
        #endregion
        #region PrewarmedInstanceCount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.PrewarmedInstanceCount"/></em></p>
        ///   <p>Number of pre-warmed instances a function app has.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetPrewarmedInstanceCount(this AzureFunctionappConfigSetSettings toolSettings, int? prewarmedInstanceCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrewarmedInstanceCount = prewarmedInstanceCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.PrewarmedInstanceCount"/></em></p>
        ///   <p>Number of pre-warmed instances a function app has.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetPrewarmedInstanceCount(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrewarmedInstanceCount = null;
            return toolSettings;
        }
        #endregion
        #region PythonVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.PythonVersion"/></em></p>
        ///   <p>The version used to run your web app if using Python, e.g., 2.7, 3.4.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetPythonVersion(this AzureFunctionappConfigSetSettings toolSettings, string pythonVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PythonVersion = pythonVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.PythonVersion"/></em></p>
        ///   <p>The version used to run your web app if using Python, e.g., 2.7, 3.4.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetPythonVersion(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PythonVersion = null;
            return toolSettings;
        }
        #endregion
        #region RemoteDebuggingEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></em></p>
        ///   <p>Enable or disable remote debugging.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetRemoteDebuggingEnabled(this AzureFunctionappConfigSetSettings toolSettings, bool? remoteDebuggingEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteDebuggingEnabled = remoteDebuggingEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></em></p>
        ///   <p>Enable or disable remote debugging.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetRemoteDebuggingEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteDebuggingEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></em></p>
        ///   <p>Enable or disable remote debugging.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings EnableRemoteDebuggingEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteDebuggingEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></em></p>
        ///   <p>Enable or disable remote debugging.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings DisableRemoteDebuggingEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteDebuggingEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappConfigSetSettings.RemoteDebuggingEnabled"/></em></p>
        ///   <p>Enable or disable remote debugging.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ToggleRemoteDebuggingEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoteDebuggingEnabled = !toolSettings.RemoteDebuggingEnabled;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetSlot(this AzureFunctionappConfigSetSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetSlot(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region StartupFile
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.StartupFile"/></em></p>
        ///   <p>The startup file for linux hosted web apps, e.g. 'process.json' for Node.js web.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetStartupFile(this AzureFunctionappConfigSetSettings toolSettings, string startupFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartupFile = startupFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.StartupFile"/></em></p>
        ///   <p>The startup file for linux hosted web apps, e.g. 'process.json' for Node.js web.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetStartupFile(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartupFile = null;
            return toolSettings;
        }
        #endregion
        #region Use32bitWorkerProcess
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></em></p>
        ///   <p>Use 32 bits worker process or not.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetUse32bitWorkerProcess(this AzureFunctionappConfigSetSettings toolSettings, bool? use32bitWorkerProcess)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Use32bitWorkerProcess = use32bitWorkerProcess;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></em></p>
        ///   <p>Use 32 bits worker process or not.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetUse32bitWorkerProcess(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Use32bitWorkerProcess = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></em></p>
        ///   <p>Use 32 bits worker process or not.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings EnableUse32bitWorkerProcess(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Use32bitWorkerProcess = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></em></p>
        ///   <p>Use 32 bits worker process or not.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings DisableUse32bitWorkerProcess(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Use32bitWorkerProcess = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappConfigSetSettings.Use32bitWorkerProcess"/></em></p>
        ///   <p>Use 32 bits worker process or not.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ToggleUse32bitWorkerProcess(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Use32bitWorkerProcess = !toolSettings.Use32bitWorkerProcess;
            return toolSettings;
        }
        #endregion
        #region WebSocketsEnabled
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></em></p>
        ///   <p>Enable or disable web sockets.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetWebSocketsEnabled(this AzureFunctionappConfigSetSettings toolSettings, bool? webSocketsEnabled)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebSocketsEnabled = webSocketsEnabled;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></em></p>
        ///   <p>Enable or disable web sockets.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetWebSocketsEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebSocketsEnabled = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></em></p>
        ///   <p>Enable or disable web sockets.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings EnableWebSocketsEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebSocketsEnabled = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></em></p>
        ///   <p>Enable or disable web sockets.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings DisableWebSocketsEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebSocketsEnabled = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappConfigSetSettings.WebSocketsEnabled"/></em></p>
        ///   <p>Enable or disable web sockets.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ToggleWebSocketsEnabled(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebSocketsEnabled = !toolSettings.WebSocketsEnabled;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetIds(this AzureFunctionappConfigSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetIds(this AzureFunctionappConfigSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings AddIds(this AzureFunctionappConfigSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings AddIds(this AzureFunctionappConfigSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ClearIds(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings RemoveIds(this AzureFunctionappConfigSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings RemoveIds(this AzureFunctionappConfigSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetName(this AzureFunctionappConfigSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetName(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetResourceGroup(this AzureFunctionappConfigSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetResourceGroup(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetSubscription(this AzureFunctionappConfigSetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetSubscription(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetDebug(this AzureFunctionappConfigSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetDebug(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetHelp(this AzureFunctionappConfigSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetHelp(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetOutput(this AzureFunctionappConfigSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetOutput(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetQuery(this AzureFunctionappConfigSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetQuery(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings SetVerbose(this AzureFunctionappConfigSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSetSettings ResetVerbose(this AzureFunctionappConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigShowSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetSlot(this AzureFunctionappConfigShowSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetSlot(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetIds(this AzureFunctionappConfigShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetIds(this AzureFunctionappConfigShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings AddIds(this AzureFunctionappConfigShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings AddIds(this AzureFunctionappConfigShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ClearIds(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings RemoveIds(this AzureFunctionappConfigShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings RemoveIds(this AzureFunctionappConfigShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetName(this AzureFunctionappConfigShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetName(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetResourceGroup(this AzureFunctionappConfigShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetResourceGroup(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetSubscription(this AzureFunctionappConfigShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetSubscription(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetDebug(this AzureFunctionappConfigShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetDebug(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetHelp(this AzureFunctionappConfigShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetHelp(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetOutput(this AzureFunctionappConfigShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetOutput(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetQuery(this AzureFunctionappConfigShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetQuery(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings SetVerbose(this AzureFunctionappConfigShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigShowSettings ResetVerbose(this AzureFunctionappConfigShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappCorsAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappCorsAddSettingsExtensions
    {
        #region AllowedOrigins
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/> to a new list</em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings, params string[] allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal = allowedOrigins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/> to a new list</em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings, IEnumerable<string> allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal = allowedOrigins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings AddAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings, params string[] allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal.AddRange(allowedOrigins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings AddAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings, IEnumerable<string> allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal.AddRange(allowedOrigins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ClearAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings RemoveAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings, params string[] allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(allowedOrigins);
            toolSettings.AllowedOriginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsAddSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings RemoveAllowedOrigins(this AzureFunctionappCorsAddSettings toolSettings, IEnumerable<string> allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(allowedOrigins);
            toolSettings.AllowedOriginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetSlot(this AzureFunctionappCorsAddSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetSlot(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetIds(this AzureFunctionappCorsAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetIds(this AzureFunctionappCorsAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings AddIds(this AzureFunctionappCorsAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings AddIds(this AzureFunctionappCorsAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappCorsAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ClearIds(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings RemoveIds(this AzureFunctionappCorsAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings RemoveIds(this AzureFunctionappCorsAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetName(this AzureFunctionappCorsAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetName(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetResourceGroup(this AzureFunctionappCorsAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetResourceGroup(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetSubscription(this AzureFunctionappCorsAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetSubscription(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetDebug(this AzureFunctionappCorsAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetDebug(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetHelp(this AzureFunctionappCorsAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetHelp(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetOutput(this AzureFunctionappCorsAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetOutput(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetQuery(this AzureFunctionappCorsAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetQuery(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings SetVerbose(this AzureFunctionappCorsAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsAddSettings ResetVerbose(this AzureFunctionappCorsAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappCorsRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappCorsRemoveSettingsExtensions
    {
        #region AllowedOrigins
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/> to a new list</em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings, params string[] allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal = allowedOrigins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/> to a new list</em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings, IEnumerable<string> allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal = allowedOrigins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings AddAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings, params string[] allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal.AddRange(allowedOrigins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings AddAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings, IEnumerable<string> allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal.AddRange(allowedOrigins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ClearAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowedOriginsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings RemoveAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings, params string[] allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(allowedOrigins);
            toolSettings.AllowedOriginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsRemoveSettings.AllowedOrigins"/></em></p>
        ///   <p>Space separated origins that should be allowed to make cross-origin calls (for example: <a href="http://example.com:12345">http://example.com:12345</a>). To allow all, use "*" and remove all other origins from the list.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings RemoveAllowedOrigins(this AzureFunctionappCorsRemoveSettings toolSettings, IEnumerable<string> allowedOrigins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(allowedOrigins);
            toolSettings.AllowedOriginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetSlot(this AzureFunctionappCorsRemoveSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetSlot(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetIds(this AzureFunctionappCorsRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetIds(this AzureFunctionappCorsRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings AddIds(this AzureFunctionappCorsRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings AddIds(this AzureFunctionappCorsRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ClearIds(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings RemoveIds(this AzureFunctionappCorsRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings RemoveIds(this AzureFunctionappCorsRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetName(this AzureFunctionappCorsRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetName(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetResourceGroup(this AzureFunctionappCorsRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetResourceGroup(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetSubscription(this AzureFunctionappCorsRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetSubscription(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetDebug(this AzureFunctionappCorsRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetDebug(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetHelp(this AzureFunctionappCorsRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetHelp(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetOutput(this AzureFunctionappCorsRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetOutput(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetQuery(this AzureFunctionappCorsRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetQuery(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings SetVerbose(this AzureFunctionappCorsRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsRemoveSettings ResetVerbose(this AzureFunctionappCorsRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappCorsShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappCorsShowSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetSlot(this AzureFunctionappCorsShowSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetSlot(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetIds(this AzureFunctionappCorsShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetIds(this AzureFunctionappCorsShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings AddIds(this AzureFunctionappCorsShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappCorsShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings AddIds(this AzureFunctionappCorsShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappCorsShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ClearIds(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings RemoveIds(this AzureFunctionappCorsShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappCorsShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings RemoveIds(this AzureFunctionappCorsShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetName(this AzureFunctionappCorsShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetName(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetResourceGroup(this AzureFunctionappCorsShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetResourceGroup(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetSubscription(this AzureFunctionappCorsShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetSubscription(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetDebug(this AzureFunctionappCorsShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetDebug(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetHelp(this AzureFunctionappCorsShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetHelp(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetOutput(this AzureFunctionappCorsShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetOutput(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetQuery(this AzureFunctionappCorsShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetQuery(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappCorsShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings SetVerbose(this AzureFunctionappCorsShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappCorsShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappCorsShowSettings ResetVerbose(this AzureFunctionappCorsShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentListPublishingCredentialsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentListPublishingCredentialsSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetSlot(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetSlot(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings AddIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings AddIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ClearIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings RemoveIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings RemoveIds(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetName(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetName(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetResourceGroup(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetResourceGroup(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetSubscription(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetSubscription(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetDebug(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetDebug(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetHelp(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetHelp(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetOutput(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetOutput(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetQuery(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetQuery(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings SetVerbose(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingCredentialsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingCredentialsSettings ResetVerbose(this AzureFunctionappDeploymentListPublishingCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentListPublishingProfilesSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentListPublishingProfilesSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetSlot(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetSlot(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings AddIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings AddIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ClearIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings RemoveIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings RemoveIds(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetName(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetName(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetResourceGroup(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetResourceGroup(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetSubscription(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetSubscription(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetDebug(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetDebug(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetHelp(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetHelp(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetOutput(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetOutput(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetQuery(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetQuery(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings SetVerbose(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentListPublishingProfilesSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentListPublishingProfilesSettings ResetVerbose(this AzureFunctionappDeploymentListPublishingProfilesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDevopsBuildCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDevopsBuildCreateSettingsExtensions
    {
        #region AllowForcePush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetAllowForcePush(this AzureFunctionappDevopsBuildCreateSettings toolSettings, bool? allowForcePush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = allowForcePush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetAllowForcePush(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings EnableAllowForcePush(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings DisableAllowForcePush(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappDevopsBuildCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ToggleAllowForcePush(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = !toolSettings.AllowForcePush;
            return toolSettings;
        }
        #endregion
        #region FunctionappName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.FunctionappName"/></em></p>
        ///   <p>Name of the Azure function app that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetFunctionappName(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string functionappName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FunctionappName = functionappName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.FunctionappName"/></em></p>
        ///   <p>Name of the Azure function app that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetFunctionappName(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FunctionappName = null;
            return toolSettings;
        }
        #endregion
        #region GithubPat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubPat"/></em></p>
        ///   <p>Github personal access token for creating pipeline from Github repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetGithubPat(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string githubPat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubPat = githubPat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubPat"/></em></p>
        ///   <p>Github personal access token for creating pipeline from Github repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetGithubPat(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubPat = null;
            return toolSettings;
        }
        #endregion
        #region GithubRepository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubRepository"/></em></p>
        ///   <p>Fullname of your Github repository (e.g. Azure/azure-cli).</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetGithubRepository(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string githubRepository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubRepository = githubRepository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.GithubRepository"/></em></p>
        ///   <p>Fullname of your Github repository (e.g. Azure/azure-cli).</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetGithubRepository(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubRepository = null;
            return toolSettings;
        }
        #endregion
        #region OrganizationName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.OrganizationName"/></em></p>
        ///   <p>Name of the Azure DevOps organization that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetOrganizationName(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string organizationName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OrganizationName = organizationName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.OrganizationName"/></em></p>
        ///   <p>Name of the Azure DevOps organization that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetOrganizationName(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OrganizationName = null;
            return toolSettings;
        }
        #endregion
        #region OverwriteYaml
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetOverwriteYaml(this AzureFunctionappDevopsBuildCreateSettings toolSettings, bool? overwriteYaml)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = overwriteYaml;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetOverwriteYaml(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings EnableOverwriteYaml(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings DisableOverwriteYaml(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappDevopsBuildCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ToggleOverwriteYaml(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = !toolSettings.OverwriteYaml;
            return toolSettings;
        }
        #endregion
        #region ProjectName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.ProjectName"/></em></p>
        ///   <p>Name of the Azure DevOps project that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetProjectName(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string projectName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProjectName = projectName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.ProjectName"/></em></p>
        ///   <p>Name of the Azure DevOps project that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetProjectName(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProjectName = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.RepositoryName"/></em></p>
        ///   <p>Name of the Azure DevOps repository that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetRepositoryName(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string repositoryName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryName = repositoryName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.RepositoryName"/></em></p>
        ///   <p>Name of the Azure DevOps repository that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetRepositoryName(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetSubscription(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetSubscription(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetDebug(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetDebug(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetHelp(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetHelp(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetOutput(this AzureFunctionappDevopsBuildCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetOutput(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetQuery(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetQuery(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsBuildCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings SetVerbose(this AzureFunctionappDevopsBuildCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsBuildCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsBuildCreateSettings ResetVerbose(this AzureFunctionappDevopsBuildCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDevopsPipelineCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDevopsPipelineCreateSettingsExtensions
    {
        #region AllowForcePush
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetAllowForcePush(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, bool? allowForcePush)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = allowForcePush;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetAllowForcePush(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings EnableAllowForcePush(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings DisableAllowForcePush(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappDevopsPipelineCreateSettings.AllowForcePush"/></em></p>
        ///   <p>If Azure DevOps repository is not clean, should it overwrite remote content?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ToggleAllowForcePush(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowForcePush = !toolSettings.AllowForcePush;
            return toolSettings;
        }
        #endregion
        #region FunctionappName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.FunctionappName"/></em></p>
        ///   <p>Name of the Azure function app that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetFunctionappName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string functionappName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FunctionappName = functionappName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.FunctionappName"/></em></p>
        ///   <p>Name of the Azure function app that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetFunctionappName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FunctionappName = null;
            return toolSettings;
        }
        #endregion
        #region GithubPat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubPat"/></em></p>
        ///   <p>Github personal access token for creating pipeline from Github repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetGithubPat(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string githubPat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubPat = githubPat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubPat"/></em></p>
        ///   <p>Github personal access token for creating pipeline from Github repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetGithubPat(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubPat = null;
            return toolSettings;
        }
        #endregion
        #region GithubRepository
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubRepository"/></em></p>
        ///   <p>Fullname of your Github repository (e.g. Azure/azure-cli).</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetGithubRepository(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string githubRepository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubRepository = githubRepository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.GithubRepository"/></em></p>
        ///   <p>Fullname of your Github repository (e.g. Azure/azure-cli).</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetGithubRepository(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GithubRepository = null;
            return toolSettings;
        }
        #endregion
        #region OrganizationName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.OrganizationName"/></em></p>
        ///   <p>Name of the Azure DevOps organization that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetOrganizationName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string organizationName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OrganizationName = organizationName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.OrganizationName"/></em></p>
        ///   <p>Name of the Azure DevOps organization that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetOrganizationName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OrganizationName = null;
            return toolSettings;
        }
        #endregion
        #region OverwriteYaml
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetOverwriteYaml(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, bool? overwriteYaml)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = overwriteYaml;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetOverwriteYaml(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings EnableOverwriteYaml(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings DisableOverwriteYaml(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappDevopsPipelineCreateSettings.OverwriteYaml"/></em></p>
        ///   <p>If you have an existing yaml, should it be overwritten?.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ToggleOverwriteYaml(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OverwriteYaml = !toolSettings.OverwriteYaml;
            return toolSettings;
        }
        #endregion
        #region ProjectName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.ProjectName"/></em></p>
        ///   <p>Name of the Azure DevOps project that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetProjectName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string projectName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProjectName = projectName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.ProjectName"/></em></p>
        ///   <p>Name of the Azure DevOps project that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetProjectName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProjectName = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.RepositoryName"/></em></p>
        ///   <p>Name of the Azure DevOps repository that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetRepositoryName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string repositoryName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryName = repositoryName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.RepositoryName"/></em></p>
        ///   <p>Name of the Azure DevOps repository that you want to use.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetRepositoryName(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetSubscription(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetSubscription(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetDebug(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetDebug(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetHelp(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetHelp(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetOutput(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetOutput(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetQuery(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetQuery(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings SetVerbose(this AzureFunctionappDevopsPipelineCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDevopsPipelineCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDevopsPipelineCreateSettings ResetVerbose(this AzureFunctionappDevopsPipelineCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappIdentityAssignSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappIdentityAssignSettingsExtensions
    {
        #region Role
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Role"/></em></p>
        ///   <p>Role name or id the managed identity will be assigned.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetRole(this AzureFunctionappIdentityAssignSettings toolSettings, string role)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = role;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Role"/></em></p>
        ///   <p>Role name or id the managed identity will be assigned.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetRole(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = null;
            return toolSettings;
        }
        #endregion
        #region Scope
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Scope"/></em></p>
        ///   <p>The scope the managed identity has access to.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetScope(this AzureFunctionappIdentityAssignSettings toolSettings, string scope)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = scope;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Scope"/></em></p>
        ///   <p>The scope the managed identity has access to.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetScope(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetSlot(this AzureFunctionappIdentityAssignSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetSlot(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetIds(this AzureFunctionappIdentityAssignSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetIds(this AzureFunctionappIdentityAssignSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings AddIds(this AzureFunctionappIdentityAssignSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings AddIds(this AzureFunctionappIdentityAssignSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ClearIds(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings RemoveIds(this AzureFunctionappIdentityAssignSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappIdentityAssignSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings RemoveIds(this AzureFunctionappIdentityAssignSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetName(this AzureFunctionappIdentityAssignSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetName(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetResourceGroup(this AzureFunctionappIdentityAssignSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetResourceGroup(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetSubscription(this AzureFunctionappIdentityAssignSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetSubscription(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetDebug(this AzureFunctionappIdentityAssignSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetDebug(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetHelp(this AzureFunctionappIdentityAssignSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetHelp(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetOutput(this AzureFunctionappIdentityAssignSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetOutput(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetQuery(this AzureFunctionappIdentityAssignSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetQuery(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityAssignSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings SetVerbose(this AzureFunctionappIdentityAssignSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityAssignSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityAssignSettings ResetVerbose(this AzureFunctionappIdentityAssignSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappIdentityRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappIdentityRemoveSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetSlot(this AzureFunctionappIdentityRemoveSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetSlot(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetIds(this AzureFunctionappIdentityRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetIds(this AzureFunctionappIdentityRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings AddIds(this AzureFunctionappIdentityRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings AddIds(this AzureFunctionappIdentityRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ClearIds(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings RemoveIds(this AzureFunctionappIdentityRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappIdentityRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings RemoveIds(this AzureFunctionappIdentityRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetName(this AzureFunctionappIdentityRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetName(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetResourceGroup(this AzureFunctionappIdentityRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetResourceGroup(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetSubscription(this AzureFunctionappIdentityRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetSubscription(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetDebug(this AzureFunctionappIdentityRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetDebug(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetHelp(this AzureFunctionappIdentityRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetHelp(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetOutput(this AzureFunctionappIdentityRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetOutput(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetQuery(this AzureFunctionappIdentityRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetQuery(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings SetVerbose(this AzureFunctionappIdentityRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityRemoveSettings ResetVerbose(this AzureFunctionappIdentityRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappIdentityShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappIdentityShowSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetSlot(this AzureFunctionappIdentityShowSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetSlot(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetIds(this AzureFunctionappIdentityShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetIds(this AzureFunctionappIdentityShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappIdentityShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings AddIds(this AzureFunctionappIdentityShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappIdentityShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings AddIds(this AzureFunctionappIdentityShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappIdentityShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ClearIds(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappIdentityShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings RemoveIds(this AzureFunctionappIdentityShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappIdentityShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings RemoveIds(this AzureFunctionappIdentityShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetName(this AzureFunctionappIdentityShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetName(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetResourceGroup(this AzureFunctionappIdentityShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetResourceGroup(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetSubscription(this AzureFunctionappIdentityShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetSubscription(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetDebug(this AzureFunctionappIdentityShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetDebug(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetHelp(this AzureFunctionappIdentityShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetHelp(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetOutput(this AzureFunctionappIdentityShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetOutput(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetQuery(this AzureFunctionappIdentityShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetQuery(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappIdentityShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings SetVerbose(this AzureFunctionappIdentityShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappIdentityShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappIdentityShowSettings ResetVerbose(this AzureFunctionappIdentityShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappPlanCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappPlanCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetName(this AzureFunctionappPlanCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetName(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetResourceGroup(this AzureFunctionappPlanCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetResourceGroup(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Sku"/></em></p>
        ///   <p>The SKU of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetSku(this AzureFunctionappPlanCreateSettings toolSettings, string sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Sku"/></em></p>
        ///   <p>The SKU of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetSku(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region IsLinux
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></em></p>
        ///   <p>Host function app on Linux worker.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetIsLinux(this AzureFunctionappPlanCreateSettings toolSettings, bool? isLinux)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsLinux = isLinux;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></em></p>
        ///   <p>Host function app on Linux worker.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetIsLinux(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsLinux = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></em></p>
        ///   <p>Host function app on Linux worker.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings EnableIsLinux(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsLinux = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></em></p>
        ///   <p>Host function app on Linux worker.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings DisableIsLinux(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsLinux = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappPlanCreateSettings.IsLinux"/></em></p>
        ///   <p>Host function app on Linux worker.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ToggleIsLinux(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IsLinux = !toolSettings.IsLinux;
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetLocation(this AzureFunctionappPlanCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetLocation(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region MaxBurst
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.MaxBurst"/></em></p>
        ///   <p>The maximum number of elastic workers for the plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetMaxBurst(this AzureFunctionappPlanCreateSettings toolSettings, int? maxBurst)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxBurst = maxBurst;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.MaxBurst"/></em></p>
        ///   <p>The maximum number of elastic workers for the plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetMaxBurst(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxBurst = null;
            return toolSettings;
        }
        #endregion
        #region MinInstances
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.MinInstances"/></em></p>
        ///   <p>The number of workers for the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetMinInstances(this AzureFunctionappPlanCreateSettings toolSettings, string minInstances)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinInstances = minInstances;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.MinInstances"/></em></p>
        ///   <p>The number of workers for the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetMinInstances(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinInstances = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetTags(this AzureFunctionappPlanCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetTags(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetSubscription(this AzureFunctionappPlanCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetSubscription(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetDebug(this AzureFunctionappPlanCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetDebug(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetHelp(this AzureFunctionappPlanCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetHelp(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetOutput(this AzureFunctionappPlanCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetOutput(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetQuery(this AzureFunctionappPlanCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetQuery(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings SetVerbose(this AzureFunctionappPlanCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanCreateSettings ResetVerbose(this AzureFunctionappPlanCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappPlanDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappPlanDeleteSettingsExtensions
    {
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetYes(this AzureFunctionappPlanDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetYes(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetIds(this AzureFunctionappPlanDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetIds(this AzureFunctionappPlanDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings AddIds(this AzureFunctionappPlanDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings AddIds(this AzureFunctionappPlanDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ClearIds(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings RemoveIds(this AzureFunctionappPlanDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappPlanDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings RemoveIds(this AzureFunctionappPlanDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetName(this AzureFunctionappPlanDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetName(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetResourceGroup(this AzureFunctionappPlanDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetResourceGroup(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetSubscription(this AzureFunctionappPlanDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetSubscription(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetDebug(this AzureFunctionappPlanDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetDebug(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetHelp(this AzureFunctionappPlanDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetHelp(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetOutput(this AzureFunctionappPlanDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetOutput(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetQuery(this AzureFunctionappPlanDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetQuery(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings SetVerbose(this AzureFunctionappPlanDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanDeleteSettings ResetVerbose(this AzureFunctionappPlanDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappPlanListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappPlanListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetResourceGroup(this AzureFunctionappPlanListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetResourceGroup(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetSubscription(this AzureFunctionappPlanListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetSubscription(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetDebug(this AzureFunctionappPlanListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetDebug(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetHelp(this AzureFunctionappPlanListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetHelp(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetOutput(this AzureFunctionappPlanListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetOutput(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetQuery(this AzureFunctionappPlanListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetQuery(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings SetVerbose(this AzureFunctionappPlanListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanListSettings ResetVerbose(this AzureFunctionappPlanListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappPlanShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappPlanShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetIds(this AzureFunctionappPlanShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetIds(this AzureFunctionappPlanShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappPlanShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings AddIds(this AzureFunctionappPlanShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappPlanShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings AddIds(this AzureFunctionappPlanShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappPlanShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ClearIds(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappPlanShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings RemoveIds(this AzureFunctionappPlanShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappPlanShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings RemoveIds(this AzureFunctionappPlanShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetName(this AzureFunctionappPlanShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetName(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetResourceGroup(this AzureFunctionappPlanShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetResourceGroup(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetSubscription(this AzureFunctionappPlanShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetSubscription(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetDebug(this AzureFunctionappPlanShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetDebug(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetHelp(this AzureFunctionappPlanShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetHelp(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetOutput(this AzureFunctionappPlanShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetOutput(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetQuery(this AzureFunctionappPlanShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetQuery(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings SetVerbose(this AzureFunctionappPlanShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanShowSettings ResetVerbose(this AzureFunctionappPlanShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappPlanUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappPlanUpdateSettingsExtensions
    {
        #region MaxBurst
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.MaxBurst"/></em></p>
        ///   <p>The maximum number of elastic workers for the plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetMaxBurst(this AzureFunctionappPlanUpdateSettings toolSettings, int? maxBurst)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxBurst = maxBurst;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.MaxBurst"/></em></p>
        ///   <p>The maximum number of elastic workers for the plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetMaxBurst(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxBurst = null;
            return toolSettings;
        }
        #endregion
        #region MinInstances
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.MinInstances"/></em></p>
        ///   <p>The number of workers for the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetMinInstances(this AzureFunctionappPlanUpdateSettings toolSettings, string minInstances)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinInstances = minInstances;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.MinInstances"/></em></p>
        ///   <p>The number of workers for the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetMinInstances(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MinInstances = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Sku"/></em></p>
        ///   <p>The SKU of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetSku(this AzureFunctionappPlanUpdateSettings toolSettings, string sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Sku"/></em></p>
        ///   <p>The SKU of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetSku(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetIds(this AzureFunctionappPlanUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetIds(this AzureFunctionappPlanUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings AddIds(this AzureFunctionappPlanUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings AddIds(this AzureFunctionappPlanUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ClearIds(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings RemoveIds(this AzureFunctionappPlanUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappPlanUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings RemoveIds(this AzureFunctionappPlanUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetName(this AzureFunctionappPlanUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Name"/></em></p>
        ///   <p>The name of the app service plan.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetName(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetResourceGroup(this AzureFunctionappPlanUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetResourceGroup(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetSubscription(this AzureFunctionappPlanUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetSubscription(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetAdd(this AzureFunctionappPlanUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetAdd(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetForceString(this AzureFunctionappPlanUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetForceString(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetRemove(this AzureFunctionappPlanUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetRemove(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetSet(this AzureFunctionappPlanUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetSet(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetDebug(this AzureFunctionappPlanUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetDebug(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetHelp(this AzureFunctionappPlanUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetHelp(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetOutput(this AzureFunctionappPlanUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetOutput(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetQuery(this AzureFunctionappPlanUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetQuery(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappPlanUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings SetVerbose(this AzureFunctionappPlanUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappPlanUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappPlanUpdateSettings ResetVerbose(this AzureFunctionappPlanUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigAppsettingsDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigAppsettingsDeleteSettingsExtensions
    {
        #region SettingNames
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/> to a new list</em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, params string[] settingNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingNamesInternal = settingNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/> to a new list</em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, IEnumerable<string> settingNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingNamesInternal = settingNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings AddSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, params string[] settingNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingNamesInternal.AddRange(settingNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings AddSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, IEnumerable<string> settingNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingNamesInternal.AddRange(settingNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ClearSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings RemoveSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, params string[] settingNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(settingNames);
            toolSettings.SettingNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.SettingNames"/></em></p>
        ///   <p>Space-separated app setting names.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings RemoveSettingNames(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, IEnumerable<string> settingNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(settingNames);
            toolSettings.SettingNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetSlot(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetSlot(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings AddIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings AddIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ClearIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings RemoveIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings RemoveIds(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetName(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetName(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetResourceGroup(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetResourceGroup(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetSubscription(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetSubscription(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetDebug(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetDebug(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetHelp(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetHelp(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetOutput(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetOutput(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetQuery(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetQuery(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings SetVerbose(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsDeleteSettings ResetVerbose(this AzureFunctionappConfigAppsettingsDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigAppsettingsListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigAppsettingsListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Name"/></em></p>
        ///   <p>Name of the web app. You can configure the default using 'az configure --defaults web=&lt;name&gt;'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetName(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Name"/></em></p>
        ///   <p>Name of the web app. You can configure the default using 'az configure --defaults web=&lt;name&gt;'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetName(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetResourceGroup(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetResourceGroup(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetSlot(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetSlot(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetSubscription(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetSubscription(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetDebug(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetDebug(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetHelp(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetHelp(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetOutput(this AzureFunctionappConfigAppsettingsListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetOutput(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetQuery(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetQuery(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings SetVerbose(this AzureFunctionappConfigAppsettingsListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsListSettings ResetVerbose(this AzureFunctionappConfigAppsettingsListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigAppsettingsSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigAppsettingsSetSettingsExtensions
    {
        #region Settings
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/> to a new dictionary</em></p>
        ///   <p>Space-separated app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetSettings(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, IDictionary<string, object> settings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingsInternal = settings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/></em></p>
        ///   <p>Space-separated app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ClearSettings(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/></em></p>
        ///   <p>Space-separated app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings AddSetting(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string settingKey, object settingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingsInternal.Add(settingKey, settingValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/></em></p>
        ///   <p>Space-separated app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings RemoveSetting(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string settingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingsInternal.Remove(settingKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="AzureFunctionappConfigAppsettingsSetSettings.Settings"/></em></p>
        ///   <p>Space-separated app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetSetting(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string settingKey, object settingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SettingsInternal[settingKey] = settingValue;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetSlot(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetSlot(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region SlotSettings
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/> to a new dictionary</em></p>
        ///   <p>Space-separated slot app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetSlotSettings(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, IDictionary<string, object> slotSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSettingsInternal = slotSettings.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/></em></p>
        ///   <p>Space-separated slot app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ClearSlotSettings(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSettingsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/></em></p>
        ///   <p>Space-separated slot app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings AddSlotSetting(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string slotSettingKey, object slotSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSettingsInternal.Add(slotSettingKey, slotSettingValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/></em></p>
        ///   <p>Space-separated slot app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings RemoveSlotSetting(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string slotSettingKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSettingsInternal.Remove(slotSettingKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="AzureFunctionappConfigAppsettingsSetSettings.SlotSettings"/></em></p>
        ///   <p>Space-separated slot app settings in a format of &lt;name&gt;=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetSlotSetting(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string slotSettingKey, object slotSettingValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSettingsInternal[slotSettingKey] = slotSettingValue;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings AddIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings AddIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ClearIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings RemoveIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigAppsettingsSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings RemoveIds(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetName(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetName(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetResourceGroup(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetResourceGroup(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetSubscription(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetSubscription(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetDebug(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetDebug(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetHelp(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetHelp(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetOutput(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetOutput(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetQuery(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetQuery(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings SetVerbose(this AzureFunctionappConfigAppsettingsSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigAppsettingsSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigAppsettingsSetSettings ResetVerbose(this AzureFunctionappConfigAppsettingsSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigContainerDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigContainerDeleteSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetSlot(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetSlot(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings AddIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings AddIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ClearIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings RemoveIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigContainerDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings RemoveIds(this AzureFunctionappConfigContainerDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetName(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetName(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetResourceGroup(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetResourceGroup(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetSubscription(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetSubscription(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetDebug(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetDebug(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetHelp(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetHelp(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetOutput(this AzureFunctionappConfigContainerDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetOutput(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetQuery(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetQuery(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings SetVerbose(this AzureFunctionappConfigContainerDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerDeleteSettings ResetVerbose(this AzureFunctionappConfigContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigContainerSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigContainerSetSettingsExtensions
    {
        #region DockerCustomImageName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.DockerCustomImageName"/></em></p>
        ///   <p>The container custom image name and optionally the tag name.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetDockerCustomImageName(this AzureFunctionappConfigContainerSetSettings toolSettings, string dockerCustomImageName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerCustomImageName = dockerCustomImageName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.DockerCustomImageName"/></em></p>
        ///   <p>The container custom image name and optionally the tag name.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetDockerCustomImageName(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerCustomImageName = null;
            return toolSettings;
        }
        #endregion
        #region DockerRegistryServerPassword
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerPassword"/></em></p>
        ///   <p>The container registry server password.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetDockerRegistryServerPassword(this AzureFunctionappConfigContainerSetSettings toolSettings, string dockerRegistryServerPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerRegistryServerPassword = dockerRegistryServerPassword;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerPassword"/></em></p>
        ///   <p>The container registry server password.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetDockerRegistryServerPassword(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerRegistryServerPassword = null;
            return toolSettings;
        }
        #endregion
        #region DockerRegistryServerUrl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUrl"/></em></p>
        ///   <p>The container registry server url.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetDockerRegistryServerUrl(this AzureFunctionappConfigContainerSetSettings toolSettings, string dockerRegistryServerUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerRegistryServerUrl = dockerRegistryServerUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUrl"/></em></p>
        ///   <p>The container registry server url.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetDockerRegistryServerUrl(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerRegistryServerUrl = null;
            return toolSettings;
        }
        #endregion
        #region DockerRegistryServerUser
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUser"/></em></p>
        ///   <p>The container registry server username.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetDockerRegistryServerUser(this AzureFunctionappConfigContainerSetSettings toolSettings, string dockerRegistryServerUser)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerRegistryServerUser = dockerRegistryServerUser;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.DockerRegistryServerUser"/></em></p>
        ///   <p>The container registry server username.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetDockerRegistryServerUser(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DockerRegistryServerUser = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetSlot(this AzureFunctionappConfigContainerSetSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetSlot(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetIds(this AzureFunctionappConfigContainerSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetIds(this AzureFunctionappConfigContainerSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings AddIds(this AzureFunctionappConfigContainerSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings AddIds(this AzureFunctionappConfigContainerSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ClearIds(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings RemoveIds(this AzureFunctionappConfigContainerSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigContainerSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings RemoveIds(this AzureFunctionappConfigContainerSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetName(this AzureFunctionappConfigContainerSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetName(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetResourceGroup(this AzureFunctionappConfigContainerSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetResourceGroup(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetSubscription(this AzureFunctionappConfigContainerSetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetSubscription(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetDebug(this AzureFunctionappConfigContainerSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetDebug(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetHelp(this AzureFunctionappConfigContainerSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetHelp(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetOutput(this AzureFunctionappConfigContainerSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetOutput(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetQuery(this AzureFunctionappConfigContainerSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetQuery(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings SetVerbose(this AzureFunctionappConfigContainerSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerSetSettings ResetVerbose(this AzureFunctionappConfigContainerSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigContainerShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigContainerShowSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetSlot(this AzureFunctionappConfigContainerShowSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetSlot(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetIds(this AzureFunctionappConfigContainerShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetIds(this AzureFunctionappConfigContainerShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings AddIds(this AzureFunctionappConfigContainerShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings AddIds(this AzureFunctionappConfigContainerShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ClearIds(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings RemoveIds(this AzureFunctionappConfigContainerShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigContainerShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings RemoveIds(this AzureFunctionappConfigContainerShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetName(this AzureFunctionappConfigContainerShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetName(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetResourceGroup(this AzureFunctionappConfigContainerShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetResourceGroup(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetSubscription(this AzureFunctionappConfigContainerShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetSubscription(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetDebug(this AzureFunctionappConfigContainerShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetDebug(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetHelp(this AzureFunctionappConfigContainerShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetHelp(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetOutput(this AzureFunctionappConfigContainerShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetOutput(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetQuery(this AzureFunctionappConfigContainerShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetQuery(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigContainerShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings SetVerbose(this AzureFunctionappConfigContainerShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigContainerShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigContainerShowSettings ResetVerbose(this AzureFunctionappConfigContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigHostnameAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigHostnameAddSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetSlot(this AzureFunctionappConfigHostnameAddSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetSlot(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Hostname"/></em></p>
        ///   <p>Hostname assigned to the site, such as custom domains.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetHostname(this AzureFunctionappConfigHostnameAddSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Hostname"/></em></p>
        ///   <p>Hostname assigned to the site, such as custom domains.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetHostname(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetIds(this AzureFunctionappConfigHostnameAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetIds(this AzureFunctionappConfigHostnameAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings AddIds(this AzureFunctionappConfigHostnameAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings AddIds(this AzureFunctionappConfigHostnameAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ClearIds(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings RemoveIds(this AzureFunctionappConfigHostnameAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigHostnameAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings RemoveIds(this AzureFunctionappConfigHostnameAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetName(this AzureFunctionappConfigHostnameAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetName(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetResourceGroup(this AzureFunctionappConfigHostnameAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetResourceGroup(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetSubscription(this AzureFunctionappConfigHostnameAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetSubscription(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetDebug(this AzureFunctionappConfigHostnameAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetDebug(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetHelp(this AzureFunctionappConfigHostnameAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetHelp(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetOutput(this AzureFunctionappConfigHostnameAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetOutput(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetQuery(this AzureFunctionappConfigHostnameAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetQuery(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings SetVerbose(this AzureFunctionappConfigHostnameAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameAddSettings ResetVerbose(this AzureFunctionappConfigHostnameAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigHostnameDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigHostnameDeleteSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetSlot(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetSlot(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Hostname"/></em></p>
        ///   <p>Hostname assigned to the site, such as custom domains.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetHostname(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Hostname"/></em></p>
        ///   <p>Hostname assigned to the site, such as custom domains.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetHostname(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings AddIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings AddIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ClearIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings RemoveIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigHostnameDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings RemoveIds(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetName(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetName(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetResourceGroup(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetResourceGroup(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetSubscription(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetSubscription(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetDebug(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetDebug(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetHelp(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetHelp(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetOutput(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetOutput(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetQuery(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetQuery(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings SetVerbose(this AzureFunctionappConfigHostnameDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameDeleteSettings ResetVerbose(this AzureFunctionappConfigHostnameDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigHostnameGetExternalIpSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigHostnameGetExternalIpSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings AddIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings AddIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ClearIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings RemoveIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings RemoveIds(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetName(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetName(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetResourceGroup(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetResourceGroup(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetSubscription(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetSubscription(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetDebug(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetDebug(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetHelp(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetHelp(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetOutput(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetOutput(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetQuery(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetQuery(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings SetVerbose(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameGetExternalIpSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameGetExternalIpSettings ResetVerbose(this AzureFunctionappConfigHostnameGetExternalIpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigHostnameListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigHostnameListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetResourceGroup(this AzureFunctionappConfigHostnameListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetResourceGroup(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region WebappName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.WebappName"/></em></p>
        ///   <p>Name of the web app. You can configure the default using 'az configure --defaults web=&lt;name&gt;'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetWebappName(this AzureFunctionappConfigHostnameListSettings toolSettings, string webappName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebappName = webappName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.WebappName"/></em></p>
        ///   <p>Name of the web app. You can configure the default using 'az configure --defaults web=&lt;name&gt;'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetWebappName(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WebappName = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetSlot(this AzureFunctionappConfigHostnameListSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetSlot(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetSubscription(this AzureFunctionappConfigHostnameListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetSubscription(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetDebug(this AzureFunctionappConfigHostnameListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetDebug(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetHelp(this AzureFunctionappConfigHostnameListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetHelp(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetOutput(this AzureFunctionappConfigHostnameListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetOutput(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetQuery(this AzureFunctionappConfigHostnameListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetQuery(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigHostnameListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings SetVerbose(this AzureFunctionappConfigHostnameListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigHostnameListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigHostnameListSettings ResetVerbose(this AzureFunctionappConfigHostnameListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigSslBindSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigSslBindSettingsExtensions
    {
        #region CertificateThumbprint
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.CertificateThumbprint"/></em></p>
        ///   <p>The ssl cert thumbprint.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetCertificateThumbprint(this AzureFunctionappConfigSslBindSettings toolSettings, string certificateThumbprint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateThumbprint = certificateThumbprint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.CertificateThumbprint"/></em></p>
        ///   <p>The ssl cert thumbprint.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetCertificateThumbprint(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateThumbprint = null;
            return toolSettings;
        }
        #endregion
        #region SslType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.SslType"/></em></p>
        ///   <p>The ssl cert type.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetSslType(this AzureFunctionappConfigSslBindSettings toolSettings, FunctionappConfigSslBindSslType sslType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SslType = sslType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.SslType"/></em></p>
        ///   <p>The ssl cert type.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetSslType(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SslType = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetSlot(this AzureFunctionappConfigSslBindSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetSlot(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetIds(this AzureFunctionappConfigSslBindSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetIds(this AzureFunctionappConfigSslBindSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings AddIds(this AzureFunctionappConfigSslBindSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings AddIds(this AzureFunctionappConfigSslBindSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ClearIds(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings RemoveIds(this AzureFunctionappConfigSslBindSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSslBindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings RemoveIds(this AzureFunctionappConfigSslBindSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetName(this AzureFunctionappConfigSslBindSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetName(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetResourceGroup(this AzureFunctionappConfigSslBindSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetResourceGroup(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetSubscription(this AzureFunctionappConfigSslBindSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetSubscription(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetDebug(this AzureFunctionappConfigSslBindSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetDebug(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetHelp(this AzureFunctionappConfigSslBindSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetHelp(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetOutput(this AzureFunctionappConfigSslBindSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetOutput(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetQuery(this AzureFunctionappConfigSslBindSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetQuery(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslBindSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings SetVerbose(this AzureFunctionappConfigSslBindSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslBindSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslBindSettings ResetVerbose(this AzureFunctionappConfigSslBindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigSslDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigSslDeleteSettingsExtensions
    {
        #region CertificateThumbprint
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.CertificateThumbprint"/></em></p>
        ///   <p>The ssl cert thumbprint.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetCertificateThumbprint(this AzureFunctionappConfigSslDeleteSettings toolSettings, string certificateThumbprint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateThumbprint = certificateThumbprint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.CertificateThumbprint"/></em></p>
        ///   <p>The ssl cert thumbprint.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetCertificateThumbprint(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateThumbprint = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetResourceGroup(this AzureFunctionappConfigSslDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetResourceGroup(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetSubscription(this AzureFunctionappConfigSslDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetSubscription(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetDebug(this AzureFunctionappConfigSslDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetDebug(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetHelp(this AzureFunctionappConfigSslDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetHelp(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetOutput(this AzureFunctionappConfigSslDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetOutput(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetQuery(this AzureFunctionappConfigSslDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetQuery(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings SetVerbose(this AzureFunctionappConfigSslDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslDeleteSettings ResetVerbose(this AzureFunctionappConfigSslDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigSslListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigSslListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetResourceGroup(this AzureFunctionappConfigSslListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetResourceGroup(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetSubscription(this AzureFunctionappConfigSslListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetSubscription(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetDebug(this AzureFunctionappConfigSslListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetDebug(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetHelp(this AzureFunctionappConfigSslListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetHelp(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetOutput(this AzureFunctionappConfigSslListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetOutput(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetQuery(this AzureFunctionappConfigSslListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetQuery(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings SetVerbose(this AzureFunctionappConfigSslListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslListSettings ResetVerbose(this AzureFunctionappConfigSslListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigSslUnbindSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigSslUnbindSettingsExtensions
    {
        #region CertificateThumbprint
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.CertificateThumbprint"/></em></p>
        ///   <p>The ssl cert thumbprint.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetCertificateThumbprint(this AzureFunctionappConfigSslUnbindSettings toolSettings, string certificateThumbprint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateThumbprint = certificateThumbprint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.CertificateThumbprint"/></em></p>
        ///   <p>The ssl cert thumbprint.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetCertificateThumbprint(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateThumbprint = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetSlot(this AzureFunctionappConfigSslUnbindSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetSlot(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetIds(this AzureFunctionappConfigSslUnbindSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetIds(this AzureFunctionappConfigSslUnbindSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings AddIds(this AzureFunctionappConfigSslUnbindSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings AddIds(this AzureFunctionappConfigSslUnbindSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ClearIds(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings RemoveIds(this AzureFunctionappConfigSslUnbindSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSslUnbindSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings RemoveIds(this AzureFunctionappConfigSslUnbindSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetName(this AzureFunctionappConfigSslUnbindSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetName(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetResourceGroup(this AzureFunctionappConfigSslUnbindSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetResourceGroup(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetSubscription(this AzureFunctionappConfigSslUnbindSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetSubscription(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetDebug(this AzureFunctionappConfigSslUnbindSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetDebug(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetHelp(this AzureFunctionappConfigSslUnbindSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetHelp(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetOutput(this AzureFunctionappConfigSslUnbindSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetOutput(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetQuery(this AzureFunctionappConfigSslUnbindSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetQuery(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUnbindSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings SetVerbose(this AzureFunctionappConfigSslUnbindSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUnbindSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUnbindSettings ResetVerbose(this AzureFunctionappConfigSslUnbindSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappConfigSslUploadSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappConfigSslUploadSettingsExtensions
    {
        #region CertificateFile
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.CertificateFile"/></em></p>
        ///   <p>The filepath for the .pfx file.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetCertificateFile(this AzureFunctionappConfigSslUploadSettings toolSettings, string certificateFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateFile = certificateFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.CertificateFile"/></em></p>
        ///   <p>The filepath for the .pfx file.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetCertificateFile(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificateFile = null;
            return toolSettings;
        }
        #endregion
        #region CertificatePassword
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.CertificatePassword"/></em></p>
        ///   <p>The ssl cert password.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetCertificatePassword(this AzureFunctionappConfigSslUploadSettings toolSettings, string certificatePassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificatePassword = certificatePassword;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.CertificatePassword"/></em></p>
        ///   <p>The ssl cert password.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetCertificatePassword(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertificatePassword = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetIds(this AzureFunctionappConfigSslUploadSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetIds(this AzureFunctionappConfigSslUploadSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings AddIds(this AzureFunctionappConfigSslUploadSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings AddIds(this AzureFunctionappConfigSslUploadSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ClearIds(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings RemoveIds(this AzureFunctionappConfigSslUploadSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappConfigSslUploadSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings RemoveIds(this AzureFunctionappConfigSslUploadSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetName(this AzureFunctionappConfigSslUploadSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetName(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetResourceGroup(this AzureFunctionappConfigSslUploadSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetResourceGroup(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetSubscription(this AzureFunctionappConfigSslUploadSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetSubscription(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetDebug(this AzureFunctionappConfigSslUploadSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetDebug(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetHelp(this AzureFunctionappConfigSslUploadSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetHelp(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetOutput(this AzureFunctionappConfigSslUploadSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetOutput(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetQuery(this AzureFunctionappConfigSslUploadSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetQuery(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappConfigSslUploadSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings SetVerbose(this AzureFunctionappConfigSslUploadSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappConfigSslUploadSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappConfigSslUploadSettings ResetVerbose(this AzureFunctionappConfigSslUploadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentContainerConfigSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentContainerConfigSettingsExtensions
    {
        #region EnableCd
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></em></p>
        ///   <p>Enable/disable continuous deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetEnableCd(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, bool? enableCd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCd = enableCd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></em></p>
        ///   <p>Enable/disable continuous deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetEnableCd(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCd = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></em></p>
        ///   <p>Enable/disable continuous deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings EnableEnableCd(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCd = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></em></p>
        ///   <p>Enable/disable continuous deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings DisableEnableCd(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCd = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureFunctionappDeploymentContainerConfigSettings.EnableCd"/></em></p>
        ///   <p>Enable/disable continuous deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ToggleEnableCd(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCd = !toolSettings.EnableCd;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetSlot(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetSlot(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings AddIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings AddIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ClearIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings RemoveIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentContainerConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings RemoveIds(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetName(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetName(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetResourceGroup(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetResourceGroup(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetSubscription(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetSubscription(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetDebug(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetDebug(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetHelp(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetHelp(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetOutput(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetOutput(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetQuery(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetQuery(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings SetVerbose(this AzureFunctionappDeploymentContainerConfigSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerConfigSettings ResetVerbose(this AzureFunctionappDeploymentContainerConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentContainerShowCdUrlSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentContainerShowCdUrlSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetSlot(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetSlot(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings AddIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings AddIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ClearIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings RemoveIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings RemoveIds(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetName(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetName(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetResourceGroup(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetResourceGroup(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetSubscription(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetSubscription(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetDebug(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetDebug(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetHelp(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetHelp(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetOutput(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetOutput(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetQuery(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetQuery(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings SetVerbose(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentContainerShowCdUrlSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentContainerShowCdUrlSettings ResetVerbose(this AzureFunctionappDeploymentContainerShowCdUrlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSlotAutoSwapSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSlotAutoSwapSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetSlot(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetSlot(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region AutoSwapSlot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.AutoSwapSlot"/></em></p>
        ///   <p>Target slot to auto swap.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetAutoSwapSlot(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string autoSwapSlot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoSwapSlot = autoSwapSlot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.AutoSwapSlot"/></em></p>
        ///   <p>Target slot to auto swap.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetAutoSwapSlot(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoSwapSlot = null;
            return toolSettings;
        }
        #endregion
        #region Disable
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Disable"/></em></p>
        ///   <p>Disable auto swap.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetDisable(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string disable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = disable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Disable"/></em></p>
        ///   <p>Disable auto swap.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetDisable(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings AddIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings AddIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ClearIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings RemoveIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings RemoveIds(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetName(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetName(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetResourceGroup(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetResourceGroup(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetSubscription(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetSubscription(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetDebug(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetDebug(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetHelp(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetHelp(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetOutput(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetOutput(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetQuery(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetQuery(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings SetVerbose(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotAutoSwapSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotAutoSwapSettings ResetVerbose(this AzureFunctionappDeploymentSlotAutoSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSlotCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSlotCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetName(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetName(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetResourceGroup(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetResourceGroup(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetSlot(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetSlot(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region ConfigurationSource
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.ConfigurationSource"/></em></p>
        ///   <p>Source slot to clone configurations from. Use function app's name to refer to the production slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetConfigurationSource(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string configurationSource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigurationSource = configurationSource;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.ConfigurationSource"/></em></p>
        ///   <p>Source slot to clone configurations from. Use function app's name to refer to the production slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetConfigurationSource(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigurationSource = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetSubscription(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetSubscription(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetDebug(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetDebug(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetHelp(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetHelp(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetOutput(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetOutput(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetQuery(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetQuery(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings SetVerbose(this AzureFunctionappDeploymentSlotCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotCreateSettings ResetVerbose(this AzureFunctionappDeploymentSlotCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSlotDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSlotDeleteSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetSlot(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetSlot(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings AddIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings AddIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ClearIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings RemoveIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings RemoveIds(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetName(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetName(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetResourceGroup(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetResourceGroup(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetSubscription(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetSubscription(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetDebug(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetDebug(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetHelp(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetHelp(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetOutput(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetOutput(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetQuery(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetQuery(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings SetVerbose(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotDeleteSettings ResetVerbose(this AzureFunctionappDeploymentSlotDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSlotListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSlotListSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetIds(this AzureFunctionappDeploymentSlotListSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetIds(this AzureFunctionappDeploymentSlotListSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings AddIds(this AzureFunctionappDeploymentSlotListSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings AddIds(this AzureFunctionappDeploymentSlotListSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ClearIds(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings RemoveIds(this AzureFunctionappDeploymentSlotListSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotListSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings RemoveIds(this AzureFunctionappDeploymentSlotListSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetName(this AzureFunctionappDeploymentSlotListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetName(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetResourceGroup(this AzureFunctionappDeploymentSlotListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetResourceGroup(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetSubscription(this AzureFunctionappDeploymentSlotListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetSubscription(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetDebug(this AzureFunctionappDeploymentSlotListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetDebug(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetHelp(this AzureFunctionappDeploymentSlotListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetHelp(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetOutput(this AzureFunctionappDeploymentSlotListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetOutput(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetQuery(this AzureFunctionappDeploymentSlotListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetQuery(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings SetVerbose(this AzureFunctionappDeploymentSlotListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotListSettings ResetVerbose(this AzureFunctionappDeploymentSlotListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSlotSwapSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSlotSwapSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetSlot(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Slot"/></em></p>
        ///   <p>The name of the slot.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetSlot(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Action
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Action"/></em></p>
        ///   <p>Swap types. use 'preview' to apply target slot's settings on the source slot first; use 'swap' to complete it; use 'reset' to reset the swap.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetAction(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, FunctionappDeploymentSlotSwapAction action)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Action = action;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Action"/></em></p>
        ///   <p>Swap types. use 'preview' to apply target slot's settings on the source slot first; use 'swap' to complete it; use 'reset' to reset the swap.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetAction(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Action = null;
            return toolSettings;
        }
        #endregion
        #region TargetSlot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.TargetSlot"/></em></p>
        ///   <p>Target slot to swap, default to 'production'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetTargetSlot(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string targetSlot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetSlot = targetSlot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.TargetSlot"/></em></p>
        ///   <p>Target slot to swap, default to 'production'.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetTargetSlot(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetSlot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings AddIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings AddIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ClearIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings RemoveIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSlotSwapSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings RemoveIds(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetName(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetName(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetResourceGroup(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetResourceGroup(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetSubscription(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetSubscription(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetDebug(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetDebug(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetHelp(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetHelp(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetOutput(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetOutput(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetQuery(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetQuery(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings SetVerbose(this AzureFunctionappDeploymentSlotSwapSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSlotSwapSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSlotSwapSettings ResetVerbose(this AzureFunctionappDeploymentSlotSwapSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceConfigSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceConfigSettingsExtensions
    {
        #region RepoUrl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepoUrl"/></em></p>
        ///   <p>Repository url to pull the latest source from, e.g. <a href="https://github.com/foo/foo-web">https://github.com/foo/foo-web</a>.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetRepoUrl(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string repoUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepoUrl = repoUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepoUrl"/></em></p>
        ///   <p>Repository url to pull the latest source from, e.g. <a href="https://github.com/foo/foo-web">https://github.com/foo/foo-web</a>.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetRepoUrl(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepoUrl = null;
            return toolSettings;
        }
        #endregion
        #region Branch
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Branch"/></em></p>
        ///   <p>The branch name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetBranch(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string branch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = branch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Branch"/></em></p>
        ///   <p>The branch name of the repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetBranch(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Branch = null;
            return toolSettings;
        }
        #endregion
        #region GitToken
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.GitToken"/></em></p>
        ///   <p>Git access token required for auto sync.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetGitToken(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string gitToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitToken = gitToken;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.GitToken"/></em></p>
        ///   <p>Git access token required for auto sync.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetGitToken(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitToken = null;
            return toolSettings;
        }
        #endregion
        #region ManualIntegration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.ManualIntegration"/></em></p>
        ///   <p>Disable automatic sync between source control and web.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetManualIntegration(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string manualIntegration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualIntegration = manualIntegration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.ManualIntegration"/></em></p>
        ///   <p>Disable automatic sync between source control and web.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetManualIntegration(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManualIntegration = null;
            return toolSettings;
        }
        #endregion
        #region RepositoryType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepositoryType"/></em></p>
        ///   <p>Repository type.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetRepositoryType(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, FunctionappDeploymentSourceConfigRepositoryType repositoryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryType = repositoryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.RepositoryType"/></em></p>
        ///   <p>Repository type.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetRepositoryType(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoryType = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetSlot(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetSlot(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings AddIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings AddIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ClearIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings RemoveIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceConfigSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings RemoveIds(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetName(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetName(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetResourceGroup(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetResourceGroup(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetSubscription(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetSubscription(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region AppWorkingDir
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.AppWorkingDir"/></em></p>
        ///   <p>Working directory of the application. Default will be root of the repo.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetAppWorkingDir(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string appWorkingDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AppWorkingDir = appWorkingDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.AppWorkingDir"/></em></p>
        ///   <p>Working directory of the application. Default will be root of the repo.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetAppWorkingDir(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AppWorkingDir = null;
            return toolSettings;
        }
        #endregion
        #region CdAccountCreate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAccountCreate"/></em></p>
        ///   <p>To create a new Visual Studio Team Services (VSTS) account if it doesn't exist already.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetCdAccountCreate(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string cdAccountCreate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdAccountCreate = cdAccountCreate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAccountCreate"/></em></p>
        ///   <p>To create a new Visual Studio Team Services (VSTS) account if it doesn't exist already.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetCdAccountCreate(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdAccountCreate = null;
            return toolSettings;
        }
        #endregion
        #region CdAppType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAppType"/></em></p>
        ///   <p>Web application framework you used to develop your app. Default is AspNet.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetCdAppType(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, FunctionappDeploymentSourceConfigCdAppType cdAppType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdAppType = cdAppType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdAppType"/></em></p>
        ///   <p>Web application framework you used to develop your app. Default is AspNet.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetCdAppType(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdAppType = null;
            return toolSettings;
        }
        #endregion
        #region CdProjectUrl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdProjectUrl"/></em></p>
        ///   <p>URL of the Visual Studio Team Services (VSTS) project to use for continuous delivery. URL should be in format https://&amp;lt;accountname&amp;gt;.visualstudio.com/&amp;lt;projectname&amp;gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetCdProjectUrl(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string cdProjectUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdProjectUrl = cdProjectUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.CdProjectUrl"/></em></p>
        ///   <p>URL of the Visual Studio Team Services (VSTS) project to use for continuous delivery. URL should be in format https://&amp;lt;accountname&amp;gt;.visualstudio.com/&amp;lt;projectname&amp;gt;.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetCdProjectUrl(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdProjectUrl = null;
            return toolSettings;
        }
        #endregion
        #region NodejsTaskRunner
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.NodejsTaskRunner"/></em></p>
        ///   <p>Task runner for nodejs. Default is None.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetNodejsTaskRunner(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, FunctionappDeploymentSourceConfigNodejsTaskRunner nodejsTaskRunner)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodejsTaskRunner = nodejsTaskRunner;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.NodejsTaskRunner"/></em></p>
        ///   <p>Task runner for nodejs. Default is None.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetNodejsTaskRunner(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodejsTaskRunner = null;
            return toolSettings;
        }
        #endregion
        #region PrivateRepoPassword
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoPassword"/></em></p>
        ///   <p>Password for the private repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetPrivateRepoPassword(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string privateRepoPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivateRepoPassword = privateRepoPassword;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoPassword"/></em></p>
        ///   <p>Password for the private repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetPrivateRepoPassword(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivateRepoPassword = null;
            return toolSettings;
        }
        #endregion
        #region PrivateRepoUsername
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoUsername"/></em></p>
        ///   <p>Username for the private repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetPrivateRepoUsername(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string privateRepoUsername)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivateRepoUsername = privateRepoUsername;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PrivateRepoUsername"/></em></p>
        ///   <p>Username for the private repository.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetPrivateRepoUsername(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivateRepoUsername = null;
            return toolSettings;
        }
        #endregion
        #region PythonFramework
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonFramework"/></em></p>
        ///   <p>Framework used for Python application. Default is Django.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetPythonFramework(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, FunctionappDeploymentSourceConfigPythonFramework pythonFramework)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PythonFramework = pythonFramework;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonFramework"/></em></p>
        ///   <p>Framework used for Python application. Default is Django.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetPythonFramework(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PythonFramework = null;
            return toolSettings;
        }
        #endregion
        #region PythonVersion
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonVersion"/></em></p>
        ///   <p>Python version used for application. Default is Python 3.5.3 x86.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetPythonVersion(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, FunctionappDeploymentSourceConfigPythonVersion pythonVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PythonVersion = pythonVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.PythonVersion"/></em></p>
        ///   <p>Python version used for application. Default is Python 3.5.3 x86.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetPythonVersion(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PythonVersion = null;
            return toolSettings;
        }
        #endregion
        #region SlotSwap
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.SlotSwap"/></em></p>
        ///   <p>Name of the slot to be used for deployment and later promote to production. If slot is not available, it will be created. Default: Not configured.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetSlotSwap(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string slotSwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSwap = slotSwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.SlotSwap"/></em></p>
        ///   <p>Name of the slot to be used for deployment and later promote to production. If slot is not available, it will be created. Default: Not configured.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetSlotSwap(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SlotSwap = null;
            return toolSettings;
        }
        #endregion
        #region Test
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Test"/></em></p>
        ///   <p>Name of the web app to be used for load testing. If web app is not available, it will be created. Default: Disable.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetTest(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string test)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Test = test;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Test"/></em></p>
        ///   <p>Name of the web app to be used for load testing. If web app is not available, it will be created. Default: Disable.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetTest(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Test = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetDebug(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetDebug(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetHelp(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetHelp(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetOutput(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetOutput(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetQuery(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetQuery(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings SetVerbose(this AzureFunctionappDeploymentSourceConfigSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigSettings ResetVerbose(this AzureFunctionappDeploymentSourceConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceConfigLocalGitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceConfigLocalGitSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetSlot(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetSlot(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings AddIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings AddIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ClearIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings RemoveIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings RemoveIds(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetName(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetName(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetResourceGroup(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetResourceGroup(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetSubscription(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetSubscription(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetDebug(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetDebug(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetHelp(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetHelp(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetOutput(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetOutput(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetQuery(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetQuery(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings SetVerbose(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigLocalGitSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigLocalGitSettings ResetVerbose(this AzureFunctionappDeploymentSourceConfigLocalGitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceConfigZipSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceConfigZipSettingsExtensions
    {
        #region Src
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Src"/></em></p>
        ///   <p>A zip file path for deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetSrc(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string src)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Src = src;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Src"/></em></p>
        ///   <p>A zip file path for deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetSrc(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Src = null;
            return toolSettings;
        }
        #endregion
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetSlot(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetSlot(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Timeout"/></em></p>
        ///   <p>Configurable timeout in seconds for checking the status of deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetTimeout(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Timeout"/></em></p>
        ///   <p>Configurable timeout in seconds for checking the status of deployment.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetTimeout(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings AddIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings AddIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ClearIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings RemoveIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings RemoveIds(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetName(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetName(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetResourceGroup(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetResourceGroup(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetSubscription(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetSubscription(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetDebug(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetDebug(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetHelp(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetHelp(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetOutput(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetOutput(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetQuery(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetQuery(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings SetVerbose(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceConfigZipSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceConfigZipSettings ResetVerbose(this AzureFunctionappDeploymentSourceConfigZipSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceDeleteSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetSlot(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetSlot(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings AddIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings AddIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ClearIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings RemoveIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings RemoveIds(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetName(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetName(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetResourceGroup(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetResourceGroup(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetSubscription(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetSubscription(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetDebug(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetDebug(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetHelp(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetHelp(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetOutput(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetOutput(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetQuery(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetQuery(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings SetVerbose(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceDeleteSettings ResetVerbose(this AzureFunctionappDeploymentSourceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceShowSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetSlot(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetSlot(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings AddIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings AddIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ClearIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings RemoveIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings RemoveIds(this AzureFunctionappDeploymentSourceShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetName(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetName(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetResourceGroup(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetResourceGroup(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetSubscription(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetSubscription(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetDebug(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetDebug(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetHelp(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetHelp(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetOutput(this AzureFunctionappDeploymentSourceShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetOutput(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetQuery(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetQuery(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings SetVerbose(this AzureFunctionappDeploymentSourceShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceShowSettings ResetVerbose(this AzureFunctionappDeploymentSourceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceSyncSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceSyncSettingsExtensions
    {
        #region Slot
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetSlot(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string slot)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = slot;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Slot"/></em></p>
        ///   <p>The name of the slot. Default to the productions slot if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetSlot(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Slot = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings AddIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings AddIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ClearIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings RemoveIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureFunctionappDeploymentSourceSyncSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings RemoveIds(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetName(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Name"/></em></p>
        ///   <p>Name of the function app.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetName(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetResourceGroup(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetResourceGroup(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetSubscription(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetSubscription(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetDebug(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetDebug(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetHelp(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetHelp(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetOutput(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetOutput(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetQuery(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetQuery(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings SetVerbose(this AzureFunctionappDeploymentSourceSyncSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceSyncSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceSyncSettings ResetVerbose(this AzureFunctionappDeploymentSourceSyncSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentSourceUpdateTokenSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentSourceUpdateTokenSettingsExtensions
    {
        #region GitToken
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.GitToken"/></em></p>
        ///   <p>Git access token required for auto sync.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetGitToken(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, string gitToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitToken = gitToken;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.GitToken"/></em></p>
        ///   <p>Git access token required for auto sync.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetGitToken(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GitToken = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetSubscription(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetSubscription(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetDebug(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetDebug(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetHelp(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetHelp(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetOutput(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetOutput(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetQuery(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetQuery(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings SetVerbose(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentSourceUpdateTokenSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentSourceUpdateTokenSettings ResetVerbose(this AzureFunctionappDeploymentSourceUpdateTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentUserSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentUserSetSettingsExtensions
    {
        #region UserName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.UserName"/></em></p>
        ///   <p>User name.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetUserName(this AzureFunctionappDeploymentUserSetSettings toolSettings, string userName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = userName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.UserName"/></em></p>
        ///   <p>User name.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetUserName(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserName = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Password"/></em></p>
        ///   <p>Password, will prompt if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetPassword(this AzureFunctionappDeploymentUserSetSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Password"/></em></p>
        ///   <p>Password, will prompt if not specified.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetPassword(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetSubscription(this AzureFunctionappDeploymentUserSetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetSubscription(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetDebug(this AzureFunctionappDeploymentUserSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetDebug(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetHelp(this AzureFunctionappDeploymentUserSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetHelp(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetOutput(this AzureFunctionappDeploymentUserSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetOutput(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetQuery(this AzureFunctionappDeploymentUserSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetQuery(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings SetVerbose(this AzureFunctionappDeploymentUserSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserSetSettings ResetVerbose(this AzureFunctionappDeploymentUserSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureFunctionappDeploymentUserShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureFunctionappDeploymentUserShowSettingsExtensions
    {
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings SetSubscription(this AzureFunctionappDeploymentUserShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings ResetSubscription(this AzureFunctionappDeploymentUserShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings SetDebug(this AzureFunctionappDeploymentUserShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings ResetDebug(this AzureFunctionappDeploymentUserShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings SetHelp(this AzureFunctionappDeploymentUserShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings ResetHelp(this AzureFunctionappDeploymentUserShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings SetOutput(this AzureFunctionappDeploymentUserShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings ResetOutput(this AzureFunctionappDeploymentUserShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings SetQuery(this AzureFunctionappDeploymentUserShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings ResetQuery(this AzureFunctionappDeploymentUserShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureFunctionappDeploymentUserShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings SetVerbose(this AzureFunctionappDeploymentUserShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureFunctionappDeploymentUserShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureFunctionappDeploymentUserShowSettings ResetVerbose(this AzureFunctionappDeploymentUserShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region FunctionappCreateOsType
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappCreateOsType>))]
    public partial class FunctionappCreateOsType : Enumeration
    {
        public static FunctionappCreateOsType linux = new FunctionappCreateOsType { Value = "linux" };
        public static FunctionappCreateOsType windows = new FunctionappCreateOsType { Value = "windows" };
    }
    #endregion
    #region FunctionappCreateRuntime
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappCreateRuntime>))]
    public partial class FunctionappCreateRuntime : Enumeration
    {
        public static FunctionappCreateRuntime dotnet = new FunctionappCreateRuntime { Value = "dotnet" };
        public static FunctionappCreateRuntime java = new FunctionappCreateRuntime { Value = "java" };
        public static FunctionappCreateRuntime node = new FunctionappCreateRuntime { Value = "node" };
        public static FunctionappCreateRuntime powershell = new FunctionappCreateRuntime { Value = "powershell" };
        public static FunctionappCreateRuntime python = new FunctionappCreateRuntime { Value = "python" };
    }
    #endregion
    #region FunctionappConfigSetFtpsState
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappConfigSetFtpsState>))]
    public partial class FunctionappConfigSetFtpsState : Enumeration
    {
        public static FunctionappConfigSetFtpsState allallowed = new FunctionappConfigSetFtpsState { Value = "allallowed" };
        public static FunctionappConfigSetFtpsState disabled = new FunctionappConfigSetFtpsState { Value = "disabled" };
        public static FunctionappConfigSetFtpsState ftpsonly = new FunctionappConfigSetFtpsState { Value = "ftpsonly" };
    }
    #endregion
    #region FunctionappConfigSslBindSslType
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappConfigSslBindSslType>))]
    public partial class FunctionappConfigSslBindSslType : Enumeration
    {
        public static FunctionappConfigSslBindSslType ip = new FunctionappConfigSslBindSslType { Value = "ip" };
        public static FunctionappConfigSslBindSslType sni = new FunctionappConfigSslBindSslType { Value = "sni" };
    }
    #endregion
    #region FunctionappDeploymentSlotSwapAction
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappDeploymentSlotSwapAction>))]
    public partial class FunctionappDeploymentSlotSwapAction : Enumeration
    {
        public static FunctionappDeploymentSlotSwapAction preview = new FunctionappDeploymentSlotSwapAction { Value = "preview" };
        public static FunctionappDeploymentSlotSwapAction reset = new FunctionappDeploymentSlotSwapAction { Value = "reset" };
        public static FunctionappDeploymentSlotSwapAction swap = new FunctionappDeploymentSlotSwapAction { Value = "swap" };
    }
    #endregion
    #region FunctionappDeploymentSourceConfigRepositoryType
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappDeploymentSourceConfigRepositoryType>))]
    public partial class FunctionappDeploymentSourceConfigRepositoryType : Enumeration
    {
        public static FunctionappDeploymentSourceConfigRepositoryType externalgit = new FunctionappDeploymentSourceConfigRepositoryType { Value = "externalgit" };
        public static FunctionappDeploymentSourceConfigRepositoryType git = new FunctionappDeploymentSourceConfigRepositoryType { Value = "git" };
        public static FunctionappDeploymentSourceConfigRepositoryType github = new FunctionappDeploymentSourceConfigRepositoryType { Value = "github" };
        public static FunctionappDeploymentSourceConfigRepositoryType localgit = new FunctionappDeploymentSourceConfigRepositoryType { Value = "localgit" };
        public static FunctionappDeploymentSourceConfigRepositoryType mercurial = new FunctionappDeploymentSourceConfigRepositoryType { Value = "mercurial" };
        public static FunctionappDeploymentSourceConfigRepositoryType vsts = new FunctionappDeploymentSourceConfigRepositoryType { Value = "vsts" };
    }
    #endregion
    #region FunctionappDeploymentSourceConfigCdAppType
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappDeploymentSourceConfigCdAppType>))]
    public partial class FunctionappDeploymentSourceConfigCdAppType : Enumeration
    {
        public static FunctionappDeploymentSourceConfigCdAppType aspnet = new FunctionappDeploymentSourceConfigCdAppType { Value = "aspnet" };
        public static FunctionappDeploymentSourceConfigCdAppType aspnetcore = new FunctionappDeploymentSourceConfigCdAppType { Value = "aspnetcore" };
        public static FunctionappDeploymentSourceConfigCdAppType nodejs = new FunctionappDeploymentSourceConfigCdAppType { Value = "nodejs" };
        public static FunctionappDeploymentSourceConfigCdAppType php = new FunctionappDeploymentSourceConfigCdAppType { Value = "php" };
        public static FunctionappDeploymentSourceConfigCdAppType python = new FunctionappDeploymentSourceConfigCdAppType { Value = "python" };
    }
    #endregion
    #region FunctionappDeploymentSourceConfigNodejsTaskRunner
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappDeploymentSourceConfigNodejsTaskRunner>))]
    public partial class FunctionappDeploymentSourceConfigNodejsTaskRunner : Enumeration
    {
        public static FunctionappDeploymentSourceConfigNodejsTaskRunner grunt = new FunctionappDeploymentSourceConfigNodejsTaskRunner { Value = "grunt" };
        public static FunctionappDeploymentSourceConfigNodejsTaskRunner gulp = new FunctionappDeploymentSourceConfigNodejsTaskRunner { Value = "gulp" };
        public static FunctionappDeploymentSourceConfigNodejsTaskRunner none = new FunctionappDeploymentSourceConfigNodejsTaskRunner { Value = "none" };
    }
    #endregion
    #region FunctionappDeploymentSourceConfigPythonFramework
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappDeploymentSourceConfigPythonFramework>))]
    public partial class FunctionappDeploymentSourceConfigPythonFramework : Enumeration
    {
        public static FunctionappDeploymentSourceConfigPythonFramework bottle = new FunctionappDeploymentSourceConfigPythonFramework { Value = "bottle" };
        public static FunctionappDeploymentSourceConfigPythonFramework django = new FunctionappDeploymentSourceConfigPythonFramework { Value = "django" };
        public static FunctionappDeploymentSourceConfigPythonFramework flask = new FunctionappDeploymentSourceConfigPythonFramework { Value = "flask" };
    }
    #endregion
    #region FunctionappDeploymentSourceConfigPythonVersion
    /// <summary>
    ///   Used within <see cref="AzureFunctionappTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<FunctionappDeploymentSourceConfigPythonVersion>))]
    public partial class FunctionappDeploymentSourceConfigPythonVersion : Enumeration
    {
        public static FunctionappDeploymentSourceConfigPythonVersion python_2_7_12_x64 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 2.7.12 x64" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_2_7_12_x86 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 2.7.12 x86" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_2_7_13_x64 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 2.7.13 x64" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_2_7_13_x86 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 2.7.13 x86" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_3_5_3_x64 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 3.5.3 x64" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_3_5_3_x86 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 3.5.3 x86" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_3_6_0_x64 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 3.6.0 x64" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_3_6_0_x86 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 3.6.0 x86" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_3_6_1_x86 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 3.6.1 x86" };
        public static FunctionappDeploymentSourceConfigPythonVersion python_3_6_2_x64 = new FunctionappDeploymentSourceConfigPythonVersion { Value = "python 3.6.2 x64" };
    }
    #endregion
}
