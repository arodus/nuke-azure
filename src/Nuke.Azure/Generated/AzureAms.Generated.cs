// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureAms.json
// Generated with Nuke.CodeGeneration version 0.20.1 (Windows,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTasks
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public static string AzureAmsPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("AZUREAMS_EXE") ??
            ToolPathResolver.GetPathExecutable("az");
        public static Action<OutputType, string> AzureAmsLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   Manage Azure Media Services resources.
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAms(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureAmsPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, AzureAmsLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAms(AzureAmsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAms(Configure<AzureAmsSettings> configurator)
        {
            return AzureAms(configurator(new AzureAmsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAms(CombinatorialConfigure<AzureAmsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAms, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterCreate(AzureAmsAccountFilterCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountFilterCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterCreateSettings.AccountName"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAccountFilterCreateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterCreateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAccountFilterCreateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAccountFilterCreateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterCreateSettings.Help"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAccountFilterCreateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterCreateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAccountFilterCreateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAccountFilterCreateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterCreateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAccountFilterCreateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAccountFilterCreateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterCreate(Configure<AzureAmsAccountFilterCreateSettings> configurator)
        {
            return AzureAmsAccountFilterCreate(configurator(new AzureAmsAccountFilterCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterCreateSettings.AccountName"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAccountFilterCreateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterCreateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAccountFilterCreateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAccountFilterCreateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterCreateSettings.Help"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAccountFilterCreateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterCreateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAccountFilterCreateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAccountFilterCreateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterCreateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAccountFilterCreateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAccountFilterCreateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountFilterCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountFilterCreate(CombinatorialConfigure<AzureAmsAccountFilterCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountFilterCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterDelete(AzureAmsAccountFilterDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountFilterDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterDelete(Configure<AzureAmsAccountFilterDeleteSettings> configurator)
        {
            return AzureAmsAccountFilterDelete(configurator(new AzureAmsAccountFilterDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountFilterDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountFilterDelete(CombinatorialConfigure<AzureAmsAccountFilterDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountFilterDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterList(AzureAmsAccountFilterListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountFilterListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterList(Configure<AzureAmsAccountFilterListSettings> configurator)
        {
            return AzureAmsAccountFilterList(configurator(new AzureAmsAccountFilterListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountFilterListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountFilterList(CombinatorialConfigure<AzureAmsAccountFilterListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountFilterList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterShow(AzureAmsAccountFilterShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountFilterShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountFilterShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterShow(Configure<AzureAmsAccountFilterShowSettings> configurator)
        {
            return AzureAmsAccountFilterShow(configurator(new AzureAmsAccountFilterShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountFilterShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountFilterShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountFilterShow(CombinatorialConfigure<AzureAmsAccountFilterShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountFilterShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterUpdate(AzureAmsAccountFilterUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountFilterUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Add"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAccountFilterUpdateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAccountFilterUpdateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAccountFilterUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAccountFilterUpdateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAccountFilterUpdateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Set"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAccountFilterUpdateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountFilterUpdate(Configure<AzureAmsAccountFilterUpdateSettings> configurator)
        {
            return AzureAmsAccountFilterUpdate(configurator(new AzureAmsAccountFilterUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountFilterUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Add"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAccountFilterUpdateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAccountFilterUpdateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAccountFilterUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAccountFilterUpdateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAccountFilterUpdateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountFilterUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Set"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAccountFilterUpdateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountFilterUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountFilterUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountFilterUpdate(CombinatorialConfigure<AzureAmsAccountFilterUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountFilterUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountCheckName(AzureAmsAccountCheckNameSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountCheckNameSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountCheckNameSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountCheckNameSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAmsAccountCheckNameSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountCheckNameSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountCheckNameSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountCheckNameSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountCheckNameSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountCheckNameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountCheckName(Configure<AzureAmsAccountCheckNameSettings> configurator)
        {
            return AzureAmsAccountCheckName(configurator(new AzureAmsAccountCheckNameSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountCheckNameSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountCheckNameSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAmsAccountCheckNameSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountCheckNameSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountCheckNameSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountCheckNameSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountCheckNameSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountCheckNameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountCheckNameSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountCheckName(CombinatorialConfigure<AzureAmsAccountCheckNameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountCheckName, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountCreate(AzureAmsAccountCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAmsAccountCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureAmsAccountCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsAccountCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountCreate(Configure<AzureAmsAccountCreateSettings> configurator)
        {
            return AzureAmsAccountCreate(configurator(new AzureAmsAccountCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureAmsAccountCreateSettings.Location"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureAmsAccountCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsAccountCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountCreate(CombinatorialConfigure<AzureAmsAccountCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountDelete(AzureAmsAccountDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountDelete(Configure<AzureAmsAccountDeleteSettings> configurator)
        {
            return AzureAmsAccountDelete(configurator(new AzureAmsAccountDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountDelete(CombinatorialConfigure<AzureAmsAccountDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountList(AzureAmsAccountListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountList(Configure<AzureAmsAccountListSettings> configurator)
        {
            return AzureAmsAccountList(configurator(new AzureAmsAccountListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountList(CombinatorialConfigure<AzureAmsAccountListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountShow(AzureAmsAccountShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountShow(Configure<AzureAmsAccountShowSettings> configurator)
        {
            return AzureAmsAccountShow(configurator(new AzureAmsAccountShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountShow(CombinatorialConfigure<AzureAmsAccountShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountUpdate(AzureAmsAccountUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureAmsAccountUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAccountUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAccountUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAccountUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsAccountUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountUpdate(Configure<AzureAmsAccountUpdateSettings> configurator)
        {
            return AzureAmsAccountUpdate(configurator(new AzureAmsAccountUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureAmsAccountUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAccountUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAccountUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAccountUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsAccountUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountUpdate(CombinatorialConfigure<AzureAmsAccountUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterCreate(AzureAmsAssetFilterCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetFilterCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterCreateSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterCreateSettings.AssetName"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAssetFilterCreateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterCreateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAssetFilterCreateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAssetFilterCreateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterCreateSettings.Help"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAssetFilterCreateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterCreateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAssetFilterCreateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAssetFilterCreateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterCreateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAssetFilterCreateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAssetFilterCreateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterCreate(Configure<AzureAmsAssetFilterCreateSettings> configurator)
        {
            return AzureAmsAssetFilterCreate(configurator(new AzureAmsAssetFilterCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterCreateSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterCreateSettings.AssetName"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAssetFilterCreateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterCreateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAssetFilterCreateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAssetFilterCreateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterCreateSettings.Help"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAssetFilterCreateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterCreateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAssetFilterCreateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAssetFilterCreateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterCreateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAssetFilterCreateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAssetFilterCreateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetFilterCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetFilterCreate(CombinatorialConfigure<AzureAmsAssetFilterCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetFilterCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterDelete(AzureAmsAssetFilterDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetFilterDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterDeleteSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterDeleteSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterDelete(Configure<AzureAmsAssetFilterDeleteSettings> configurator)
        {
            return AzureAmsAssetFilterDelete(configurator(new AzureAmsAssetFilterDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterDeleteSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterDeleteSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetFilterDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetFilterDelete(CombinatorialConfigure<AzureAmsAssetFilterDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetFilterDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterList(AzureAmsAssetFilterListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetFilterListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterListSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterListSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterList(Configure<AzureAmsAssetFilterListSettings> configurator)
        {
            return AzureAmsAssetFilterList(configurator(new AzureAmsAssetFilterListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterListSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterListSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetFilterListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetFilterList(CombinatorialConfigure<AzureAmsAssetFilterListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetFilterList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterShow(AzureAmsAssetFilterShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetFilterShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterShowSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterShowSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetFilterShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterShow(Configure<AzureAmsAssetFilterShowSettings> configurator)
        {
            return AzureAmsAssetFilterShow(configurator(new AzureAmsAssetFilterShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterShowSettings.AccountName"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterShowSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetFilterShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetFilterShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetFilterShow(CombinatorialConfigure<AzureAmsAssetFilterShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetFilterShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterUpdate(AzureAmsAssetFilterUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetFilterUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Add"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterUpdateSettings.AssetName"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAssetFilterUpdateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAssetFilterUpdateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAssetFilterUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAssetFilterUpdateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAssetFilterUpdateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Set"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAssetFilterUpdateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetFilterUpdate(Configure<AzureAmsAssetFilterUpdateSettings> configurator)
        {
            return AzureAmsAssetFilterUpdate(configurator(new AzureAmsAssetFilterUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetFilterUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Add"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsAssetFilterUpdateSettings.AssetName"/></li>
        ///     <li><c>--bitrate</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Bitrate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Debug"/></li>
        ///     <li><c>--end-timestamp</c> via <see cref="AzureAmsAssetFilterUpdateSettings.EndTimestamp"/></li>
        ///     <li><c>--first-quality</c> via <see cref="AzureAmsAssetFilterUpdateSettings.FirstQuality"/></li>
        ///     <li><c>--force-end-timestamp</c> via <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAssetFilterUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></li>
        ///     <li><c>--live-backoff-duration</c> via <see cref="AzureAmsAssetFilterUpdateSettings.LiveBackoffDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Output"/></li>
        ///     <li><c>--presentation-window-duration</c> via <see cref="AzureAmsAssetFilterUpdateSettings.PresentationWindowDuration"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetFilterUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Set"/></li>
        ///     <li><c>--start-timestamp</c> via <see cref="AzureAmsAssetFilterUpdateSettings.StartTimestamp"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Subscription"/></li>
        ///     <li><c>--timescale</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Timescale"/></li>
        ///     <li><c>--tracks</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Tracks"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetFilterUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetFilterUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetFilterUpdate(CombinatorialConfigure<AzureAmsAssetFilterUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetFilterUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetCreate(AzureAmsAssetCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetCreateSettings.AccountName"/></li>
        ///     <li><c>--alternate-id</c> via <see cref="AzureAmsAssetCreateSettings.AlternateId"/></li>
        ///     <li><c>--container</c> via <see cref="AzureAmsAssetCreateSettings.Container"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsAssetCreateSettings.Description"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureAmsAssetCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetCreate(Configure<AzureAmsAssetCreateSettings> configurator)
        {
            return AzureAmsAssetCreate(configurator(new AzureAmsAssetCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetCreateSettings.AccountName"/></li>
        ///     <li><c>--alternate-id</c> via <see cref="AzureAmsAssetCreateSettings.AlternateId"/></li>
        ///     <li><c>--container</c> via <see cref="AzureAmsAssetCreateSettings.Container"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsAssetCreateSettings.Description"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureAmsAssetCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetCreate(CombinatorialConfigure<AzureAmsAssetCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetDelete(AzureAmsAssetDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetDelete(Configure<AzureAmsAssetDeleteSettings> configurator)
        {
            return AzureAmsAssetDelete(configurator(new AzureAmsAssetDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetDelete(CombinatorialConfigure<AzureAmsAssetDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetGetEncryptionKey(AzureAmsAssetGetEncryptionKeySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetGetEncryptionKeySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetGetEncryptionKey(Configure<AzureAmsAssetGetEncryptionKeySettings> configurator)
        {
            return AzureAmsAssetGetEncryptionKey(configurator(new AzureAmsAssetGetEncryptionKeySettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetGetEncryptionKeySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetGetEncryptionKeySettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetGetEncryptionKey(CombinatorialConfigure<AzureAmsAssetGetEncryptionKeySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetGetEncryptionKey, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetGetSasUrls(AzureAmsAssetGetSasUrlsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetGetSasUrlsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Debug"/></li>
        ///     <li><c>--expiry</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Expiry"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Output"/></li>
        ///     <li><c>--permissions</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Permissions"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetGetSasUrls(Configure<AzureAmsAssetGetSasUrlsSettings> configurator)
        {
            return AzureAmsAssetGetSasUrls(configurator(new AzureAmsAssetGetSasUrlsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Debug"/></li>
        ///     <li><c>--expiry</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Expiry"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Output"/></li>
        ///     <li><c>--permissions</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Permissions"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetGetSasUrlsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetGetSasUrlsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetGetSasUrls(CombinatorialConfigure<AzureAmsAssetGetSasUrlsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetGetSasUrls, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetList(AzureAmsAssetListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsAssetListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsAssetListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsAssetListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetList(Configure<AzureAmsAssetListSettings> configurator)
        {
            return AzureAmsAssetList(configurator(new AzureAmsAssetListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsAssetListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsAssetListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsAssetListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetList(CombinatorialConfigure<AzureAmsAssetListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetListStreamingLocators(AzureAmsAssetListStreamingLocatorsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetListStreamingLocatorsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetListStreamingLocators(Configure<AzureAmsAssetListStreamingLocatorsSettings> configurator)
        {
            return AzureAmsAssetListStreamingLocators(configurator(new AzureAmsAssetListStreamingLocatorsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetListStreamingLocatorsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetListStreamingLocatorsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetListStreamingLocators(CombinatorialConfigure<AzureAmsAssetListStreamingLocatorsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetListStreamingLocators, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetShow(AzureAmsAssetShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetShow(Configure<AzureAmsAssetShowSettings> configurator)
        {
            return AzureAmsAssetShow(configurator(new AzureAmsAssetShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetShow(CombinatorialConfigure<AzureAmsAssetShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAssetUpdate(AzureAmsAssetUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAssetUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsAssetUpdateSettings.Add"/></li>
        ///     <li><c>--alternate-id</c> via <see cref="AzureAmsAssetUpdateSettings.AlternateId"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsAssetUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAssetUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAssetUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAssetUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAssetUpdate(Configure<AzureAmsAssetUpdateSettings> configurator)
        {
            return AzureAmsAssetUpdate(configurator(new AzureAmsAssetUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAssetUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsAssetUpdateSettings.Add"/></li>
        ///     <li><c>--alternate-id</c> via <see cref="AzureAmsAssetUpdateSettings.AlternateId"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAssetUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsAssetUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsAssetUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAssetUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAssetUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAssetUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAssetUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAssetUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsAssetUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAssetUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsAssetUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAssetUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAssetUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAssetUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAssetUpdate(CombinatorialConfigure<AzureAmsAssetUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAssetUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyCreate(AzureAmsContentKeyPolicyCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AccountName"/></li>
        ///     <li><c>--alt-rsa-token-keys</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></li>
        ///     <li><c>--alt-symmetric-token-keys</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></li>
        ///     <li><c>--alt-x509-token-keys</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></li>
        ///     <li><c>--ask</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Ask"/></li>
        ///     <li><c>--audience</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Audience"/></li>
        ///     <li><c>--clear-key-configuration</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.ClearKeyConfiguration"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Description"/></li>
        ///     <li><c>--fair-play-pfx</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfx"/></li>
        ///     <li><c>--fair-play-pfx-password</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfxPassword"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Help"/></li>
        ///     <li><c>--issuer</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Issuer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Name"/></li>
        ///     <li><c>--open-id-connect-discovery-document</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenIdConnectDiscoveryDocument"/></li>
        ///     <li><c>--open-restriction</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenRestriction"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Output"/></li>
        ///     <li><c>--play-ready-template</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.PlayReadyTemplate"/></li>
        ///     <li><c>--policy-option-name</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.PolicyOptionName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Query"/></li>
        ///     <li><c>--rental-and-lease-key-type</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalAndLeaseKeyType"/></li>
        ///     <li><c>--rental-duration</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalDuration"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Subscription"/></li>
        ///     <li><c>--token-claims</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></li>
        ///     <li><c>--token-key</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKey"/></li>
        ///     <li><c>--token-key-type</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKeyType"/></li>
        ///     <li><c>--token-type</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenType"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Verbose"/></li>
        ///     <li><c>--widevine-template</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.WidevineTemplate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyCreate(Configure<AzureAmsContentKeyPolicyCreateSettings> configurator)
        {
            return AzureAmsContentKeyPolicyCreate(configurator(new AzureAmsContentKeyPolicyCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AccountName"/></li>
        ///     <li><c>--alt-rsa-token-keys</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></li>
        ///     <li><c>--alt-symmetric-token-keys</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></li>
        ///     <li><c>--alt-x509-token-keys</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></li>
        ///     <li><c>--ask</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Ask"/></li>
        ///     <li><c>--audience</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Audience"/></li>
        ///     <li><c>--clear-key-configuration</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.ClearKeyConfiguration"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Description"/></li>
        ///     <li><c>--fair-play-pfx</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfx"/></li>
        ///     <li><c>--fair-play-pfx-password</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfxPassword"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Help"/></li>
        ///     <li><c>--issuer</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Issuer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Name"/></li>
        ///     <li><c>--open-id-connect-discovery-document</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenIdConnectDiscoveryDocument"/></li>
        ///     <li><c>--open-restriction</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenRestriction"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Output"/></li>
        ///     <li><c>--play-ready-template</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.PlayReadyTemplate"/></li>
        ///     <li><c>--policy-option-name</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.PolicyOptionName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Query"/></li>
        ///     <li><c>--rental-and-lease-key-type</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalAndLeaseKeyType"/></li>
        ///     <li><c>--rental-duration</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalDuration"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Subscription"/></li>
        ///     <li><c>--token-claims</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></li>
        ///     <li><c>--token-key</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKey"/></li>
        ///     <li><c>--token-key-type</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKeyType"/></li>
        ///     <li><c>--token-type</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenType"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.Verbose"/></li>
        ///     <li><c>--widevine-template</c> via <see cref="AzureAmsContentKeyPolicyCreateSettings.WidevineTemplate"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyCreate(CombinatorialConfigure<AzureAmsContentKeyPolicyCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyDelete(AzureAmsContentKeyPolicyDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyDelete(Configure<AzureAmsContentKeyPolicyDeleteSettings> configurator)
        {
            return AzureAmsContentKeyPolicyDelete(configurator(new AzureAmsContentKeyPolicyDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyDelete(CombinatorialConfigure<AzureAmsContentKeyPolicyDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyList(AzureAmsContentKeyPolicyListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyList(Configure<AzureAmsContentKeyPolicyListSettings> configurator)
        {
            return AzureAmsContentKeyPolicyList(configurator(new AzureAmsContentKeyPolicyListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyList(CombinatorialConfigure<AzureAmsContentKeyPolicyListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyShow(AzureAmsContentKeyPolicyShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Verbose"/></li>
        ///     <li><c>--with-secrets</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.WithSecrets"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyShow(Configure<AzureAmsContentKeyPolicyShowSettings> configurator)
        {
            return AzureAmsContentKeyPolicyShow(configurator(new AzureAmsContentKeyPolicyShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.Verbose"/></li>
        ///     <li><c>--with-secrets</c> via <see cref="AzureAmsContentKeyPolicyShowSettings.WithSecrets"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyShow(CombinatorialConfigure<AzureAmsContentKeyPolicyShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyUpdate(AzureAmsContentKeyPolicyUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyUpdate(Configure<AzureAmsContentKeyPolicyUpdateSettings> configurator)
        {
            return AzureAmsContentKeyPolicyUpdate(configurator(new AzureAmsContentKeyPolicyUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyUpdate(CombinatorialConfigure<AzureAmsContentKeyPolicyUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsJobCancel(AzureAmsJobCancelSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsJobCancelSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobCancelSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobCancelSettings.Debug"/></li>
        ///     <li><c>--delete</c> via <see cref="AzureAmsJobCancelSettings.Delete"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobCancelSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobCancelSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobCancelSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobCancelSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobCancelSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobCancelSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobCancelSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobCancelSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobCancelSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsJobCancel(Configure<AzureAmsJobCancelSettings> configurator)
        {
            return AzureAmsJobCancel(configurator(new AzureAmsJobCancelSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobCancelSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobCancelSettings.Debug"/></li>
        ///     <li><c>--delete</c> via <see cref="AzureAmsJobCancelSettings.Delete"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobCancelSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobCancelSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobCancelSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobCancelSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobCancelSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobCancelSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobCancelSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobCancelSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobCancelSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsJobCancelSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsJobCancel(CombinatorialConfigure<AzureAmsJobCancelSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsJobCancel, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsJobDelete(AzureAmsJobDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsJobDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobDeleteSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobDeleteSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsJobDelete(Configure<AzureAmsJobDeleteSettings> configurator)
        {
            return AzureAmsJobDelete(configurator(new AzureAmsJobDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobDeleteSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobDeleteSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsJobDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsJobDelete(CombinatorialConfigure<AzureAmsJobDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsJobDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsJobList(AzureAmsJobListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsJobListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsJobListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsJobListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobListSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobListSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsJobList(Configure<AzureAmsJobListSettings> configurator)
        {
            return AzureAmsJobList(configurator(new AzureAmsJobListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsJobListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsJobListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobListSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobListSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsJobListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsJobList(CombinatorialConfigure<AzureAmsJobListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsJobList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsJobShow(AzureAmsJobShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsJobShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobShowSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobShowSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsJobShow(Configure<AzureAmsJobShowSettings> configurator)
        {
            return AzureAmsJobShow(configurator(new AzureAmsJobShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobShowSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobShowSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsJobShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsJobShow(CombinatorialConfigure<AzureAmsJobShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsJobShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsJobStart(AzureAmsJobStartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsJobStartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobStartSettings.AccountName"/></li>
        ///     <li><c>--base-uri</c> via <see cref="AzureAmsJobStartSettings.BaseUri"/></li>
        ///     <li><c>--correlation-data</c> via <see cref="AzureAmsJobStartSettings.CorrelationData"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobStartSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsJobStartSettings.Description"/></li>
        ///     <li><c>--files</c> via <see cref="AzureAmsJobStartSettings.Files"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobStartSettings.Ids"/></li>
        ///     <li><c>--input-asset-name</c> via <see cref="AzureAmsJobStartSettings.InputAssetName"/></li>
        ///     <li><c>--label</c> via <see cref="AzureAmsJobStartSettings.Label"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobStartSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobStartSettings.Output"/></li>
        ///     <li><c>--output-assets</c> via <see cref="AzureAmsJobStartSettings.OutputAssets"/></li>
        ///     <li><c>--priority</c> via <see cref="AzureAmsJobStartSettings.Priority"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobStartSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobStartSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobStartSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsJobStart(Configure<AzureAmsJobStartSettings> configurator)
        {
            return AzureAmsJobStart(configurator(new AzureAmsJobStartSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobStartSettings.AccountName"/></li>
        ///     <li><c>--base-uri</c> via <see cref="AzureAmsJobStartSettings.BaseUri"/></li>
        ///     <li><c>--correlation-data</c> via <see cref="AzureAmsJobStartSettings.CorrelationData"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobStartSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsJobStartSettings.Description"/></li>
        ///     <li><c>--files</c> via <see cref="AzureAmsJobStartSettings.Files"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobStartSettings.Ids"/></li>
        ///     <li><c>--input-asset-name</c> via <see cref="AzureAmsJobStartSettings.InputAssetName"/></li>
        ///     <li><c>--label</c> via <see cref="AzureAmsJobStartSettings.Label"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobStartSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobStartSettings.Output"/></li>
        ///     <li><c>--output-assets</c> via <see cref="AzureAmsJobStartSettings.OutputAssets"/></li>
        ///     <li><c>--priority</c> via <see cref="AzureAmsJobStartSettings.Priority"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobStartSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobStartSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobStartSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsJobStartSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsJobStart(CombinatorialConfigure<AzureAmsJobStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsJobStart, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsJobUpdate(AzureAmsJobUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsJobUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsJobUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsJobUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsJobUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobUpdateSettings.Output"/></li>
        ///     <li><c>--priority</c> via <see cref="AzureAmsJobUpdateSettings.Priority"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsJobUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsJobUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobUpdateSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobUpdateSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsJobUpdate(Configure<AzureAmsJobUpdateSettings> configurator)
        {
            return AzureAmsJobUpdate(configurator(new AzureAmsJobUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsJobUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsJobUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsJobUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsJobUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsJobUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsJobUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsJobUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsJobUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsJobUpdateSettings.Output"/></li>
        ///     <li><c>--priority</c> via <see cref="AzureAmsJobUpdateSettings.Priority"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsJobUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsJobUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsJobUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsJobUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsJobUpdateSettings.Subscription"/></li>
        ///     <li><c>--transform-name</c> via <see cref="AzureAmsJobUpdateSettings.TransformName"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsJobUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsJobUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsJobUpdate(CombinatorialConfigure<AzureAmsJobUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsJobUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventCreate(AzureAmsLiveEventCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--access-token</c> via <see cref="AzureAmsLiveEventCreateSettings.AccessToken"/></li>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventCreateSettings.AccountName"/></li>
        ///     <li><c>--alternative-media-id</c> via <see cref="AzureAmsLiveEventCreateSettings.AlternativeMediaId"/></li>
        ///     <li><c>--auto-start</c> via <see cref="AzureAmsLiveEventCreateSettings.AutoStart"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsLiveEventCreateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsLiveEventCreateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsLiveEventCreateSettings.Description"/></li>
        ///     <li><c>--encoding-type</c> via <see cref="AzureAmsLiveEventCreateSettings.EncodingType"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventCreateSettings.Help"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsLiveEventCreateSettings.Ips"/></li>
        ///     <li><c>--key-frame-interval-duration</c> via <see cref="AzureAmsLiveEventCreateSettings.KeyFrameIntervalDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventCreateSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventCreateSettings.Output"/></li>
        ///     <li><c>--preset-name</c> via <see cref="AzureAmsLiveEventCreateSettings.PresetName"/></li>
        ///     <li><c>--preview-ips</c> via <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></li>
        ///     <li><c>--preview-locator</c> via <see cref="AzureAmsLiveEventCreateSettings.PreviewLocator"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--streaming-policy-name</c> via <see cref="AzureAmsLiveEventCreateSettings.StreamingPolicyName"/></li>
        ///     <li><c>--streaming-protocol</c> via <see cref="AzureAmsLiveEventCreateSettings.StreamingProtocol"/></li>
        ///     <li><c>--stream-options</c> via <see cref="AzureAmsLiveEventCreateSettings.StreamOptions"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsLiveEventCreateSettings.Tags"/></li>
        ///     <li><c>--vanity-url</c> via <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventCreate(Configure<AzureAmsLiveEventCreateSettings> configurator)
        {
            return AzureAmsLiveEventCreate(configurator(new AzureAmsLiveEventCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--access-token</c> via <see cref="AzureAmsLiveEventCreateSettings.AccessToken"/></li>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventCreateSettings.AccountName"/></li>
        ///     <li><c>--alternative-media-id</c> via <see cref="AzureAmsLiveEventCreateSettings.AlternativeMediaId"/></li>
        ///     <li><c>--auto-start</c> via <see cref="AzureAmsLiveEventCreateSettings.AutoStart"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsLiveEventCreateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsLiveEventCreateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsLiveEventCreateSettings.Description"/></li>
        ///     <li><c>--encoding-type</c> via <see cref="AzureAmsLiveEventCreateSettings.EncodingType"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventCreateSettings.Help"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsLiveEventCreateSettings.Ips"/></li>
        ///     <li><c>--key-frame-interval-duration</c> via <see cref="AzureAmsLiveEventCreateSettings.KeyFrameIntervalDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventCreateSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventCreateSettings.Output"/></li>
        ///     <li><c>--preset-name</c> via <see cref="AzureAmsLiveEventCreateSettings.PresetName"/></li>
        ///     <li><c>--preview-ips</c> via <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></li>
        ///     <li><c>--preview-locator</c> via <see cref="AzureAmsLiveEventCreateSettings.PreviewLocator"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--streaming-policy-name</c> via <see cref="AzureAmsLiveEventCreateSettings.StreamingPolicyName"/></li>
        ///     <li><c>--streaming-protocol</c> via <see cref="AzureAmsLiveEventCreateSettings.StreamingProtocol"/></li>
        ///     <li><c>--stream-options</c> via <see cref="AzureAmsLiveEventCreateSettings.StreamOptions"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsLiveEventCreateSettings.Tags"/></li>
        ///     <li><c>--vanity-url</c> via <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventCreate(CombinatorialConfigure<AzureAmsLiveEventCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventDelete(AzureAmsLiveEventDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventDelete(Configure<AzureAmsLiveEventDeleteSettings> configurator)
        {
            return AzureAmsLiveEventDelete(configurator(new AzureAmsLiveEventDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventDelete(CombinatorialConfigure<AzureAmsLiveEventDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventList(AzureAmsLiveEventListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventList(Configure<AzureAmsLiveEventListSettings> configurator)
        {
            return AzureAmsLiveEventList(configurator(new AzureAmsLiveEventListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventList(CombinatorialConfigure<AzureAmsLiveEventListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventReset(AzureAmsLiveEventResetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventResetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventResetSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventResetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventResetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventResetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventResetSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventResetSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventResetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventResetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventResetSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventResetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventResetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventReset(Configure<AzureAmsLiveEventResetSettings> configurator)
        {
            return AzureAmsLiveEventReset(configurator(new AzureAmsLiveEventResetSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventResetSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventResetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventResetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventResetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventResetSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventResetSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventResetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventResetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventResetSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventResetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventResetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventResetSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventReset(CombinatorialConfigure<AzureAmsLiveEventResetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventReset, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventShow(AzureAmsLiveEventShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventShow(Configure<AzureAmsLiveEventShowSettings> configurator)
        {
            return AzureAmsLiveEventShow(configurator(new AzureAmsLiveEventShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventShow(CombinatorialConfigure<AzureAmsLiveEventShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventStart(AzureAmsLiveEventStartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventStartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventStartSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventStartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventStartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventStartSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventStartSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventStartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventStartSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventStartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventStart(Configure<AzureAmsLiveEventStartSettings> configurator)
        {
            return AzureAmsLiveEventStart(configurator(new AzureAmsLiveEventStartSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventStartSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventStartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventStartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventStartSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventStartSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventStartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventStartSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventStartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventStartSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventStart(CombinatorialConfigure<AzureAmsLiveEventStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventStart, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventStop(AzureAmsLiveEventStopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventStopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventStopSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventStopSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventStopSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventStopSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventStopSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventStopSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventStopSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventStopSettings.Query"/></li>
        ///     <li><c>--remove-outputs-on-stop</c> via <see cref="AzureAmsLiveEventStopSettings.RemoveOutputsOnStop"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventStopSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventStopSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventStopSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventStop(Configure<AzureAmsLiveEventStopSettings> configurator)
        {
            return AzureAmsLiveEventStop(configurator(new AzureAmsLiveEventStopSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventStopSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventStopSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventStopSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventStopSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventStopSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsLiveEventStopSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventStopSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventStopSettings.Query"/></li>
        ///     <li><c>--remove-outputs-on-stop</c> via <see cref="AzureAmsLiveEventStopSettings.RemoveOutputsOnStop"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventStopSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventStopSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventStopSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventStopSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventStop(CombinatorialConfigure<AzureAmsLiveEventStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventStop, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventUpdate(AzureAmsLiveEventUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsLiveEventUpdateSettings.Add"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsLiveEventUpdateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsLiveEventUpdateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsLiveEventUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsLiveEventUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></li>
        ///     <li><c>--key-frame-interval-duration</c> via <see cref="AzureAmsLiveEventUpdateSettings.KeyFrameIntervalDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventUpdateSettings.Output"/></li>
        ///     <li><c>--preview-ips</c> via <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsLiveEventUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsLiveEventUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsLiveEventUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventUpdate(Configure<AzureAmsLiveEventUpdateSettings> configurator)
        {
            return AzureAmsLiveEventUpdate(configurator(new AzureAmsLiveEventUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsLiveEventUpdateSettings.Add"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsLiveEventUpdateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsLiveEventUpdateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsLiveEventUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsLiveEventUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></li>
        ///     <li><c>--key-frame-interval-duration</c> via <see cref="AzureAmsLiveEventUpdateSettings.KeyFrameIntervalDuration"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventUpdateSettings.Output"/></li>
        ///     <li><c>--preview-ips</c> via <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsLiveEventUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsLiveEventUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsLiveEventUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventUpdate(CombinatorialConfigure<AzureAmsLiveEventUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventWait(AzureAmsLiveEventWaitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveEventWaitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventWaitSettings.AccountName"/></li>
        ///     <li><c>--created</c> via <see cref="AzureAmsLiveEventWaitSettings.Created"/></li>
        ///     <li><c>--custom</c> via <see cref="AzureAmsLiveEventWaitSettings.Custom"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventWaitSettings.Debug"/></li>
        ///     <li><c>--deleted</c> via <see cref="AzureAmsLiveEventWaitSettings.Deleted"/></li>
        ///     <li><c>--exists</c> via <see cref="AzureAmsLiveEventWaitSettings.Exists"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventWaitSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventWaitSettings.Ids"/></li>
        ///     <li><c>--interval</c> via <see cref="AzureAmsLiveEventWaitSettings.Interval"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventWaitSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventWaitSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventWaitSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventWaitSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventWaitSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAmsLiveEventWaitSettings.Timeout"/></li>
        ///     <li><c>--updated</c> via <see cref="AzureAmsLiveEventWaitSettings.Updated"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventWaitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveEventWait(Configure<AzureAmsLiveEventWaitSettings> configurator)
        {
            return AzureAmsLiveEventWait(configurator(new AzureAmsLiveEventWaitSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveEventWaitSettings.AccountName"/></li>
        ///     <li><c>--created</c> via <see cref="AzureAmsLiveEventWaitSettings.Created"/></li>
        ///     <li><c>--custom</c> via <see cref="AzureAmsLiveEventWaitSettings.Custom"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveEventWaitSettings.Debug"/></li>
        ///     <li><c>--deleted</c> via <see cref="AzureAmsLiveEventWaitSettings.Deleted"/></li>
        ///     <li><c>--exists</c> via <see cref="AzureAmsLiveEventWaitSettings.Exists"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveEventWaitSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveEventWaitSettings.Ids"/></li>
        ///     <li><c>--interval</c> via <see cref="AzureAmsLiveEventWaitSettings.Interval"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveEventWaitSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveEventWaitSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveEventWaitSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveEventWaitSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveEventWaitSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAmsLiveEventWaitSettings.Timeout"/></li>
        ///     <li><c>--updated</c> via <see cref="AzureAmsLiveEventWaitSettings.Updated"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveEventWaitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveEventWaitSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveEventWait(CombinatorialConfigure<AzureAmsLiveEventWaitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveEventWait, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputCreate(AzureAmsLiveOutputCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveOutputCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.AccountName"/></li>
        ///     <li><c>--archive-window-length</c> via <see cref="AzureAmsLiveOutputCreateSettings.ArchiveWindowLength"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsLiveOutputCreateSettings.Description"/></li>
        ///     <li><c>--fragments-per-ts-segment</c> via <see cref="AzureAmsLiveOutputCreateSettings.FragmentsPerTsSegment"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputCreateSettings.Help"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.LiveEventName"/></li>
        ///     <li><c>--manifest-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.ManifestName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveOutputCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputCreateSettings.Output"/></li>
        ///     <li><c>--output-snap-time</c> via <see cref="AzureAmsLiveOutputCreateSettings.OutputSnapTime"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputCreate(Configure<AzureAmsLiveOutputCreateSettings> configurator)
        {
            return AzureAmsLiveOutputCreate(configurator(new AzureAmsLiveOutputCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.AccountName"/></li>
        ///     <li><c>--archive-window-length</c> via <see cref="AzureAmsLiveOutputCreateSettings.ArchiveWindowLength"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.AssetName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsLiveOutputCreateSettings.Description"/></li>
        ///     <li><c>--fragments-per-ts-segment</c> via <see cref="AzureAmsLiveOutputCreateSettings.FragmentsPerTsSegment"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputCreateSettings.Help"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.LiveEventName"/></li>
        ///     <li><c>--manifest-name</c> via <see cref="AzureAmsLiveOutputCreateSettings.ManifestName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveOutputCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputCreateSettings.Output"/></li>
        ///     <li><c>--output-snap-time</c> via <see cref="AzureAmsLiveOutputCreateSettings.OutputSnapTime"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveOutputCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveOutputCreate(CombinatorialConfigure<AzureAmsLiveOutputCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveOutputCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputDelete(AzureAmsLiveOutputDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveOutputDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputDeleteSettings.LiveEventName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputDelete(Configure<AzureAmsLiveOutputDeleteSettings> configurator)
        {
            return AzureAmsLiveOutputDelete(configurator(new AzureAmsLiveOutputDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputDeleteSettings.LiveEventName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveOutputDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveOutputDelete(CombinatorialConfigure<AzureAmsLiveOutputDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveOutputDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputList(AzureAmsLiveOutputListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveOutputListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputListSettings.Help"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputListSettings.LiveEventName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputList(Configure<AzureAmsLiveOutputListSettings> configurator)
        {
            return AzureAmsLiveOutputList(configurator(new AzureAmsLiveOutputListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputListSettings.Help"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputListSettings.LiveEventName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveOutputListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveOutputList(CombinatorialConfigure<AzureAmsLiveOutputListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveOutputList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputShow(AzureAmsLiveOutputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsLiveOutputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveOutputShowSettings.Ids"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputShowSettings.LiveEventName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveOutputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsLiveOutputShow(Configure<AzureAmsLiveOutputShowSettings> configurator)
        {
            return AzureAmsLiveOutputShow(configurator(new AzureAmsLiveOutputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsLiveOutputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsLiveOutputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsLiveOutputShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsLiveOutputShowSettings.Ids"/></li>
        ///     <li><c>--live-event-name</c> via <see cref="AzureAmsLiveOutputShowSettings.LiveEventName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsLiveOutputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsLiveOutputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsLiveOutputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsLiveOutputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsLiveOutputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsLiveOutputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsLiveOutputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsLiveOutputShow(CombinatorialConfigure<AzureAmsLiveOutputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsLiveOutputShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointCreate(AzureAmsStreamingEndpointCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.AccountName"/></li>
        ///     <li><c>--auto-start</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.AutoStart"/></li>
        ///     <li><c>--availability-set-name</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.AvailabilitySetName"/></li>
        ///     <li><c>--cdn-profile</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProfile"/></li>
        ///     <li><c>--cdn-provider</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProvider"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--custom-host-names</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Description"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Help"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></li>
        ///     <li><c>--max-cache-age</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.MaxCacheAge"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--scale-units</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.ScaleUnits"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointCreate(Configure<AzureAmsStreamingEndpointCreateSettings> configurator)
        {
            return AzureAmsStreamingEndpointCreate(configurator(new AzureAmsStreamingEndpointCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.AccountName"/></li>
        ///     <li><c>--auto-start</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.AutoStart"/></li>
        ///     <li><c>--availability-set-name</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.AvailabilitySetName"/></li>
        ///     <li><c>--cdn-profile</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProfile"/></li>
        ///     <li><c>--cdn-provider</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProvider"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--custom-host-names</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Description"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Help"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></li>
        ///     <li><c>--max-cache-age</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.MaxCacheAge"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--scale-units</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.ScaleUnits"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointCreate(CombinatorialConfigure<AzureAmsStreamingEndpointCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointDelete(AzureAmsStreamingEndpointDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointDelete(Configure<AzureAmsStreamingEndpointDeleteSettings> configurator)
        {
            return AzureAmsStreamingEndpointDelete(configurator(new AzureAmsStreamingEndpointDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointDelete(CombinatorialConfigure<AzureAmsStreamingEndpointDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointList(AzureAmsStreamingEndpointListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointList(Configure<AzureAmsStreamingEndpointListSettings> configurator)
        {
            return AzureAmsStreamingEndpointList(configurator(new AzureAmsStreamingEndpointListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointList(CombinatorialConfigure<AzureAmsStreamingEndpointListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointScale(AzureAmsStreamingEndpointScaleSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointScaleSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.ResourceGroup"/></li>
        ///     <li><c>--scale-units</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.ScaleUnits"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointScale(Configure<AzureAmsStreamingEndpointScaleSettings> configurator)
        {
            return AzureAmsStreamingEndpointScale(configurator(new AzureAmsStreamingEndpointScaleSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.ResourceGroup"/></li>
        ///     <li><c>--scale-units</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.ScaleUnits"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointScaleSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointScaleSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointScale(CombinatorialConfigure<AzureAmsStreamingEndpointScaleSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointScale, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointShow(AzureAmsStreamingEndpointShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointShow(Configure<AzureAmsStreamingEndpointShowSettings> configurator)
        {
            return AzureAmsStreamingEndpointShow(configurator(new AzureAmsStreamingEndpointShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointShow(CombinatorialConfigure<AzureAmsStreamingEndpointShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointStart(AzureAmsStreamingEndpointStartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointStartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointStartSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointStartSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointStart(Configure<AzureAmsStreamingEndpointStartSettings> configurator)
        {
            return AzureAmsStreamingEndpointStart(configurator(new AzureAmsStreamingEndpointStartSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointStartSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointStartSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointStartSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointStartSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointStart(CombinatorialConfigure<AzureAmsStreamingEndpointStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointStart, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointStop(AzureAmsStreamingEndpointStopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointStopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointStopSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointStopSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointStop(Configure<AzureAmsStreamingEndpointStopSettings> configurator)
        {
            return AzureAmsStreamingEndpointStop(configurator(new AzureAmsStreamingEndpointStopSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointStopSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointStopSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointStopSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointStopSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointStop(CombinatorialConfigure<AzureAmsStreamingEndpointStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointStop, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointUpdate(AzureAmsStreamingEndpointUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Add"/></li>
        ///     <li><c>--cdn-profile</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProfile"/></li>
        ///     <li><c>--cdn-provider</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProvider"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--custom-host-names</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Description"/></li>
        ///     <li><c>--disable-cdn</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.DisableCdn"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></li>
        ///     <li><c>--max-cache-age</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.MaxCacheAge"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointUpdate(Configure<AzureAmsStreamingEndpointUpdateSettings> configurator)
        {
            return AzureAmsStreamingEndpointUpdate(configurator(new AzureAmsStreamingEndpointUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Add"/></li>
        ///     <li><c>--cdn-profile</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProfile"/></li>
        ///     <li><c>--cdn-provider</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProvider"/></li>
        ///     <li><c>--client-access-policy</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.ClientAccessPolicy"/></li>
        ///     <li><c>--cross-domain-policy</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CrossDomainPolicy"/></li>
        ///     <li><c>--custom-host-names</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Description"/></li>
        ///     <li><c>--disable-cdn</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.DisableCdn"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></li>
        ///     <li><c>--ips</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></li>
        ///     <li><c>--max-cache-age</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.MaxCacheAge"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Name"/></li>
        ///     <li><c>--no-wait</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointUpdate(CombinatorialConfigure<AzureAmsStreamingEndpointUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointWait(AzureAmsStreamingEndpointWaitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointWaitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.AccountName"/></li>
        ///     <li><c>--created</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Created"/></li>
        ///     <li><c>--custom</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Custom"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Debug"/></li>
        ///     <li><c>--deleted</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Deleted"/></li>
        ///     <li><c>--exists</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Exists"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></li>
        ///     <li><c>--interval</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Interval"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Timeout"/></li>
        ///     <li><c>--updated</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Updated"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointWait(Configure<AzureAmsStreamingEndpointWaitSettings> configurator)
        {
            return AzureAmsStreamingEndpointWait(configurator(new AzureAmsStreamingEndpointWaitSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.AccountName"/></li>
        ///     <li><c>--created</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Created"/></li>
        ///     <li><c>--custom</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Custom"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Debug"/></li>
        ///     <li><c>--deleted</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Deleted"/></li>
        ///     <li><c>--exists</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Exists"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></li>
        ///     <li><c>--interval</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Interval"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Subscription"/></li>
        ///     <li><c>--timeout</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Timeout"/></li>
        ///     <li><c>--updated</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Updated"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointWaitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointWaitSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointWait(CombinatorialConfigure<AzureAmsStreamingEndpointWaitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointWait, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorCreate(AzureAmsStreamingLocatorCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingLocatorCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.AccountName"/></li>
        ///     <li><c>--alternative-media-id</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.AlternativeMediaId"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.AssetName"/></li>
        ///     <li><c>--content-key-policy-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeyPolicyName"/></li>
        ///     <li><c>--content-keys</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeys"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Debug"/></li>
        ///     <li><c>--end-time</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.EndTime"/></li>
        ///     <li><c>--filters</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Filters"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--start-time</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.StartTime"/></li>
        ///     <li><c>--streaming-locator-id</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingLocatorId"/></li>
        ///     <li><c>--streaming-policy-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingPolicyName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorCreate(Configure<AzureAmsStreamingLocatorCreateSettings> configurator)
        {
            return AzureAmsStreamingLocatorCreate(configurator(new AzureAmsStreamingLocatorCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.AccountName"/></li>
        ///     <li><c>--alternative-media-id</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.AlternativeMediaId"/></li>
        ///     <li><c>--asset-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.AssetName"/></li>
        ///     <li><c>--content-key-policy-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeyPolicyName"/></li>
        ///     <li><c>--content-keys</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeys"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Debug"/></li>
        ///     <li><c>--end-time</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.EndTime"/></li>
        ///     <li><c>--filters</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Filters"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--start-time</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.StartTime"/></li>
        ///     <li><c>--streaming-locator-id</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingLocatorId"/></li>
        ///     <li><c>--streaming-policy-name</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingPolicyName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingLocatorCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingLocatorCreate(CombinatorialConfigure<AzureAmsStreamingLocatorCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingLocatorCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorDelete(AzureAmsStreamingLocatorDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingLocatorDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorDelete(Configure<AzureAmsStreamingLocatorDeleteSettings> configurator)
        {
            return AzureAmsStreamingLocatorDelete(configurator(new AzureAmsStreamingLocatorDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingLocatorDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingLocatorDelete(CombinatorialConfigure<AzureAmsStreamingLocatorDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingLocatorDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorGetPaths(AzureAmsStreamingLocatorGetPathsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingLocatorGetPathsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorGetPaths(Configure<AzureAmsStreamingLocatorGetPathsSettings> configurator)
        {
            return AzureAmsStreamingLocatorGetPaths(configurator(new AzureAmsStreamingLocatorGetPathsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorGetPathsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingLocatorGetPathsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingLocatorGetPaths(CombinatorialConfigure<AzureAmsStreamingLocatorGetPathsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingLocatorGetPaths, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorList(AzureAmsStreamingLocatorListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingLocatorListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsStreamingLocatorListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsStreamingLocatorListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsStreamingLocatorListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorList(Configure<AzureAmsStreamingLocatorListSettings> configurator)
        {
            return AzureAmsStreamingLocatorList(configurator(new AzureAmsStreamingLocatorListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsStreamingLocatorListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsStreamingLocatorListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsStreamingLocatorListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingLocatorListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingLocatorList(CombinatorialConfigure<AzureAmsStreamingLocatorListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingLocatorList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorListContentKeys(AzureAmsStreamingLocatorListContentKeysSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingLocatorListContentKeysSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorListContentKeys(Configure<AzureAmsStreamingLocatorListContentKeysSettings> configurator)
        {
            return AzureAmsStreamingLocatorListContentKeys(configurator(new AzureAmsStreamingLocatorListContentKeysSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingLocatorListContentKeysSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingLocatorListContentKeys(CombinatorialConfigure<AzureAmsStreamingLocatorListContentKeysSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingLocatorListContentKeys, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorShow(AzureAmsStreamingLocatorShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingLocatorShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingLocatorShow(Configure<AzureAmsStreamingLocatorShowSettings> configurator)
        {
            return AzureAmsStreamingLocatorShow(configurator(new AzureAmsStreamingLocatorShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingLocatorShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingLocatorShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingLocatorShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingLocatorShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingLocatorShow(CombinatorialConfigure<AzureAmsStreamingLocatorShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingLocatorShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyCreate(AzureAmsStreamingPolicyCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingPolicyCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.AccountName"/></li>
        ///     <li><c>--cbcs-clear-tracks</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsClearTracks"/></li>
        ///     <li><c>--cbcs-default-key-label</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyLabel"/></li>
        ///     <li><c>--cbcs-default-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyPolicyName"/></li>
        ///     <li><c>--cbcs-fair-play-allow-persistent-license</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></li>
        ///     <li><c>--cbcs-fair-play-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayTemplate"/></li>
        ///     <li><c>--cbcs-key-to-track-mappings</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsKeyToTrackMappings"/></li>
        ///     <li><c>--cbcs-play-ready-attributes</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyAttributes"/></li>
        ///     <li><c>--cbcs-play-ready-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyTemplate"/></li>
        ///     <li><c>--cbcs-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></li>
        ///     <li><c>--cbcs-widevine-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsWidevineTemplate"/></li>
        ///     <li><c>--cenc-clear-tracks</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencClearTracks"/></li>
        ///     <li><c>--cenc-default-key-label</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyLabel"/></li>
        ///     <li><c>--cenc-default-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyPolicyName"/></li>
        ///     <li><c>--cenc-disable-play-ready</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></li>
        ///     <li><c>--cenc-disable-widevine</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></li>
        ///     <li><c>--cenc-key-to-track-mappings</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencKeyToTrackMappings"/></li>
        ///     <li><c>--cenc-play-ready-attributes</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyAttributes"/></li>
        ///     <li><c>--cenc-play-ready-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyTemplate"/></li>
        ///     <li><c>--cenc-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></li>
        ///     <li><c>--cenc-widevine-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencWidevineTemplate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Debug"/></li>
        ///     <li><c>--default-content-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.DefaultContentKeyPolicyName"/></li>
        ///     <li><c>--envelope-clear-tracks</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeClearTracks"/></li>
        ///     <li><c>--envelope-default-key-label</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyLabel"/></li>
        ///     <li><c>--envelope-default-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyPolicyName"/></li>
        ///     <li><c>--envelope-key-to-track-mappings</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeKeyToTrackMappings"/></li>
        ///     <li><c>--envelope-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></li>
        ///     <li><c>--envelope-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeTemplate"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Name"/></li>
        ///     <li><c>--no-encryption-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyCreate(Configure<AzureAmsStreamingPolicyCreateSettings> configurator)
        {
            return AzureAmsStreamingPolicyCreate(configurator(new AzureAmsStreamingPolicyCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.AccountName"/></li>
        ///     <li><c>--cbcs-clear-tracks</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsClearTracks"/></li>
        ///     <li><c>--cbcs-default-key-label</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyLabel"/></li>
        ///     <li><c>--cbcs-default-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyPolicyName"/></li>
        ///     <li><c>--cbcs-fair-play-allow-persistent-license</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></li>
        ///     <li><c>--cbcs-fair-play-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayTemplate"/></li>
        ///     <li><c>--cbcs-key-to-track-mappings</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsKeyToTrackMappings"/></li>
        ///     <li><c>--cbcs-play-ready-attributes</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyAttributes"/></li>
        ///     <li><c>--cbcs-play-ready-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyTemplate"/></li>
        ///     <li><c>--cbcs-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></li>
        ///     <li><c>--cbcs-widevine-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsWidevineTemplate"/></li>
        ///     <li><c>--cenc-clear-tracks</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencClearTracks"/></li>
        ///     <li><c>--cenc-default-key-label</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyLabel"/></li>
        ///     <li><c>--cenc-default-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyPolicyName"/></li>
        ///     <li><c>--cenc-disable-play-ready</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></li>
        ///     <li><c>--cenc-disable-widevine</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></li>
        ///     <li><c>--cenc-key-to-track-mappings</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencKeyToTrackMappings"/></li>
        ///     <li><c>--cenc-play-ready-attributes</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyAttributes"/></li>
        ///     <li><c>--cenc-play-ready-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyTemplate"/></li>
        ///     <li><c>--cenc-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></li>
        ///     <li><c>--cenc-widevine-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.CencWidevineTemplate"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Debug"/></li>
        ///     <li><c>--default-content-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.DefaultContentKeyPolicyName"/></li>
        ///     <li><c>--envelope-clear-tracks</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeClearTracks"/></li>
        ///     <li><c>--envelope-default-key-label</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyLabel"/></li>
        ///     <li><c>--envelope-default-key-policy-name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyPolicyName"/></li>
        ///     <li><c>--envelope-key-to-track-mappings</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeKeyToTrackMappings"/></li>
        ///     <li><c>--envelope-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></li>
        ///     <li><c>--envelope-template</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeTemplate"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Name"/></li>
        ///     <li><c>--no-encryption-protocols</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingPolicyCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingPolicyCreate(CombinatorialConfigure<AzureAmsStreamingPolicyCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingPolicyCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyDelete(AzureAmsStreamingPolicyDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingPolicyDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyDelete(Configure<AzureAmsStreamingPolicyDeleteSettings> configurator)
        {
            return AzureAmsStreamingPolicyDelete(configurator(new AzureAmsStreamingPolicyDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingPolicyDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingPolicyDelete(CombinatorialConfigure<AzureAmsStreamingPolicyDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingPolicyDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyList(AzureAmsStreamingPolicyListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingPolicyListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsStreamingPolicyListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsStreamingPolicyListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsStreamingPolicyListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyList(Configure<AzureAmsStreamingPolicyListSettings> configurator)
        {
            return AzureAmsStreamingPolicyList(configurator(new AzureAmsStreamingPolicyListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsStreamingPolicyListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsStreamingPolicyListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureAmsStreamingPolicyListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingPolicyListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingPolicyList(CombinatorialConfigure<AzureAmsStreamingPolicyListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingPolicyList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyShow(AzureAmsStreamingPolicyShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingPolicyShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingPolicyShow(Configure<AzureAmsStreamingPolicyShowSettings> configurator)
        {
            return AzureAmsStreamingPolicyShow(configurator(new AzureAmsStreamingPolicyShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingPolicyShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingPolicyShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingPolicyShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingPolicyShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingPolicyShow(CombinatorialConfigure<AzureAmsStreamingPolicyShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingPolicyShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformCreate(AzureAmsTransformCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformCreateSettings.AccountName"/></li>
        ///     <li><c>--audio-language</c> via <see cref="AzureAmsTransformCreateSettings.AudioLanguage"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsTransformCreateSettings.Description"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformCreateSettings.Help"/></li>
        ///     <li><c>--insights-to-extract</c> via <see cref="AzureAmsTransformCreateSettings.InsightsToExtract"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformCreateSettings.Name"/></li>
        ///     <li><c>--on-error</c> via <see cref="AzureAmsTransformCreateSettings.OnError"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformCreateSettings.Output"/></li>
        ///     <li><c>--preset</c> via <see cref="AzureAmsTransformCreateSettings.Preset"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformCreateSettings.Query"/></li>
        ///     <li><c>--relative-priority</c> via <see cref="AzureAmsTransformCreateSettings.RelativePriority"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformCreate(Configure<AzureAmsTransformCreateSettings> configurator)
        {
            return AzureAmsTransformCreate(configurator(new AzureAmsTransformCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformCreateSettings.AccountName"/></li>
        ///     <li><c>--audio-language</c> via <see cref="AzureAmsTransformCreateSettings.AudioLanguage"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformCreateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsTransformCreateSettings.Description"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformCreateSettings.Help"/></li>
        ///     <li><c>--insights-to-extract</c> via <see cref="AzureAmsTransformCreateSettings.InsightsToExtract"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformCreateSettings.Name"/></li>
        ///     <li><c>--on-error</c> via <see cref="AzureAmsTransformCreateSettings.OnError"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformCreateSettings.Output"/></li>
        ///     <li><c>--preset</c> via <see cref="AzureAmsTransformCreateSettings.Preset"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformCreateSettings.Query"/></li>
        ///     <li><c>--relative-priority</c> via <see cref="AzureAmsTransformCreateSettings.RelativePriority"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformCreate(CombinatorialConfigure<AzureAmsTransformCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformDelete(AzureAmsTransformDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformDelete(Configure<AzureAmsTransformDeleteSettings> configurator)
        {
            return AzureAmsTransformDelete(configurator(new AzureAmsTransformDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformDelete(CombinatorialConfigure<AzureAmsTransformDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformDelete, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformList(AzureAmsTransformListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsTransformListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsTransformListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformList(Configure<AzureAmsTransformListSettings> configurator)
        {
            return AzureAmsTransformList(configurator(new AzureAmsTransformListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformListSettings.Debug"/></li>
        ///     <li><c>--filter</c> via <see cref="AzureAmsTransformListSettings.Filter"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformListSettings.Help"/></li>
        ///     <li><c>--orderby</c> via <see cref="AzureAmsTransformListSettings.Orderby"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformListSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformList(CombinatorialConfigure<AzureAmsTransformListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformList, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformShow(AzureAmsTransformShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformShow(Configure<AzureAmsTransformShowSettings> configurator)
        {
            return AzureAmsTransformShow(configurator(new AzureAmsTransformShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformShow(CombinatorialConfigure<AzureAmsTransformShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformUpdate(AzureAmsTransformUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsTransformUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsTransformUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsTransformUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsTransformUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsTransformUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformUpdate(Configure<AzureAmsTransformUpdateSettings> configurator)
        {
            return AzureAmsTransformUpdate(configurator(new AzureAmsTransformUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformUpdateSettings.AccountName"/></li>
        ///     <li><c>--add</c> via <see cref="AzureAmsTransformUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformUpdateSettings.Debug"/></li>
        ///     <li><c>--description</c> via <see cref="AzureAmsTransformUpdateSettings.Description"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureAmsTransformUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureAmsTransformUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureAmsTransformUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformUpdate(CombinatorialConfigure<AzureAmsTransformUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountMruSet(AzureAmsAccountMruSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountMruSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--count</c> via <see cref="AzureAmsAccountMruSetSettings.Count"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountMruSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountMruSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountMruSetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountMruSetSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountMruSetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountMruSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountMruSetSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountMruSetSettings.Subscription"/></li>
        ///     <li><c>--type</c> via <see cref="AzureAmsAccountMruSetSettings.Type"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountMruSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountMruSet(Configure<AzureAmsAccountMruSetSettings> configurator)
        {
            return AzureAmsAccountMruSet(configurator(new AzureAmsAccountMruSetSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--count</c> via <see cref="AzureAmsAccountMruSetSettings.Count"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountMruSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountMruSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountMruSetSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountMruSetSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountMruSetSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountMruSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountMruSetSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountMruSetSettings.Subscription"/></li>
        ///     <li><c>--type</c> via <see cref="AzureAmsAccountMruSetSettings.Type"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountMruSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountMruSetSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountMruSet(CombinatorialConfigure<AzureAmsAccountMruSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountMruSet, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountMruShow(AzureAmsAccountMruShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountMruShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountMruShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountMruShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountMruShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountMruShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountMruShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountMruShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountMruShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountMruShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountMruShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountMruShow(Configure<AzureAmsAccountMruShowSettings> configurator)
        {
            return AzureAmsAccountMruShow(configurator(new AzureAmsAccountMruShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountMruShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountMruShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountMruShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountMruShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountMruShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountMruShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountMruShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountMruShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountMruShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountMruShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountMruShow(CombinatorialConfigure<AzureAmsAccountMruShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountMruShow, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountSpCreate(AzureAmsAccountSpCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountSpCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountSpCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountSpCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountSpCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountSpCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountSpCreateSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAmsAccountSpCreateSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountSpCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountSpCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--role</c> via <see cref="AzureAmsAccountSpCreateSettings.Role"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountSpCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountSpCreateSettings.Verbose"/></li>
        ///     <li><c>--xml</c> via <see cref="AzureAmsAccountSpCreateSettings.Xml"/></li>
        ///     <li><c>--years</c> via <see cref="AzureAmsAccountSpCreateSettings.Years"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountSpCreate(Configure<AzureAmsAccountSpCreateSettings> configurator)
        {
            return AzureAmsAccountSpCreate(configurator(new AzureAmsAccountSpCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountSpCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountSpCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountSpCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountSpCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountSpCreateSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAmsAccountSpCreateSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountSpCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountSpCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--role</c> via <see cref="AzureAmsAccountSpCreateSettings.Role"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountSpCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountSpCreateSettings.Verbose"/></li>
        ///     <li><c>--xml</c> via <see cref="AzureAmsAccountSpCreateSettings.Xml"/></li>
        ///     <li><c>--years</c> via <see cref="AzureAmsAccountSpCreateSettings.Years"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountSpCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountSpCreate(CombinatorialConfigure<AzureAmsAccountSpCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountSpCreate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountSpResetCredentials(AzureAmsAccountSpResetCredentialsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountSpResetCredentialsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.ResourceGroup"/></li>
        ///     <li><c>--role</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Role"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Verbose"/></li>
        ///     <li><c>--xml</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Xml"/></li>
        ///     <li><c>--years</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Years"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountSpResetCredentials(Configure<AzureAmsAccountSpResetCredentialsSettings> configurator)
        {
            return AzureAmsAccountSpResetCredentials(configurator(new AzureAmsAccountSpResetCredentialsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Output"/></li>
        ///     <li><c>--password</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Password"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.ResourceGroup"/></li>
        ///     <li><c>--role</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Role"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Verbose"/></li>
        ///     <li><c>--xml</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Xml"/></li>
        ///     <li><c>--years</c> via <see cref="AzureAmsAccountSpResetCredentialsSettings.Years"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountSpResetCredentialsSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountSpResetCredentials(CombinatorialConfigure<AzureAmsAccountSpResetCredentialsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountSpResetCredentials, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountStorageAdd(AzureAmsAccountStorageAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountStorageAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountStorageAddSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountStorageAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountStorageAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountStorageAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountStorageAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountStorageAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountStorageAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountStorageAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountStorageAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountStorageAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountStorageAdd(Configure<AzureAmsAccountStorageAddSettings> configurator)
        {
            return AzureAmsAccountStorageAdd(configurator(new AzureAmsAccountStorageAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountStorageAddSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountStorageAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountStorageAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountStorageAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountStorageAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountStorageAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountStorageAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountStorageAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountStorageAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountStorageAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountStorageAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountStorageAdd(CombinatorialConfigure<AzureAmsAccountStorageAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountStorageAdd, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountStorageRemove(AzureAmsAccountStorageRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountStorageRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountStorageRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountStorageRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountStorageRemove(Configure<AzureAmsAccountStorageRemoveSettings> configurator)
        {
            return AzureAmsAccountStorageRemove(configurator(new AzureAmsAccountStorageRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountStorageRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountStorageRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountStorageRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountStorageRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountStorageRemove(CombinatorialConfigure<AzureAmsAccountStorageRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountStorageRemove, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsAccountStorageSyncStorageKeys(AzureAmsAccountStorageSyncStorageKeysSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsAccountStorageSyncStorageKeysSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Id"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsAccountStorageSyncStorageKeys(Configure<AzureAmsAccountStorageSyncStorageKeysSettings> configurator)
        {
            return AzureAmsAccountStorageSyncStorageKeys(configurator(new AzureAmsAccountStorageSyncStorageKeysSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Help"/></li>
        ///     <li><c>--id</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Id"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsAccountStorageSyncStorageKeysSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsAccountStorageSyncStorageKeys(CombinatorialConfigure<AzureAmsAccountStorageSyncStorageKeysSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsAccountStorageSyncStorageKeys, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyOptionAdd(AzureAmsContentKeyPolicyOptionAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyOptionAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AccountName"/></li>
        ///     <li><c>--alt-rsa-token-keys</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></li>
        ///     <li><c>--alt-symmetric-token-keys</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></li>
        ///     <li><c>--alt-x509-token-keys</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></li>
        ///     <li><c>--ask</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ask"/></li>
        ///     <li><c>--audience</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Audience"/></li>
        ///     <li><c>--clear-key-configuration</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ClearKeyConfiguration"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Debug"/></li>
        ///     <li><c>--fair-play-pfx</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfx"/></li>
        ///     <li><c>--fair-play-pfx-password</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfxPassword"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></li>
        ///     <li><c>--issuer</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Issuer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Name"/></li>
        ///     <li><c>--open-id-connect-discovery-document</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenIdConnectDiscoveryDocument"/></li>
        ///     <li><c>--open-restriction</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenRestriction"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Output"/></li>
        ///     <li><c>--play-ready-template</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PlayReadyTemplate"/></li>
        ///     <li><c>--policy-option-name</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PolicyOptionName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Query"/></li>
        ///     <li><c>--rental-and-lease-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalAndLeaseKeyType"/></li>
        ///     <li><c>--rental-duration</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalDuration"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Subscription"/></li>
        ///     <li><c>--token-claims</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></li>
        ///     <li><c>--token-key</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKey"/></li>
        ///     <li><c>--token-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKeyType"/></li>
        ///     <li><c>--token-type</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenType"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Verbose"/></li>
        ///     <li><c>--widevine-template</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.WidevineTemplate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyOptionAdd(Configure<AzureAmsContentKeyPolicyOptionAddSettings> configurator)
        {
            return AzureAmsContentKeyPolicyOptionAdd(configurator(new AzureAmsContentKeyPolicyOptionAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AccountName"/></li>
        ///     <li><c>--alt-rsa-token-keys</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></li>
        ///     <li><c>--alt-symmetric-token-keys</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></li>
        ///     <li><c>--alt-x509-token-keys</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></li>
        ///     <li><c>--ask</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ask"/></li>
        ///     <li><c>--audience</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Audience"/></li>
        ///     <li><c>--clear-key-configuration</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ClearKeyConfiguration"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Debug"/></li>
        ///     <li><c>--fair-play-pfx</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfx"/></li>
        ///     <li><c>--fair-play-pfx-password</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfxPassword"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></li>
        ///     <li><c>--issuer</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Issuer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Name"/></li>
        ///     <li><c>--open-id-connect-discovery-document</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenIdConnectDiscoveryDocument"/></li>
        ///     <li><c>--open-restriction</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenRestriction"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Output"/></li>
        ///     <li><c>--play-ready-template</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PlayReadyTemplate"/></li>
        ///     <li><c>--policy-option-name</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PolicyOptionName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Query"/></li>
        ///     <li><c>--rental-and-lease-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalAndLeaseKeyType"/></li>
        ///     <li><c>--rental-duration</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalDuration"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Subscription"/></li>
        ///     <li><c>--token-claims</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></li>
        ///     <li><c>--token-key</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKey"/></li>
        ///     <li><c>--token-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKeyType"/></li>
        ///     <li><c>--token-type</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenType"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Verbose"/></li>
        ///     <li><c>--widevine-template</c> via <see cref="AzureAmsContentKeyPolicyOptionAddSettings.WidevineTemplate"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyOptionAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyOptionAdd(CombinatorialConfigure<AzureAmsContentKeyPolicyOptionAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyOptionAdd, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyOptionRemove(AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyOptionRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Output"/></li>
        ///     <li><c>--policy-option-id</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.PolicyOptionId"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyOptionRemove(Configure<AzureAmsContentKeyPolicyOptionRemoveSettings> configurator)
        {
            return AzureAmsContentKeyPolicyOptionRemove(configurator(new AzureAmsContentKeyPolicyOptionRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Output"/></li>
        ///     <li><c>--policy-option-id</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.PolicyOptionId"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyOptionRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyOptionRemove(CombinatorialConfigure<AzureAmsContentKeyPolicyOptionRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyOptionRemove, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyOptionUpdate(AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsContentKeyPolicyOptionUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AccountName"/></li>
        ///     <li><c>--add-alt-token-key</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKey"/></li>
        ///     <li><c>--add-alt-token-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKeyType"/></li>
        ///     <li><c>--ask</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ask"/></li>
        ///     <li><c>--audience</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Audience"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Debug"/></li>
        ///     <li><c>--fair-play-pfx</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfx"/></li>
        ///     <li><c>--fair-play-pfx-password</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfxPassword"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></li>
        ///     <li><c>--issuer</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Issuer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Name"/></li>
        ///     <li><c>--open-id-connect-discovery-document</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.OpenIdConnectDiscoveryDocument"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Output"/></li>
        ///     <li><c>--play-ready-template</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PlayReadyTemplate"/></li>
        ///     <li><c>--policy-option-id</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionId"/></li>
        ///     <li><c>--policy-option-name</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Query"/></li>
        ///     <li><c>--rental-and-lease-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalAndLeaseKeyType"/></li>
        ///     <li><c>--rental-duration</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalDuration"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Subscription"/></li>
        ///     <li><c>--token-claims</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></li>
        ///     <li><c>--token-key</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKey"/></li>
        ///     <li><c>--token-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKeyType"/></li>
        ///     <li><c>--token-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenType"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Verbose"/></li>
        ///     <li><c>--widevine-template</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.WidevineTemplate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsContentKeyPolicyOptionUpdate(Configure<AzureAmsContentKeyPolicyOptionUpdateSettings> configurator)
        {
            return AzureAmsContentKeyPolicyOptionUpdate(configurator(new AzureAmsContentKeyPolicyOptionUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AccountName"/></li>
        ///     <li><c>--add-alt-token-key</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKey"/></li>
        ///     <li><c>--add-alt-token-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKeyType"/></li>
        ///     <li><c>--ask</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ask"/></li>
        ///     <li><c>--audience</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Audience"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Debug"/></li>
        ///     <li><c>--fair-play-pfx</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfx"/></li>
        ///     <li><c>--fair-play-pfx-password</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfxPassword"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></li>
        ///     <li><c>--issuer</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Issuer"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Name"/></li>
        ///     <li><c>--open-id-connect-discovery-document</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.OpenIdConnectDiscoveryDocument"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Output"/></li>
        ///     <li><c>--play-ready-template</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PlayReadyTemplate"/></li>
        ///     <li><c>--policy-option-id</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionId"/></li>
        ///     <li><c>--policy-option-name</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionName"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Query"/></li>
        ///     <li><c>--rental-and-lease-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalAndLeaseKeyType"/></li>
        ///     <li><c>--rental-duration</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalDuration"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Subscription"/></li>
        ///     <li><c>--token-claims</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></li>
        ///     <li><c>--token-key</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKey"/></li>
        ///     <li><c>--token-key-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKeyType"/></li>
        ///     <li><c>--token-type</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenType"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Verbose"/></li>
        ///     <li><c>--widevine-template</c> via <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.WidevineTemplate"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsContentKeyPolicyOptionUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsContentKeyPolicyOptionUpdate(CombinatorialConfigure<AzureAmsContentKeyPolicyOptionUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsContentKeyPolicyOptionUpdate, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointAkamaiAdd(AzureAmsStreamingEndpointAkamaiAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointAkamaiAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.AccountName"/></li>
        ///     <li><c>--base64-key</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Base64Key"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Debug"/></li>
        ///     <li><c>--expiration</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Expiration"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Help"/></li>
        ///     <li><c>--identifier</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Identifier"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointAkamaiAdd(Configure<AzureAmsStreamingEndpointAkamaiAddSettings> configurator)
        {
            return AzureAmsStreamingEndpointAkamaiAdd(configurator(new AzureAmsStreamingEndpointAkamaiAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.AccountName"/></li>
        ///     <li><c>--base64-key</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Base64Key"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Debug"/></li>
        ///     <li><c>--expiration</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Expiration"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Help"/></li>
        ///     <li><c>--identifier</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Identifier"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointAkamaiAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointAkamaiAdd(CombinatorialConfigure<AzureAmsStreamingEndpointAkamaiAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointAkamaiAdd, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointAkamaiRemove(AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsStreamingEndpointAkamaiRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Help"/></li>
        ///     <li><c>--identifier</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Identifier"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsStreamingEndpointAkamaiRemove(Configure<AzureAmsStreamingEndpointAkamaiRemoveSettings> configurator)
        {
            return AzureAmsStreamingEndpointAkamaiRemove(configurator(new AzureAmsStreamingEndpointAkamaiRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Help"/></li>
        ///     <li><c>--identifier</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Identifier"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsStreamingEndpointAkamaiRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsStreamingEndpointAkamaiRemove(CombinatorialConfigure<AzureAmsStreamingEndpointAkamaiRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsStreamingEndpointAkamaiRemove, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformOutputAdd(AzureAmsTransformOutputAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformOutputAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformOutputAddSettings.AccountName"/></li>
        ///     <li><c>--audio-language</c> via <see cref="AzureAmsTransformOutputAddSettings.AudioLanguage"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformOutputAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformOutputAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformOutputAddSettings.Ids"/></li>
        ///     <li><c>--insights-to-extract</c> via <see cref="AzureAmsTransformOutputAddSettings.InsightsToExtract"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformOutputAddSettings.Name"/></li>
        ///     <li><c>--on-error</c> via <see cref="AzureAmsTransformOutputAddSettings.OnError"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformOutputAddSettings.Output"/></li>
        ///     <li><c>--preset</c> via <see cref="AzureAmsTransformOutputAddSettings.Preset"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformOutputAddSettings.Query"/></li>
        ///     <li><c>--relative-priority</c> via <see cref="AzureAmsTransformOutputAddSettings.RelativePriority"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformOutputAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformOutputAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformOutputAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformOutputAdd(Configure<AzureAmsTransformOutputAddSettings> configurator)
        {
            return AzureAmsTransformOutputAdd(configurator(new AzureAmsTransformOutputAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformOutputAddSettings.AccountName"/></li>
        ///     <li><c>--audio-language</c> via <see cref="AzureAmsTransformOutputAddSettings.AudioLanguage"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformOutputAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformOutputAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformOutputAddSettings.Ids"/></li>
        ///     <li><c>--insights-to-extract</c> via <see cref="AzureAmsTransformOutputAddSettings.InsightsToExtract"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformOutputAddSettings.Name"/></li>
        ///     <li><c>--on-error</c> via <see cref="AzureAmsTransformOutputAddSettings.OnError"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformOutputAddSettings.Output"/></li>
        ///     <li><c>--preset</c> via <see cref="AzureAmsTransformOutputAddSettings.Preset"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformOutputAddSettings.Query"/></li>
        ///     <li><c>--relative-priority</c> via <see cref="AzureAmsTransformOutputAddSettings.RelativePriority"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformOutputAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformOutputAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformOutputAddSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformOutputAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformOutputAdd(CombinatorialConfigure<AzureAmsTransformOutputAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformOutputAdd, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureAmsTransformOutputRemove(AzureAmsTransformOutputRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureAmsTransformOutputRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformOutputRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Output"/></li>
        ///     <li><c>--output-index</c> via <see cref="AzureAmsTransformOutputRemoveSettings.OutputIndex"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformOutputRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureAmsTransformOutputRemove(Configure<AzureAmsTransformOutputRemoveSettings> configurator)
        {
            return AzureAmsTransformOutputRemove(configurator(new AzureAmsTransformOutputRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Media Services resources.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/ams?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureAmsTransformOutputRemoveSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Output"/></li>
        ///     <li><c>--output-index</c> via <see cref="AzureAmsTransformOutputRemoveSettings.OutputIndex"/></li>
        ///     <li><c>--query</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureAmsTransformOutputRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureAmsTransformOutputRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureAmsTransformOutputRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureAmsTransformOutputRemove(CombinatorialConfigure<AzureAmsTransformOutputRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureAmsTransformOutputRemove, AzureAmsLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region AzureAmsSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountFilterCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountFilterCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the account filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The first quality bitrate.
        /// </summary>
        public virtual string Bitrate { get; internal set; }
        /// <summary>
        ///   The first quality (lowest) bitrate to include in the manifest.
        /// </summary>
        public virtual string FirstQuality { get; internal set; }
        /// <summary>
        ///   The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection</a>.
        /// </summary>
        public virtual string Tracks { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD). For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes. Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string EndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.
        /// </summary>
        public virtual bool? ForceEndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.
        /// </summary>
        public virtual string LiveBackoffDuration { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist. The unit for this property is timescale (see below). For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
        /// </summary>
        public virtual string PresentationWindowDuration { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string StartTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second. Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.
        /// </summary>
        public virtual string Timescale { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account-filter create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--bitrate {value}", Bitrate)
              .Add("--first-quality {value}", FirstQuality)
              .Add("--tracks {value}", Tracks)
              .Add("--end-timestamp {value}", EndTimestamp)
              .Add("--force-end-timestamp", ForceEndTimestamp)
              .Add("--live-backoff-duration {value}", LiveBackoffDuration)
              .Add("--presentation-window-duration {value}", PresentationWindowDuration)
              .Add("--start-timestamp {value}", StartTimestamp)
              .Add("--timescale {value}", Timescale)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountFilterDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountFilterDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the account filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account-filter delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountFilterListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountFilterListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account-filter list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountFilterShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountFilterShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the account filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account-filter show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountFilterUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountFilterUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The first quality bitrate.
        /// </summary>
        public virtual string Bitrate { get; internal set; }
        /// <summary>
        ///   The first quality (lowest) bitrate to include in the manifest.
        /// </summary>
        public virtual string FirstQuality { get; internal set; }
        /// <summary>
        ///   The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection</a>.
        /// </summary>
        public virtual string Tracks { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the account filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD). For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes. Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string EndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.
        /// </summary>
        public virtual bool? ForceEndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.
        /// </summary>
        public virtual string LiveBackoffDuration { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist. The unit for this property is timescale (see below). For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
        /// </summary>
        public virtual string PresentationWindowDuration { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string StartTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second. Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.
        /// </summary>
        public virtual string Timescale { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account-filter update")
              .Add("--bitrate {value}", Bitrate)
              .Add("--first-quality {value}", FirstQuality)
              .Add("--tracks {value}", Tracks)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--end-timestamp {value}", EndTimestamp)
              .Add("--force-end-timestamp", ForceEndTimestamp)
              .Add("--live-backoff-duration {value}", LiveBackoffDuration)
              .Add("--presentation-window-duration {value}", PresentationWindowDuration)
              .Add("--start-timestamp {value}", StartTimestamp)
              .Add("--timescale {value}", Timescale)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountCheckNameSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountCheckNameSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account check-name")
              .Add("--location {value}", Location)
              .Add("--name {value}", Name)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The name or resource ID of the primary storage account to attach to the Azure Media Services account. The storage account MUST be in the same Azure subscription as the Media Services account. It is strongly recommended that the storage account be in the same resource group as the Media Services account. Blob only accounts are not allowed as primary.
        /// </summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--location {value}", Location)
              .Add("--tags {value}", Tags)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account delete")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account update")
              .Add("--tags {value}", Tags)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetFilterCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetFilterCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   The name of the asset filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The first quality bitrate.
        /// </summary>
        public virtual string Bitrate { get; internal set; }
        /// <summary>
        ///   The first quality (lowest) bitrate to include in the manifest.
        /// </summary>
        public virtual string FirstQuality { get; internal set; }
        /// <summary>
        ///   The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection</a>.
        /// </summary>
        public virtual string Tracks { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD).For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD.This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes.Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest).For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string EndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.
        /// </summary>
        public virtual bool? ForceEndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.
        /// </summary>
        public virtual string LiveBackoffDuration { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only.Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist.The unit for this property is timescale (see below).For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
        /// </summary>
        public virtual string PresentationWindowDuration { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string StartTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second.Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.
        /// </summary>
        public virtual string Timescale { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset-filter create")
              .Add("--account-name {value}", AccountName)
              .Add("--asset-name {value}", AssetName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--bitrate {value}", Bitrate)
              .Add("--first-quality {value}", FirstQuality)
              .Add("--tracks {value}", Tracks)
              .Add("--end-timestamp {value}", EndTimestamp)
              .Add("--force-end-timestamp", ForceEndTimestamp)
              .Add("--live-backoff-duration {value}", LiveBackoffDuration)
              .Add("--presentation-window-duration {value}", PresentationWindowDuration)
              .Add("--start-timestamp {value}", StartTimestamp)
              .Add("--timescale {value}", Timescale)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetFilterDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetFilterDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset-filter delete")
              .Add("--account-name {value}", AccountName)
              .Add("--asset-name {value}", AssetName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetFilterListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetFilterListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset-filter list")
              .Add("--account-name {value}", AccountName)
              .Add("--asset-name {value}", AssetName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetFilterShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetFilterShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset-filter show")
              .Add("--account-name {value}", AccountName)
              .Add("--asset-name {value}", AssetName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetFilterUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetFilterUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The first quality bitrate.
        /// </summary>
        public virtual string Bitrate { get; internal set; }
        /// <summary>
        ///   The first quality (lowest) bitrate to include in the manifest.
        /// </summary>
        public virtual string FirstQuality { get; internal set; }
        /// <summary>
        ///   The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection</a>.
        /// </summary>
        public virtual string Tracks { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset filter.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD).For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD.This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes.Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest).For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string EndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.
        /// </summary>
        public virtual bool? ForceEndTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.
        /// </summary>
        public virtual string LiveBackoffDuration { get; internal set; }
        /// <summary>
        ///   Applies to Live Streaming only.Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist.The unit for this property is timescale (see below).For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
        /// </summary>
        public virtual string PresentationWindowDuration { get; internal set; }
        /// <summary>
        ///   Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
        /// </summary>
        public virtual string StartTimestamp { get; internal set; }
        /// <summary>
        ///   Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second.Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.
        /// </summary>
        public virtual string Timescale { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset-filter update")
              .Add("--bitrate {value}", Bitrate)
              .Add("--first-quality {value}", FirstQuality)
              .Add("--tracks {value}", Tracks)
              .Add("--account-name {value}", AccountName)
              .Add("--asset-name {value}", AssetName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--end-timestamp {value}", EndTimestamp)
              .Add("--force-end-timestamp", ForceEndTimestamp)
              .Add("--live-backoff-duration {value}", LiveBackoffDuration)
              .Add("--presentation-window-duration {value}", PresentationWindowDuration)
              .Add("--start-timestamp {value}", StartTimestamp)
              .Add("--timescale {value}", Timescale)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The alternate id of the asset.
        /// </summary>
        public virtual string AlternateId { get; internal set; }
        /// <summary>
        ///   The name of the asset blob container.
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   The asset description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   The name of the storage account.
        /// </summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--alternate-id {value}", AlternateId)
              .Add("--container {value}", Container)
              .Add("--description {value}", Description)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetGetEncryptionKeySettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetGetEncryptionKeySettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset get-encryption-key")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetGetSasUrlsSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetGetSasUrlsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Specifies the UTC datetime (Y-m-d'T'H:M:S'Z') at which the SAS becomes invalid.
        /// </summary>
        public virtual string Expiry { get; internal set; }
        /// <summary>
        ///   The permissions to set on the SAS URL.
        /// </summary>
        public virtual AmsAssetGetSasUrlsPermissions Permissions { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset get-sas-urls")
              .Add("--expiry {value}", Expiry)
              .Add("--permissions {value}", Permissions)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Restricts the set of items returned.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Specifies the the key by which the result collection should be ordered.
        /// </summary>
        public virtual string Orderby { get; internal set; }
        /// <summary>
        ///   Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
        /// </summary>
        public virtual string Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--filter {value}", Filter)
              .Add("--orderby {value}", Orderby)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetListStreamingLocatorsSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetListStreamingLocatorsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset list-streaming-locators")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAssetUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAssetUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The alternate id of the asset.
        /// </summary>
        public virtual string AlternateId { get; internal set; }
        /// <summary>
        ///   The asset description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams asset update")
              .Add("--alternate-id {value}", AlternateId)
              .Add("--description {value}", Description)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The content key policy option name.
        /// </summary>
        public virtual string PolicyOptionName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The content key policy description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Use Clear Key configuration, a.k.a AES encryption. It's intended for non-DRM keys.
        /// </summary>
        public virtual string ClearKeyConfiguration { get; internal set; }
        /// <summary>
        ///   The key that must be used as FairPlay Application Secret Key.
        /// </summary>
        public virtual string Ask { get; internal set; }
        /// <summary>
        ///   The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).
        /// </summary>
        public virtual string FairPlayPfx { get; internal set; }
        /// <summary>
        ///   The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
        /// </summary>
        public virtual string FairPlayPfxPassword { get; internal set; }
        /// <summary>
        ///   The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.
        /// </summary>
        public virtual string RentalAndLeaseKeyType { get; internal set; }
        /// <summary>
        ///   The rental duration. Must be greater than or equal to 0.
        /// </summary>
        public virtual string RentalDuration { get; internal set; }
        /// <summary>
        ///   Use open restriction. License or key will be delivered on every request. Not recommended for production environments.
        /// </summary>
        public virtual string OpenRestriction { get; internal set; }
        /// <summary>
        ///   JSON PlayReady license template. Use @{file} to load from a file.
        /// </summary>
        public virtual string PlayReadyTemplate { get; internal set; }
        /// <summary>
        ///   Space-separated list of alternate rsa token keys.
        /// </summary>
        public virtual IReadOnlyList<string> AltRsaTokenKeys => AltRsaTokenKeysInternal.AsReadOnly();
        internal List<string> AltRsaTokenKeysInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Space-separated list of alternate symmetric token keys.
        /// </summary>
        public virtual IReadOnlyList<string> AltSymmetricTokenKeys => AltSymmetricTokenKeysInternal.AsReadOnly();
        internal List<string> AltSymmetricTokenKeysInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Space-separated list of alternate x509 certificate token keys.
        /// </summary>
        public virtual IReadOnlyList<string> AltX509TokenKeys => AltX509TokenKeysInternal.AsReadOnly();
        internal List<string> AltX509TokenKeysInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The audience for the token.
        /// </summary>
        public virtual string Audience { get; internal set; }
        /// <summary>
        ///   The token issuer.
        /// </summary>
        public virtual string Issuer { get; internal set; }
        /// <summary>
        ///   The OpenID connect discovery document.
        /// </summary>
        public virtual string OpenIdConnectDiscoveryDocument { get; internal set; }
        /// <summary>
        ///   Space-separated required token claims in '[key=value]' format.
        /// </summary>
        public virtual IReadOnlyList<string> TokenClaims => TokenClaimsInternal.AsReadOnly();
        internal List<string> TokenClaimsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.
        /// </summary>
        public virtual string TokenKey { get; internal set; }
        /// <summary>
        ///   The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.
        /// </summary>
        public virtual string TokenKeyType { get; internal set; }
        /// <summary>
        ///   The type of token. Allowed values: Jwt, Swt.
        /// </summary>
        public virtual string TokenType { get; internal set; }
        /// <summary>
        ///   JSON Widevine license template. Use @{file} to load from a file.
        /// </summary>
        public virtual string WidevineTemplate { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--policy-option-name {value}", PolicyOptionName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--description {value}", Description)
              .Add("--clear-key-configuration {value}", ClearKeyConfiguration)
              .Add("--ask {value}", Ask)
              .Add("--fair-play-pfx {value}", FairPlayPfx)
              .Add("--fair-play-pfx-password {value}", FairPlayPfxPassword, secret: true)
              .Add("--rental-and-lease-key-type {value}", RentalAndLeaseKeyType)
              .Add("--rental-duration {value}", RentalDuration)
              .Add("--open-restriction {value}", OpenRestriction)
              .Add("--play-ready-template {value}", PlayReadyTemplate)
              .Add("--alt-rsa-token-keys {value}", AltRsaTokenKeys, separator: ' ')
              .Add("--alt-symmetric-token-keys {value}", AltSymmetricTokenKeys, separator: ' ')
              .Add("--alt-x509-token-keys {value}", AltX509TokenKeys, separator: ' ')
              .Add("--audience {value}", Audience)
              .Add("--issuer {value}", Issuer)
              .Add("--open-id-connect-discovery-document {value}", OpenIdConnectDiscoveryDocument)
              .Add("--token-claims {value}", TokenClaims, separator: ' ')
              .Add("--token-key {value}", TokenKey)
              .Add("--token-key-type {value}", TokenKeyType)
              .Add("--token-type {value}", TokenType)
              .Add("--widevine-template {value}", WidevineTemplate)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Restricts the set of items returned.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Specifies the the key by which the result collection should be ordered.
        /// </summary>
        public virtual string Orderby { get; internal set; }
        /// <summary>
        ///   Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
        /// </summary>
        public virtual string Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--filter {value}", Filter)
              .Add("--orderby {value}", Orderby)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Include secret values of the content key policy.
        /// </summary>
        public virtual string WithSecrets { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy show")
              .Add("--with-secrets {value}", WithSecrets, secret: true)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The content key policy description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy update")
              .Add("--description {value}", Description)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsJobCancelSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsJobCancelSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Delete the job being cancelled.
        /// </summary>
        public virtual string Delete { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the job.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string TransformName { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams job cancel")
              .Add("--delete {value}", Delete)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--transform-name {value}", TransformName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsJobDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsJobDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the job.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string TransformName { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams job delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--transform-name {value}", TransformName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsJobListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsJobListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string TransformName { get; internal set; }
        /// <summary>
        ///   Restricts the set of items returned.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Specifies the the key by which the result collection should be ordered.
        /// </summary>
        public virtual string Orderby { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams job list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--transform-name {value}", TransformName)
              .Add("--filter {value}", Filter)
              .Add("--orderby {value}", Orderby)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsJobShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsJobShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the job.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string TransformName { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams job show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--transform-name {value}", TransformName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsJobStartSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsJobStartSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.
        /// </summary>
        public virtual IReadOnlyList<string> OutputAssets => OutputAssetsInternal.AsReadOnly();
        internal List<string> OutputAssetsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.
        /// </summary>
        public virtual IReadOnlyList<string> CorrelationData => CorrelationDataInternal.AsReadOnly();
        internal List<string> CorrelationDataInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The job description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.
        /// </summary>
        public virtual IReadOnlyList<string> Files => FilesInternal.AsReadOnly();
        internal List<string> FilesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   A label that is assigned to a Job Input that is used to satisfy a reference used in the Transform. For example, a Transform can be authored to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
        /// </summary>
        public virtual string Label { get; internal set; }
        /// <summary>
        ///   The priority with which the job should be processed.
        /// </summary>
        public virtual AmsJobPriority Priority { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the job.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string TransformName { get; internal set; }
        /// <summary>
        ///   The name of the input asset.
        /// </summary>
        public virtual string InputAssetName { get; internal set; }
        /// <summary>
        ///   Base uri for http job input. It will be concatenated with provided file names. If no base uri is given, then the provided file list is assumed to be fully qualified uris.
        /// </summary>
        public virtual string BaseUri { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams job start")
              .Add("--output-assets {value}", OutputAssets, separator: ' ')
              .Add("--correlation-data {value}", CorrelationData, separator: ' ')
              .Add("--description {value}", Description)
              .Add("--files {value}", Files, separator: ' ')
              .Add("--label {value}", Label)
              .Add("--priority {value}", Priority)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--transform-name {value}", TransformName)
              .Add("--input-asset-name {value}", InputAssetName)
              .Add("--base-uri {value}", BaseUri)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsJobUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsJobUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The job description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   The priority with which the job should be processed.
        /// </summary>
        public virtual AmsJobPriority Priority { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the job.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string TransformName { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams job update")
              .Add("--description {value}", Description)
              .Add("--priority {value}", Priority)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--transform-name {value}", TransformName)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The flag indicates if the resource should be automatically started on creation.
        /// </summary>
        public virtual string AutoStart { get; internal set; }
        /// <summary>
        ///   The live event description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The options to use for the LiveEvent. This value is specified at creation time and cannot be updated.
        /// </summary>
        public virtual AmsLiveEventCreateStreamOptions StreamOptions { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Specifies whether to use a vanity url with the Live Event. This value is specified at creation time and cannot be updated.
        /// </summary>
        public virtual bool? VanityUrl { get; internal set; }
        /// <summary>
        ///   Filepath to the clientaccesspolicy.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.
        /// </summary>
        public virtual string ClientAccessPolicy { get; internal set; }
        /// <summary>
        ///   Filepath to the crossdomain.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.
        /// </summary>
        public virtual string CrossDomainPolicy { get; internal set; }
        /// <summary>
        ///   The encoding type for live event. This value is specified at creation time and cannot be updated. Allowed values: Basic, None, Standard.
        /// </summary>
        public virtual string EncodingType { get; internal set; }
        /// <summary>
        ///   The encoding preset name. This value is specified at creation time and cannot be updated.
        /// </summary>
        public virtual string PresetName { get; internal set; }
        /// <summary>
        ///   Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.
        /// </summary>
        public virtual IReadOnlyList<string> Ips => IpsInternal.AsReadOnly();
        internal List<string> IpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The streaming protocol for the live event. This value is specified at creation time and cannot be updated.
        /// </summary>
        public virtual AmsLiveEventCreateStreamingProtocol StreamingProtocol { get; internal set; }
        /// <summary>
        ///   A unique identifier for a stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
        /// </summary>
        public virtual string AccessToken { get; internal set; }
        /// <summary>
        ///   ISO 8601 timespan duration of the key frame interval duration in seconds. The value should be an interger in the range of 1 (PT1S or 00:00:01) to 30 (PT30S or 00:00:30) seconds.
        /// </summary>
        public virtual string KeyFrameIntervalDuration { get; internal set; }
        /// <summary>
        ///   An Alternative Media Identifier associated with the StreamingLocator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
        /// </summary>
        public virtual string AlternativeMediaId { get; internal set; }
        /// <summary>
        ///   Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.
        /// </summary>
        public virtual IReadOnlyList<string> PreviewIps => PreviewIpsInternal.AsReadOnly();
        internal List<string> PreviewIpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
        /// </summary>
        public virtual string PreviewLocator { get; internal set; }
        /// <summary>
        ///   The name of streaming policy used for the live event preview. This can be specified at creation time but cannot be updated.
        /// </summary>
        public virtual string StreamingPolicyName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--auto-start {value}", AutoStart)
              .Add("--description {value}", Description)
              .Add("--no-wait", NoWait)
              .Add("--stream-options {value}", StreamOptions)
              .Add("--tags {value}", Tags)
              .Add("--vanity-url", VanityUrl)
              .Add("--client-access-policy {value}", ClientAccessPolicy)
              .Add("--cross-domain-policy {value}", CrossDomainPolicy)
              .Add("--encoding-type {value}", EncodingType)
              .Add("--preset-name {value}", PresetName)
              .Add("--ips {value}", Ips, separator: ' ')
              .Add("--streaming-protocol {value}", StreamingProtocol)
              .Add("--access-token {value}", AccessToken)
              .Add("--key-frame-interval-duration {value}", KeyFrameIntervalDuration)
              .Add("--alternative-media-id {value}", AlternativeMediaId)
              .Add("--preview-ips {value}", PreviewIps, separator: ' ')
              .Add("--preview-locator {value}", PreviewLocator)
              .Add("--streaming-policy-name {value}", StreamingPolicyName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventResetSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventResetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event reset")
              .Add("--no-wait", NoWait)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventStartSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventStartSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event start")
              .Add("--no-wait", NoWait)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventStopSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventStopSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   Remove live outputs on stop.
        /// </summary>
        public virtual string RemoveOutputsOnStop { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event stop")
              .Add("--no-wait", NoWait)
              .Add("--remove-outputs-on-stop {value}", RemoveOutputsOnStop)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The live event description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Filepath to the clientaccesspolicy.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.
        /// </summary>
        public virtual string ClientAccessPolicy { get; internal set; }
        /// <summary>
        ///   Filepath to the crossdomain.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.
        /// </summary>
        public virtual string CrossDomainPolicy { get; internal set; }
        /// <summary>
        ///   Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.
        /// </summary>
        public virtual IReadOnlyList<string> Ips => IpsInternal.AsReadOnly();
        internal List<string> IpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   ISO 8601 timespan duration of the key frame interval duration in seconds. The value should be an interger in the range of 1 (PT1S or 00:00:01) to 30 (PT30S or 00:00:30) seconds.
        /// </summary>
        public virtual string KeyFrameIntervalDuration { get; internal set; }
        /// <summary>
        ///   Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.
        /// </summary>
        public virtual IReadOnlyList<string> PreviewIps => PreviewIpsInternal.AsReadOnly();
        internal List<string> PreviewIpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event update")
              .Add("--description {value}", Description)
              .Add("--tags {value}", Tags)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--client-access-policy {value}", ClientAccessPolicy)
              .Add("--cross-domain-policy {value}", CrossDomainPolicy)
              .Add("--ips {value}", Ips, separator: ' ')
              .Add("--key-frame-interval-duration {value}", KeyFrameIntervalDuration)
              .Add("--preview-ips {value}", PreviewIps, separator: ' ')
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveEventWaitSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveEventWaitSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Wait until created with 'provisioningState' at 'Succeeded'.
        /// </summary>
        public virtual string Created { get; internal set; }
        /// <summary>
        ///   Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].
        /// </summary>
        public virtual string Custom { get; internal set; }
        /// <summary>
        ///   Wait until deleted.
        /// </summary>
        public virtual string Deleted { get; internal set; }
        /// <summary>
        ///   Wait until the resource exists.
        /// </summary>
        public virtual string Exists { get; internal set; }
        /// <summary>
        ///   Polling interval in seconds.
        /// </summary>
        public virtual string Interval { get; internal set; }
        /// <summary>
        ///   Maximum wait in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   Wait until updated with provisioningState at 'Succeeded'.
        /// </summary>
        public virtual string Updated { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-event wait")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--created {value}", Created)
              .Add("--custom {value}", Custom)
              .Add("--deleted {value}", Deleted)
              .Add("--exists {value}", Exists)
              .Add("--interval {value}", Interval)
              .Add("--timeout {value}", Timeout)
              .Add("--updated {value}", Updated)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveOutputCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveOutputCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   ISO 8601 timespan duration of the archive window length. This is the duration that customer want to retain the recorded content. Minimum window is 5 minutes (PT5M or 00:05:00). Maximum window is 25 hours (PT25H or 25:00:00). For example, to retain the output for 10 minutes, use PT10M or 00:10:00.
        /// </summary>
        public virtual string ArchiveWindowLength { get; internal set; }
        /// <summary>
        ///   The name of the asset.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string LiveEventName { get; internal set; }
        /// <summary>
        ///   The name of the live output.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The live output description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   The number of fragments per HLS segment.
        /// </summary>
        public virtual string FragmentsPerTsSegment { get; internal set; }
        /// <summary>
        ///   The manifest file name. If not provided, the service will generate one automatically.
        /// </summary>
        public virtual string ManifestName { get; internal set; }
        /// <summary>
        ///   The output snapshot time.
        /// </summary>
        public virtual string OutputSnapTime { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-output create")
              .Add("--account-name {value}", AccountName)
              .Add("--archive-window-length {value}", ArchiveWindowLength)
              .Add("--asset-name {value}", AssetName)
              .Add("--live-event-name {value}", LiveEventName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--description {value}", Description)
              .Add("--fragments-per-ts-segment {value}", FragmentsPerTsSegment)
              .Add("--manifest-name {value}", ManifestName)
              .Add("--output-snap-time {value}", OutputSnapTime)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveOutputDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveOutputDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string LiveEventName { get; internal set; }
        /// <summary>
        ///   The name of the live output.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-output delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--live-event-name {value}", LiveEventName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveOutputListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveOutputListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string LiveEventName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-output list")
              .Add("--account-name {value}", AccountName)
              .Add("--live-event-name {value}", LiveEventName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsLiveOutputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsLiveOutputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the live event.
        /// </summary>
        public virtual string LiveEventName { get; internal set; }
        /// <summary>
        ///   The name of the live output.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams live-output show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--live-event-name {value}", LiveEventName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The number of scale units for Premium StreamingEndpoints. For Standard StreamingEndpoints, set this value to 0. Use the Scale operation to adjust this value for Premium StreamingEndpoints.
        /// </summary>
        public virtual string ScaleUnits { get; internal set; }
        /// <summary>
        ///   The flag indicates if the resource should be automatically started on creation.
        /// </summary>
        public virtual string AutoStart { get; internal set; }
        /// <summary>
        ///   The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming. This value can only be set at creation time.
        /// </summary>
        public virtual string AvailabilitySetName { get; internal set; }
        /// <summary>
        ///   Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.
        /// </summary>
        public virtual IReadOnlyList<string> CustomHostNames => CustomHostNamesInternal.AsReadOnly();
        internal List<string> CustomHostNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The streaming endpoint description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Max cache age.
        /// </summary>
        public virtual string MaxCacheAge { get; internal set; }
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.
        /// </summary>
        public virtual IReadOnlyList<string> Ips => IpsInternal.AsReadOnly();
        internal List<string> IpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The CDN profile name.
        /// </summary>
        public virtual string CdnProfile { get; internal set; }
        /// <summary>
        ///   The CDN provider name. Allowed values: StandardVerizon, PremiumVerizon, StandardAkamai.
        /// </summary>
        public virtual string CdnProvider { get; internal set; }
        /// <summary>
        ///   The XML representing the clientaccesspolicy data used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.
        /// </summary>
        public virtual string ClientAccessPolicy { get; internal set; }
        /// <summary>
        ///   The XML representing the crossdomain data used by Silverlight. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.
        /// </summary>
        public virtual string CrossDomainPolicy { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--scale-units {value}", ScaleUnits)
              .Add("--auto-start {value}", AutoStart)
              .Add("--availability-set-name {value}", AvailabilitySetName)
              .Add("--custom-host-names {value}", CustomHostNames, separator: ' ')
              .Add("--description {value}", Description)
              .Add("--max-cache-age {value}", MaxCacheAge)
              .Add("--no-wait", NoWait)
              .Add("--tags {value}", Tags)
              .Add("--ips {value}", Ips, separator: ' ')
              .Add("--cdn-profile {value}", CdnProfile)
              .Add("--cdn-provider {value}", CdnProvider)
              .Add("--client-access-policy {value}", ClientAccessPolicy)
              .Add("--cross-domain-policy {value}", CrossDomainPolicy)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointScaleSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointScaleSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The number of scale units for Premium StreamingEndpoints.
        /// </summary>
        public virtual string ScaleUnits { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint scale")
              .Add("--scale-units {value}", ScaleUnits)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointStartSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointStartSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint start")
              .Add("--no-wait", NoWait)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointStopSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointStopSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint stop")
              .Add("--no-wait", NoWait)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.
        /// </summary>
        public virtual IReadOnlyList<string> CustomHostNames => CustomHostNamesInternal.AsReadOnly();
        internal List<string> CustomHostNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The streaming endpoint description.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   Max cache age.
        /// </summary>
        public virtual string MaxCacheAge { get; internal set; }
        /// <summary>
        ///   Do not wait for the long-running operation to finish.
        /// </summary>
        public virtual bool? NoWait { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.
        /// </summary>
        public virtual IReadOnlyList<string> Ips => IpsInternal.AsReadOnly();
        internal List<string> IpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The CDN profile name.
        /// </summary>
        public virtual string CdnProfile { get; internal set; }
        /// <summary>
        ///   The CDN provider name. Allowed values: StandardVerizon, PremiumVerizon, StandardAkamai.
        /// </summary>
        public virtual string CdnProvider { get; internal set; }
        /// <summary>
        ///   Use this flag to disable CDN for the streaming endpoint.
        /// </summary>
        public virtual string DisableCdn { get; internal set; }
        /// <summary>
        ///   The XML representing the clientaccesspolicy data used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.
        /// </summary>
        public virtual string ClientAccessPolicy { get; internal set; }
        /// <summary>
        ///   The XML representing the crossdomain data used by Silverlight. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.
        /// </summary>
        public virtual string CrossDomainPolicy { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint update")
              .Add("--custom-host-names {value}", CustomHostNames, separator: ' ')
              .Add("--description {value}", Description)
              .Add("--max-cache-age {value}", MaxCacheAge)
              .Add("--no-wait", NoWait)
              .Add("--tags {value}", Tags)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--ips {value}", Ips, separator: ' ')
              .Add("--cdn-profile {value}", CdnProfile)
              .Add("--cdn-provider {value}", CdnProvider)
              .Add("--disable-cdn {value}", DisableCdn)
              .Add("--client-access-policy {value}", ClientAccessPolicy)
              .Add("--cross-domain-policy {value}", CrossDomainPolicy)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointWaitSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointWaitSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Wait until created with 'provisioningState' at 'Succeeded'.
        /// </summary>
        public virtual string Created { get; internal set; }
        /// <summary>
        ///   Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].
        /// </summary>
        public virtual string Custom { get; internal set; }
        /// <summary>
        ///   Wait until deleted.
        /// </summary>
        public virtual string Deleted { get; internal set; }
        /// <summary>
        ///   Wait until the resource exists.
        /// </summary>
        public virtual string Exists { get; internal set; }
        /// <summary>
        ///   Polling interval in seconds.
        /// </summary>
        public virtual string Interval { get; internal set; }
        /// <summary>
        ///   Maximum wait in seconds.
        /// </summary>
        public virtual string Timeout { get; internal set; }
        /// <summary>
        ///   Wait until updated with provisioningState at 'Succeeded'.
        /// </summary>
        public virtual string Updated { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint wait")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--created {value}", Created)
              .Add("--custom {value}", Custom)
              .Add("--deleted {value}", Deleted)
              .Add("--exists {value}", Exists)
              .Add("--interval {value}", Interval)
              .Add("--timeout {value}", Timeout)
              .Add("--updated {value}", Updated)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingLocatorCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingLocatorCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the asset used by the streaming locator.
        /// </summary>
        public virtual string AssetName { get; internal set; }
        /// <summary>
        ///   The name of the streaming locator.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The name of the streaming policy used by the streaming locator. You can either create one with `az ams streaming policy create` or use any of the predefined policies: Predefined_DownloadOnly, Predefined_ClearStreamingOnly, Predefined_DownloadAndClearStreaming, Predefined_ClearKey, Predefined_MultiDrmCencStreaming, Predefined_MultiDrmStreaming.
        /// </summary>
        public virtual string StreamingPolicyName { get; internal set; }
        /// <summary>
        ///   An alternative media identifier associated with the streaming locator.
        /// </summary>
        public virtual string AlternativeMediaId { get; internal set; }
        /// <summary>
        ///   The default content key policy name used by the streaming locator.
        /// </summary>
        public virtual string ContentKeyPolicyName { get; internal set; }
        /// <summary>
        ///   JSON string with the content keys to be used by the streaming locator. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streaminglocators/streaminglocators_create#streaminglocatorcontentkey">https://docs.microsoft.com/en-us/rest/api/media/streaminglocators/streaminglocators_create#streaminglocatorcontentkey</a>.
        /// </summary>
        public virtual string ContentKeys { get; internal set; }
        /// <summary>
        ///   The ISO 8601 DateTime end time (Y-m-d'T'H:M:S'Z') of the streaming locator.
        /// </summary>
        public virtual string EndTime { get; internal set; }
        /// <summary>
        ///   A space-separated list of asset filter names and/or account filter names.
        /// </summary>
        public virtual string Filters { get; internal set; }
        /// <summary>
        ///   The ISO 8601 DateTime start time (Y-m-d'T'H:M:S'Z') of the streaming locator.
        /// </summary>
        public virtual string StartTime { get; internal set; }
        /// <summary>
        ///   The identifier of the streaming locator.
        /// </summary>
        public virtual string StreamingLocatorId { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-locator create")
              .Add("--account-name {value}", AccountName)
              .Add("--asset-name {value}", AssetName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--streaming-policy-name {value}", StreamingPolicyName)
              .Add("--alternative-media-id {value}", AlternativeMediaId)
              .Add("--content-key-policy-name {value}", ContentKeyPolicyName)
              .Add("--content-keys {value}", ContentKeys)
              .Add("--end-time {value}", EndTime)
              .Add("--filters {value}", Filters)
              .Add("--start-time {value}", StartTime)
              .Add("--streaming-locator-id {value}", StreamingLocatorId)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingLocatorDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingLocatorDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming locator.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-locator delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingLocatorGetPathsSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingLocatorGetPathsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming locator.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-locator get-paths")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingLocatorListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingLocatorListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Restricts the set of items returned.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Specifies the key by which the result collection should be ordered.
        /// </summary>
        public virtual string Orderby { get; internal set; }
        /// <summary>
        ///   Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
        /// </summary>
        public virtual string Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-locator list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--filter {value}", Filter)
              .Add("--orderby {value}", Orderby)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingLocatorListContentKeysSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingLocatorListContentKeysSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming locator.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-locator list-content-keys")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingLocatorShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingLocatorShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming locator.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-locator show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingPolicyCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingPolicyCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the streaming policy.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Default Content Key used by current streaming policy.
        /// </summary>
        public virtual string DefaultContentKeyPolicyName { get; internal set; }
        /// <summary>
        ///   Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.
        /// </summary>
        public virtual IReadOnlyList<bool> NoEncryptionProtocols => NoEncryptionProtocolsInternal.AsReadOnly();
        internal List<bool> NoEncryptionProtocolsInternal { get; set; } = new List<bool>();
        /// <summary>
        ///   The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.
        /// </summary>
        public virtual string CbcsClearTracks { get; internal set; }
        /// <summary>
        ///   Label to specify Default Content Key for an encryption scheme.
        /// </summary>
        public virtual string CbcsDefaultKeyLabel { get; internal set; }
        /// <summary>
        ///   Policy used by Default Content Key.
        /// </summary>
        public virtual string CbcsDefaultKeyPolicyName { get; internal set; }
        /// <summary>
        ///   Allows the license to be persistent or not.
        /// </summary>
        public virtual bool? CbcsFairPlayAllowPersistentLicense { get; internal set; }
        /// <summary>
        ///   The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.
        /// </summary>
        public virtual string CbcsFairPlayTemplate { get; internal set; }
        /// <summary>
        ///   The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.
        /// </summary>
        public virtual string CbcsKeyToTrackMappings { get; internal set; }
        /// <summary>
        ///   Custom attributes for PlayReady.
        /// </summary>
        public virtual string CbcsPlayReadyAttributes { get; internal set; }
        /// <summary>
        ///   The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.
        /// </summary>
        public virtual string CbcsPlayReadyTemplate { get; internal set; }
        /// <summary>
        ///   Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.
        /// </summary>
        public virtual IReadOnlyList<string> CbcsProtocols => CbcsProtocolsInternal.AsReadOnly();
        internal List<string> CbcsProtocolsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.
        /// </summary>
        public virtual string CbcsWidevineTemplate { get; internal set; }
        /// <summary>
        ///   The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.
        /// </summary>
        public virtual string CencClearTracks { get; internal set; }
        /// <summary>
        ///   Label to specify Default Content Key for an encryption scheme.
        /// </summary>
        public virtual string CencDefaultKeyLabel { get; internal set; }
        /// <summary>
        ///   Policy used by Default Content Key.
        /// </summary>
        public virtual string CencDefaultKeyPolicyName { get; internal set; }
        /// <summary>
        ///   If specified, no PlayReady cenc DRM will be configured. If --cenc-disable-play-ready is set, --cenc-disable-widevine cannot also be set.
        /// </summary>
        public virtual bool? CencDisablePlayReady { get; internal set; }
        /// <summary>
        ///   If specified, no Widevine cenc DRM will be configured. If --cenc-disable-widevine is set, --cenc-disable-play-ready cannot also be set.
        /// </summary>
        public virtual bool? CencDisableWidevine { get; internal set; }
        /// <summary>
        ///   The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.
        /// </summary>
        public virtual string CencKeyToTrackMappings { get; internal set; }
        /// <summary>
        ///   Custom attributes for PlayReady.
        /// </summary>
        public virtual string CencPlayReadyAttributes { get; internal set; }
        /// <summary>
        ///   The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.
        /// </summary>
        public virtual string CencPlayReadyTemplate { get; internal set; }
        /// <summary>
        ///   Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.
        /// </summary>
        public virtual IReadOnlyList<string> CencProtocols => CencProtocolsInternal.AsReadOnly();
        internal List<string> CencProtocolsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.
        /// </summary>
        public virtual string CencWidevineTemplate { get; internal set; }
        /// <summary>
        ///   The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.
        /// </summary>
        public virtual string EnvelopeClearTracks { get; internal set; }
        /// <summary>
        ///   Label used to specify Content Key when creating a streaming locator.
        /// </summary>
        public virtual string EnvelopeDefaultKeyLabel { get; internal set; }
        /// <summary>
        ///   Policy used by Default Key.
        /// </summary>
        public virtual string EnvelopeDefaultKeyPolicyName { get; internal set; }
        /// <summary>
        ///   The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.
        /// </summary>
        public virtual string EnvelopeKeyToTrackMappings { get; internal set; }
        /// <summary>
        ///   Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.
        /// </summary>
        public virtual IReadOnlyList<string> EnvelopeProtocols => EnvelopeProtocolsInternal.AsReadOnly();
        internal List<string> EnvelopeProtocolsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The KeyAcquistionUrlTemplate is used to point to user specified service to delivery content keys.
        /// </summary>
        public virtual string EnvelopeTemplate { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-policy create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--default-content-key-policy-name {value}", DefaultContentKeyPolicyName)
              .Add("--no-encryption-protocols {value}", NoEncryptionProtocols, separator: ' ')
              .Add("--cbcs-clear-tracks {value}", CbcsClearTracks)
              .Add("--cbcs-default-key-label {value}", CbcsDefaultKeyLabel)
              .Add("--cbcs-default-key-policy-name {value}", CbcsDefaultKeyPolicyName)
              .Add("--cbcs-fair-play-allow-persistent-license", CbcsFairPlayAllowPersistentLicense)
              .Add("--cbcs-fair-play-template {value}", CbcsFairPlayTemplate)
              .Add("--cbcs-key-to-track-mappings {value}", CbcsKeyToTrackMappings)
              .Add("--cbcs-play-ready-attributes {value}", CbcsPlayReadyAttributes)
              .Add("--cbcs-play-ready-template {value}", CbcsPlayReadyTemplate)
              .Add("--cbcs-protocols {value}", CbcsProtocols, separator: ' ')
              .Add("--cbcs-widevine-template {value}", CbcsWidevineTemplate)
              .Add("--cenc-clear-tracks {value}", CencClearTracks)
              .Add("--cenc-default-key-label {value}", CencDefaultKeyLabel)
              .Add("--cenc-default-key-policy-name {value}", CencDefaultKeyPolicyName)
              .Add("--cenc-disable-play-ready", CencDisablePlayReady)
              .Add("--cenc-disable-widevine", CencDisableWidevine)
              .Add("--cenc-key-to-track-mappings {value}", CencKeyToTrackMappings)
              .Add("--cenc-play-ready-attributes {value}", CencPlayReadyAttributes)
              .Add("--cenc-play-ready-template {value}", CencPlayReadyTemplate)
              .Add("--cenc-protocols {value}", CencProtocols, separator: ' ')
              .Add("--cenc-widevine-template {value}", CencWidevineTemplate)
              .Add("--envelope-clear-tracks {value}", EnvelopeClearTracks)
              .Add("--envelope-default-key-label {value}", EnvelopeDefaultKeyLabel)
              .Add("--envelope-default-key-policy-name {value}", EnvelopeDefaultKeyPolicyName)
              .Add("--envelope-key-to-track-mappings {value}", EnvelopeKeyToTrackMappings)
              .Add("--envelope-protocols {value}", EnvelopeProtocols, separator: ' ')
              .Add("--envelope-template {value}", EnvelopeTemplate)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingPolicyDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingPolicyDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming policy.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-policy delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingPolicyListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingPolicyListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Restricts the set of items returned.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Specifies the key by which the result collection should be ordered.
        /// </summary>
        public virtual string Orderby { get; internal set; }
        /// <summary>
        ///   Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
        /// </summary>
        public virtual string Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-policy list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--filter {value}", Filter)
              .Add("--orderby {value}", Orderby)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingPolicyShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingPolicyShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming policy.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-policy show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the transform output. Allowed values: H264SingleBitrateSD, H264SingleBitrate720p, H264SingleBitrate1080p, AdaptiveStreaming, AACGoodQualityAudio, ContentAwareEncodingExperimental, H264MultipleBitrate1080p, H264MultipleBitrate720p, H264MultipleBitrateSD, AudioAnalyzer, VideoAnalyzer. In addition to the allowed values, you can also pass a path to a custom Standard Encoder preset JSON file. See <a href="https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset">https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset</a> for further details on the settings to use to build a custom preset.
        /// </summary>
        public virtual string Preset { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The description of the transform.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   A Transform can define more than one output. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
        /// </summary>
        public virtual AmsTransformOnError OnError { get; internal set; }
        /// <summary>
        ///   Sets the relative priority of the transform outputs within a transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
        /// </summary>
        public virtual AmsJobPriority RelativePriority { get; internal set; }
        /// <summary>
        ///   The language for the audio payload in the input using the BCP-47 format of "language tag-region" (e.g: en-US). If not specified, automatic language detection would be employed. This feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to English. Allowed values: en-US, en-GB, es-ES, es-MX, fr-FR, it-IT, ja-JP, pt-BR, zh-CN, de-DE, ar-EG, ru-RU, hi-IN.
        /// </summary>
        public virtual string AudioLanguage { get; internal set; }
        /// <summary>
        ///   The type of insights to be extracted. If not set then the type will be selected based on the content type. If the content is audio only then only audio insights will be extracted and if it is video only video insights will be extracted.
        /// </summary>
        public virtual AmsTransformInsightsToExtract InsightsToExtract { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--preset {value}", Preset)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--description {value}", Description)
              .Add("--on-error {value}", OnError)
              .Add("--relative-priority {value}", RelativePriority)
              .Add("--audio-language {value}", AudioLanguage)
              .Add("--insights-to-extract {value}", InsightsToExtract)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform delete")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformListSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Restricts the set of items returned.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Specifies the the key by which the result collection should be ordered.
        /// </summary>
        public virtual string Orderby { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--filter {value}", Filter)
              .Add("--orderby {value}", Orderby)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform show")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The description of the transform.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform update")
              .Add("--description {value}", Description)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountMruSetSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountMruSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The number of the encoding reserved units that you want to be provisioned for this account for concurrent tasks (one unit equals one task).
        /// </summary>
        public virtual string Count { get; internal set; }
        /// <summary>
        ///   Speed of reserved processing units. The cost of media encoding depends on the pricing tier you choose. See <a href="https://azure.microsoft.com/pricing/details/media-services/">https://azure.microsoft.com/pricing/details/media-services/</a> for further details. Allowed values: S1, S2, S3.
        /// </summary>
        public virtual string Type { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account mru set")
              .Add("--count {value}", Count)
              .Add("--type {value}", Type)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountMruShowSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountMruShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account mru show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountSpCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountSpCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The app name or app URI to associate the RBAC with. If not present, a default name like '{amsaccountname}-access-sp' will be generated.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The password used to log in. Also known as 'Client Secret'. If not present, a random secret will be generated.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   The role of the service principal.
        /// </summary>
        public virtual string Role { get; internal set; }
        /// <summary>
        ///   Enables xml output format.
        /// </summary>
        public virtual string Xml { get; internal set; }
        /// <summary>
        ///   Number of years for which the secret will be valid. Default: 1 year.
        /// </summary>
        public virtual int? Years { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account sp create")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--name {value}", Name)
              .Add("--password {value}", Password, secret: true)
              .Add("--role {value}", Role)
              .Add("--xml {value}", Xml)
              .Add("--years {value}", Years)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountSpResetCredentialsSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountSpResetCredentialsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The password used to log in. Also known as 'Client Secret'. If not present, a random secret will be generated.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   The role of the service principal.
        /// </summary>
        public virtual string Role { get; internal set; }
        /// <summary>
        ///   Enables xml output format.
        /// </summary>
        public virtual string Xml { get; internal set; }
        /// <summary>
        ///   Number of years for which the secret will be valid. Default: 1 year.
        /// </summary>
        public virtual int? Years { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The app name or app URI to associate the RBAC with. If not present, a default name like '{amsaccountname}-access-sp' will be generated.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account sp reset-credentials")
              .Add("--password {value}", Password, secret: true)
              .Add("--role {value}", Role)
              .Add("--xml {value}", Xml)
              .Add("--years {value}", Years)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountStorageAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountStorageAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name or resource ID of the secondary storage account to detach from the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account storage add")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountStorageRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountStorageRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name or resource ID of the secondary storage account to detach from the Azure Media Services account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account storage remove")
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsAccountStorageSyncStorageKeysSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsAccountStorageSyncStorageKeysSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The ID of the storage account resource.
        /// </summary>
        public virtual string Id { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams account storage sync-storage-keys")
              .Add("--id {value}", Id)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyOptionAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyOptionAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The content key policy option name.
        /// </summary>
        public virtual string PolicyOptionName { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Use Clear Key configuration, a.k.a AES encryption. It's intended for non-DRM keys.
        /// </summary>
        public virtual string ClearKeyConfiguration { get; internal set; }
        /// <summary>
        ///   The key that must be used as FairPlay Application Secret Key.
        /// </summary>
        public virtual string Ask { get; internal set; }
        /// <summary>
        ///   The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).
        /// </summary>
        public virtual string FairPlayPfx { get; internal set; }
        /// <summary>
        ///   The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
        /// </summary>
        public virtual string FairPlayPfxPassword { get; internal set; }
        /// <summary>
        ///   The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.
        /// </summary>
        public virtual string RentalAndLeaseKeyType { get; internal set; }
        /// <summary>
        ///   The rental duration. Must be greater than or equal to 0.
        /// </summary>
        public virtual string RentalDuration { get; internal set; }
        /// <summary>
        ///   Use open restriction. License or key will be delivered on every request. Not recommended for production environments.
        /// </summary>
        public virtual string OpenRestriction { get; internal set; }
        /// <summary>
        ///   JSON PlayReady license template. Use @{file} to load from a file.
        /// </summary>
        public virtual string PlayReadyTemplate { get; internal set; }
        /// <summary>
        ///   Space-separated list of alternate rsa token keys.
        /// </summary>
        public virtual IReadOnlyList<string> AltRsaTokenKeys => AltRsaTokenKeysInternal.AsReadOnly();
        internal List<string> AltRsaTokenKeysInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Space-separated list of alternate symmetric token keys.
        /// </summary>
        public virtual IReadOnlyList<string> AltSymmetricTokenKeys => AltSymmetricTokenKeysInternal.AsReadOnly();
        internal List<string> AltSymmetricTokenKeysInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Space-separated list of alternate x509 certificate token keys.
        /// </summary>
        public virtual IReadOnlyList<string> AltX509TokenKeys => AltX509TokenKeysInternal.AsReadOnly();
        internal List<string> AltX509TokenKeysInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The audience for the token.
        /// </summary>
        public virtual string Audience { get; internal set; }
        /// <summary>
        ///   The token issuer.
        /// </summary>
        public virtual string Issuer { get; internal set; }
        /// <summary>
        ///   The OpenID connect discovery document.
        /// </summary>
        public virtual string OpenIdConnectDiscoveryDocument { get; internal set; }
        /// <summary>
        ///   Space-separated required token claims in '[key=value]' format.
        /// </summary>
        public virtual IReadOnlyList<string> TokenClaims => TokenClaimsInternal.AsReadOnly();
        internal List<string> TokenClaimsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.
        /// </summary>
        public virtual string TokenKey { get; internal set; }
        /// <summary>
        ///   The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.
        /// </summary>
        public virtual string TokenKeyType { get; internal set; }
        /// <summary>
        ///   The type of token. Allowed values: Jwt, Swt.
        /// </summary>
        public virtual string TokenType { get; internal set; }
        /// <summary>
        ///   JSON Widevine license template. Use @{file} to load from a file.
        /// </summary>
        public virtual string WidevineTemplate { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy option add")
              .Add("--policy-option-name {value}", PolicyOptionName)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--clear-key-configuration {value}", ClearKeyConfiguration)
              .Add("--ask {value}", Ask)
              .Add("--fair-play-pfx {value}", FairPlayPfx)
              .Add("--fair-play-pfx-password {value}", FairPlayPfxPassword, secret: true)
              .Add("--rental-and-lease-key-type {value}", RentalAndLeaseKeyType)
              .Add("--rental-duration {value}", RentalDuration)
              .Add("--open-restriction {value}", OpenRestriction)
              .Add("--play-ready-template {value}", PlayReadyTemplate)
              .Add("--alt-rsa-token-keys {value}", AltRsaTokenKeys, separator: ' ')
              .Add("--alt-symmetric-token-keys {value}", AltSymmetricTokenKeys, separator: ' ')
              .Add("--alt-x509-token-keys {value}", AltX509TokenKeys, separator: ' ')
              .Add("--audience {value}", Audience)
              .Add("--issuer {value}", Issuer)
              .Add("--open-id-connect-discovery-document {value}", OpenIdConnectDiscoveryDocument)
              .Add("--token-claims {value}", TokenClaims, separator: ' ')
              .Add("--token-key {value}", TokenKey)
              .Add("--token-key-type {value}", TokenKeyType)
              .Add("--token-type {value}", TokenType)
              .Add("--widevine-template {value}", WidevineTemplate)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyOptionRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyOptionRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The content key policy option identifier. This value can be obtained from "policyOptionId" property by running a show operation on a content key policy resource.
        /// </summary>
        public virtual string PolicyOptionId { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy option remove")
              .Add("--policy-option-id {value}", PolicyOptionId)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsContentKeyPolicyOptionUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsContentKeyPolicyOptionUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The content key policy option identifier. This value can be obtained from "policyOptionId" property by running a show operation on a content key policy resource.
        /// </summary>
        public virtual string PolicyOptionId { get; internal set; }
        /// <summary>
        ///   The content key policy option name.
        /// </summary>
        public virtual string PolicyOptionName { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The content key policy name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The key that must be used as FairPlay Application Secret Key.
        /// </summary>
        public virtual string Ask { get; internal set; }
        /// <summary>
        ///   The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).
        /// </summary>
        public virtual string FairPlayPfx { get; internal set; }
        /// <summary>
        ///   The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
        /// </summary>
        public virtual string FairPlayPfxPassword { get; internal set; }
        /// <summary>
        ///   The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.
        /// </summary>
        public virtual string RentalAndLeaseKeyType { get; internal set; }
        /// <summary>
        ///   The rental duration. Must be greater than or equal to 0.
        /// </summary>
        public virtual string RentalDuration { get; internal set; }
        /// <summary>
        ///   JSON PlayReady license template. Use @{file} to load from a file.
        /// </summary>
        public virtual string PlayReadyTemplate { get; internal set; }
        /// <summary>
        ///   Creates an alternate token key with either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --add-alt-token-key-type.
        /// </summary>
        public virtual string AddAltTokenKey { get; internal set; }
        /// <summary>
        ///   The type of the token key to be used for the alternate verification key. Allowed values: Symmetric, RSA, X509.
        /// </summary>
        public virtual string AddAltTokenKeyType { get; internal set; }
        /// <summary>
        ///   The audience for the token.
        /// </summary>
        public virtual string Audience { get; internal set; }
        /// <summary>
        ///   The token issuer.
        /// </summary>
        public virtual string Issuer { get; internal set; }
        /// <summary>
        ///   The OpenID connect discovery document.
        /// </summary>
        public virtual string OpenIdConnectDiscoveryDocument { get; internal set; }
        /// <summary>
        ///   Space-separated required token claims in '[key=value]' format.
        /// </summary>
        public virtual IReadOnlyList<string> TokenClaims => TokenClaimsInternal.AsReadOnly();
        internal List<string> TokenClaimsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.
        /// </summary>
        public virtual string TokenKey { get; internal set; }
        /// <summary>
        ///   The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.
        /// </summary>
        public virtual string TokenKeyType { get; internal set; }
        /// <summary>
        ///   The type of token. Allowed values: Jwt, Swt.
        /// </summary>
        public virtual string TokenType { get; internal set; }
        /// <summary>
        ///   JSON Widevine license template. Use @{file} to load from a file.
        /// </summary>
        public virtual string WidevineTemplate { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams content-key-policy option update")
              .Add("--policy-option-id {value}", PolicyOptionId)
              .Add("--policy-option-name {value}", PolicyOptionName)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--ask {value}", Ask)
              .Add("--fair-play-pfx {value}", FairPlayPfx)
              .Add("--fair-play-pfx-password {value}", FairPlayPfxPassword, secret: true)
              .Add("--rental-and-lease-key-type {value}", RentalAndLeaseKeyType)
              .Add("--rental-duration {value}", RentalDuration)
              .Add("--play-ready-template {value}", PlayReadyTemplate)
              .Add("--add-alt-token-key {value}", AddAltTokenKey)
              .Add("--add-alt-token-key-type {value}", AddAltTokenKeyType)
              .Add("--audience {value}", Audience)
              .Add("--issuer {value}", Issuer)
              .Add("--open-id-connect-discovery-document {value}", OpenIdConnectDiscoveryDocument)
              .Add("--token-claims {value}", TokenClaims, separator: ' ')
              .Add("--token-key {value}", TokenKey)
              .Add("--token-key-type {value}", TokenKeyType)
              .Add("--token-type {value}", TokenType)
              .Add("--widevine-template {value}", WidevineTemplate)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointAkamaiAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointAkamaiAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Base64-encoded authentication key that will be used by the CDN. The authentication key provided by Akamai is an ASCII encoded string, and must be converted to bytes and then base64 encoded.
        /// </summary>
        public virtual string Base64Key { get; internal set; }
        /// <summary>
        ///   The ISO 8601 DateTime value that specifies when the Akamai authentication expires.
        /// </summary>
        public virtual string Expiration { get; internal set; }
        /// <summary>
        ///   The identifier for the authentication key. This is the nonce provided by Akamai.
        /// </summary>
        public virtual string Identifier { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint akamai add")
              .Add("--base64-key {value}", Base64Key)
              .Add("--expiration {value}", Expiration)
              .Add("--identifier {value}", Identifier)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsStreamingEndpointAkamaiRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsStreamingEndpointAkamaiRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The identifier for the authentication key. This is the nonce provided by Akamai.
        /// </summary>
        public virtual string Identifier { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the streaming endpoint.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams streaming-endpoint akamai remove")
              .Add("--identifier {value}", Identifier)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformOutputAddSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformOutputAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the transform output. Allowed values: H264SingleBitrateSD, H264SingleBitrate720p, H264SingleBitrate1080p, AdaptiveStreaming, AACGoodQualityAudio, ContentAwareEncodingExperimental, H264MultipleBitrate1080p, H264MultipleBitrate720p, H264MultipleBitrateSD, AudioAnalyzer, VideoAnalyzer. In addition to the allowed values, you can also pass a path to a custom Standard Encoder preset JSON file. See <a href="https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset">https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset</a> for further details on the settings to use to build a custom preset.
        /// </summary>
        public virtual string Preset { get; internal set; }
        /// <summary>
        ///   A Transform can define more than one output. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
        /// </summary>
        public virtual AmsTransformOnError OnError { get; internal set; }
        /// <summary>
        ///   Sets the relative priority of the transform outputs within a transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
        /// </summary>
        public virtual AmsJobPriority RelativePriority { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   The language for the audio payload in the input using the BCP-47 format of "language tag-region" (e.g: en-US). If not specified, automatic language detection would be employed. This feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to English. Allowed values: en-US, en-GB, es-ES, es-MX, fr-FR, it-IT, ja-JP, pt-BR, zh-CN, de-DE, ar-EG, ru-RU, hi-IN.
        /// </summary>
        public virtual string AudioLanguage { get; internal set; }
        /// <summary>
        ///   The type of insights to be extracted. If not set then the type will be selected based on the content type. If the content is audio only then only audio insights will be extracted and if it is video only video insights will be extracted.
        /// </summary>
        public virtual AmsTransformInsightsToExtract InsightsToExtract { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform output add")
              .Add("--preset {value}", Preset)
              .Add("--on-error {value}", OnError)
              .Add("--relative-priority {value}", RelativePriority)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--audio-language {value}", AudioLanguage)
              .Add("--insights-to-extract {value}", InsightsToExtract)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsTransformOutputRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureAmsTransformOutputRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureAms executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureAmsTasks.AzureAmsPath;
        public override Action<OutputType, string> CustomLogger => AzureAmsTasks.AzureAmsLogger;
        /// <summary>
        ///   The element index of the output to remove.
        /// </summary>
        public virtual string OutputIndex { get; internal set; }
        /// <summary>
        ///   The name of the Azure Media Services account.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the transform.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ams transform output remove")
              .Add("--output-index {value}", OutputIndex)
              .Add("--account-name {value}", AccountName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureAmsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings SetDebug(this AzureAmsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings ResetDebug(this AzureAmsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings SetHelp(this AzureAmsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings ResetHelp(this AzureAmsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings SetOutput(this AzureAmsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings ResetOutput(this AzureAmsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings SetQuery(this AzureAmsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings ResetQuery(this AzureAmsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings SetVerbose(this AzureAmsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsSettings ResetVerbose(this AzureAmsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountFilterCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountFilterCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetAccountName(this AzureAmsAccountFilterCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetAccountName(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetName(this AzureAmsAccountFilterCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetName(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetResourceGroup(this AzureAmsAccountFilterCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetResourceGroup(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Bitrate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetBitrate(this AzureAmsAccountFilterCreateSettings toolSettings, string bitrate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = bitrate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetBitrate(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = null;
            return toolSettings;
        }
        #endregion
        #region FirstQuality
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetFirstQuality(this AzureAmsAccountFilterCreateSettings toolSettings, string firstQuality)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = firstQuality;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetFirstQuality(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = null;
            return toolSettings;
        }
        #endregion
        #region Tracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetTracks(this AzureAmsAccountFilterCreateSettings toolSettings, string tracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = tracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetTracks(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = null;
            return toolSettings;
        }
        #endregion
        #region EndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD). For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes. Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings, string endTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = endTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD). For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes. Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region ForceEndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetForceEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings, bool? forceEndTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = forceEndTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetForceEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings EnableForceEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings DisableForceEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsAccountFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ToggleForceEndTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = !toolSettings.ForceEndTimestamp;
            return toolSettings;
        }
        #endregion
        #region LiveBackoffDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetLiveBackoffDuration(this AzureAmsAccountFilterCreateSettings toolSettings, string liveBackoffDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = liveBackoffDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetLiveBackoffDuration(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = null;
            return toolSettings;
        }
        #endregion
        #region PresentationWindowDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist. The unit for this property is timescale (see below). For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetPresentationWindowDuration(this AzureAmsAccountFilterCreateSettings toolSettings, string presentationWindowDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = presentationWindowDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist. The unit for this property is timescale (see below). For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetPresentationWindowDuration(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = null;
            return toolSettings;
        }
        #endregion
        #region StartTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetStartTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings, string startTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = startTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetStartTimestamp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region Timescale
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second. Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetTimescale(this AzureAmsAccountFilterCreateSettings toolSettings, string timescale)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = timescale;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second. Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetTimescale(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetSubscription(this AzureAmsAccountFilterCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetSubscription(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetDebug(this AzureAmsAccountFilterCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetDebug(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetHelp(this AzureAmsAccountFilterCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetHelp(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetOutput(this AzureAmsAccountFilterCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetOutput(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetQuery(this AzureAmsAccountFilterCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetQuery(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings SetVerbose(this AzureAmsAccountFilterCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterCreateSettings ResetVerbose(this AzureAmsAccountFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountFilterDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountFilterDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetAccountName(this AzureAmsAccountFilterDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetAccountName(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetIds(this AzureAmsAccountFilterDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetIds(this AzureAmsAccountFilterDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings AddIds(this AzureAmsAccountFilterDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings AddIds(this AzureAmsAccountFilterDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ClearIds(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings RemoveIds(this AzureAmsAccountFilterDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings RemoveIds(this AzureAmsAccountFilterDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetName(this AzureAmsAccountFilterDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetName(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetResourceGroup(this AzureAmsAccountFilterDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetResourceGroup(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetSubscription(this AzureAmsAccountFilterDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetSubscription(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetDebug(this AzureAmsAccountFilterDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetDebug(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetHelp(this AzureAmsAccountFilterDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetHelp(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetOutput(this AzureAmsAccountFilterDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetOutput(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetQuery(this AzureAmsAccountFilterDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetQuery(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings SetVerbose(this AzureAmsAccountFilterDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterDeleteSettings ResetVerbose(this AzureAmsAccountFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountFilterListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountFilterListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetAccountName(this AzureAmsAccountFilterListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetAccountName(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetResourceGroup(this AzureAmsAccountFilterListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetResourceGroup(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetSubscription(this AzureAmsAccountFilterListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetSubscription(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetDebug(this AzureAmsAccountFilterListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetDebug(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetHelp(this AzureAmsAccountFilterListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetHelp(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetOutput(this AzureAmsAccountFilterListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetOutput(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetQuery(this AzureAmsAccountFilterListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetQuery(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings SetVerbose(this AzureAmsAccountFilterListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterListSettings ResetVerbose(this AzureAmsAccountFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountFilterShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountFilterShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetAccountName(this AzureAmsAccountFilterShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetAccountName(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetIds(this AzureAmsAccountFilterShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetIds(this AzureAmsAccountFilterShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings AddIds(this AzureAmsAccountFilterShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings AddIds(this AzureAmsAccountFilterShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ClearIds(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings RemoveIds(this AzureAmsAccountFilterShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings RemoveIds(this AzureAmsAccountFilterShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetName(this AzureAmsAccountFilterShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetName(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetResourceGroup(this AzureAmsAccountFilterShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetResourceGroup(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetSubscription(this AzureAmsAccountFilterShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetSubscription(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetDebug(this AzureAmsAccountFilterShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetDebug(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetHelp(this AzureAmsAccountFilterShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetHelp(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetOutput(this AzureAmsAccountFilterShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetOutput(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetQuery(this AzureAmsAccountFilterShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetQuery(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings SetVerbose(this AzureAmsAccountFilterShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterShowSettings ResetVerbose(this AzureAmsAccountFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountFilterUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountFilterUpdateSettingsExtensions
    {
        #region Bitrate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetBitrate(this AzureAmsAccountFilterUpdateSettings toolSettings, string bitrate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = bitrate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetBitrate(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = null;
            return toolSettings;
        }
        #endregion
        #region FirstQuality
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetFirstQuality(this AzureAmsAccountFilterUpdateSettings toolSettings, string firstQuality)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = firstQuality;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetFirstQuality(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = null;
            return toolSettings;
        }
        #endregion
        #region Tracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetTracks(this AzureAmsAccountFilterUpdateSettings toolSettings, string tracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = tracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/accountfilters/createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetTracks(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetAccountName(this AzureAmsAccountFilterUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetAccountName(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetIds(this AzureAmsAccountFilterUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetIds(this AzureAmsAccountFilterUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings AddIds(this AzureAmsAccountFilterUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings AddIds(this AzureAmsAccountFilterUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ClearIds(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings RemoveIds(this AzureAmsAccountFilterUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings RemoveIds(this AzureAmsAccountFilterUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetName(this AzureAmsAccountFilterUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Name"/></em></p>
        ///   <p>The name of the account filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetName(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetResourceGroup(this AzureAmsAccountFilterUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetResourceGroup(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetSubscription(this AzureAmsAccountFilterUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetSubscription(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region EndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD). For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes. Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings, string endTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = endTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD). For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes. Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region ForceEndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetForceEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings, bool? forceEndTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = forceEndTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetForceEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings EnableForceEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings DisableForceEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsAccountFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ToggleForceEndTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = !toolSettings.ForceEndTimestamp;
            return toolSettings;
        }
        #endregion
        #region LiveBackoffDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetLiveBackoffDuration(this AzureAmsAccountFilterUpdateSettings toolSettings, string liveBackoffDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = liveBackoffDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetLiveBackoffDuration(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = null;
            return toolSettings;
        }
        #endregion
        #region PresentationWindowDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist. The unit for this property is timescale (see below). For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetPresentationWindowDuration(this AzureAmsAccountFilterUpdateSettings toolSettings, string presentationWindowDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = presentationWindowDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist. The unit for this property is timescale (see below). For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetPresentationWindowDuration(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = null;
            return toolSettings;
        }
        #endregion
        #region StartTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetStartTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings, string startTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = startTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetStartTimestamp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region Timescale
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second. Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetTimescale(this AzureAmsAccountFilterUpdateSettings toolSettings, string timescale)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = timescale;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second. Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetTimescale(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetAdd(this AzureAmsAccountFilterUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetAdd(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetForceString(this AzureAmsAccountFilterUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetForceString(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetRemove(this AzureAmsAccountFilterUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetRemove(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetSet(this AzureAmsAccountFilterUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetSet(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetDebug(this AzureAmsAccountFilterUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetDebug(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetHelp(this AzureAmsAccountFilterUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetHelp(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetOutput(this AzureAmsAccountFilterUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetOutput(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetQuery(this AzureAmsAccountFilterUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetQuery(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountFilterUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings SetVerbose(this AzureAmsAccountFilterUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountFilterUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountFilterUpdateSettings ResetVerbose(this AzureAmsAccountFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountCheckNameSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountCheckNameSettingsExtensions
    {
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetLocation(this AzureAmsAccountCheckNameSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetLocation(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetName(this AzureAmsAccountCheckNameSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetName(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetSubscription(this AzureAmsAccountCheckNameSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetSubscription(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetDebug(this AzureAmsAccountCheckNameSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetDebug(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetHelp(this AzureAmsAccountCheckNameSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetHelp(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetOutput(this AzureAmsAccountCheckNameSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetOutput(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetQuery(this AzureAmsAccountCheckNameSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetQuery(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCheckNameSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings SetVerbose(this AzureAmsAccountCheckNameSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCheckNameSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCheckNameSettings ResetVerbose(this AzureAmsAccountCheckNameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetName(this AzureAmsAccountCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetName(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetResourceGroup(this AzureAmsAccountCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetResourceGroup(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.StorageAccount"/></em></p>
        ///   <p>The name or resource ID of the primary storage account to attach to the Azure Media Services account. The storage account MUST be in the same Azure subscription as the Media Services account. It is strongly recommended that the storage account be in the same resource group as the Media Services account. Blob only accounts are not allowed as primary.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetStorageAccount(this AzureAmsAccountCreateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.StorageAccount"/></em></p>
        ///   <p>The name or resource ID of the primary storage account to attach to the Azure Media Services account. The storage account MUST be in the same Azure subscription as the Media Services account. It is strongly recommended that the storage account be in the same resource group as the Media Services account. Blob only accounts are not allowed as primary.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetStorageAccount(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetLocation(this AzureAmsAccountCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetLocation(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetTags(this AzureAmsAccountCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetTags(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetSubscription(this AzureAmsAccountCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetSubscription(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetDebug(this AzureAmsAccountCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetDebug(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetHelp(this AzureAmsAccountCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetHelp(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetOutput(this AzureAmsAccountCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetOutput(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetQuery(this AzureAmsAccountCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetQuery(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings SetVerbose(this AzureAmsAccountCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountCreateSettings ResetVerbose(this AzureAmsAccountCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountDeleteSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetIds(this AzureAmsAccountDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetIds(this AzureAmsAccountDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings AddIds(this AzureAmsAccountDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings AddIds(this AzureAmsAccountDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ClearIds(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings RemoveIds(this AzureAmsAccountDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings RemoveIds(this AzureAmsAccountDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetName(this AzureAmsAccountDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetName(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetResourceGroup(this AzureAmsAccountDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetResourceGroup(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetSubscription(this AzureAmsAccountDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetSubscription(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetDebug(this AzureAmsAccountDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetDebug(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetHelp(this AzureAmsAccountDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetHelp(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetOutput(this AzureAmsAccountDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetOutput(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetQuery(this AzureAmsAccountDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetQuery(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings SetVerbose(this AzureAmsAccountDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountDeleteSettings ResetVerbose(this AzureAmsAccountDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetResourceGroup(this AzureAmsAccountListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetResourceGroup(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetSubscription(this AzureAmsAccountListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetSubscription(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetDebug(this AzureAmsAccountListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetDebug(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetHelp(this AzureAmsAccountListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetHelp(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetOutput(this AzureAmsAccountListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetOutput(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetQuery(this AzureAmsAccountListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetQuery(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings SetVerbose(this AzureAmsAccountListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountListSettings ResetVerbose(this AzureAmsAccountListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetIds(this AzureAmsAccountShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetIds(this AzureAmsAccountShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings AddIds(this AzureAmsAccountShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings AddIds(this AzureAmsAccountShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ClearIds(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings RemoveIds(this AzureAmsAccountShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings RemoveIds(this AzureAmsAccountShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetName(this AzureAmsAccountShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetName(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetResourceGroup(this AzureAmsAccountShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetResourceGroup(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetSubscription(this AzureAmsAccountShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetSubscription(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetDebug(this AzureAmsAccountShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetDebug(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetHelp(this AzureAmsAccountShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetHelp(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetOutput(this AzureAmsAccountShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetOutput(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetQuery(this AzureAmsAccountShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetQuery(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings SetVerbose(this AzureAmsAccountShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountShowSettings ResetVerbose(this AzureAmsAccountShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountUpdateSettingsExtensions
    {
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetTags(this AzureAmsAccountUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetTags(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetIds(this AzureAmsAccountUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetIds(this AzureAmsAccountUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings AddIds(this AzureAmsAccountUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings AddIds(this AzureAmsAccountUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ClearIds(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings RemoveIds(this AzureAmsAccountUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings RemoveIds(this AzureAmsAccountUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetName(this AzureAmsAccountUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetName(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetResourceGroup(this AzureAmsAccountUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetResourceGroup(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetSubscription(this AzureAmsAccountUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetSubscription(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetAdd(this AzureAmsAccountUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetAdd(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetForceString(this AzureAmsAccountUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetForceString(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetRemove(this AzureAmsAccountUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetRemove(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetSet(this AzureAmsAccountUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetSet(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetDebug(this AzureAmsAccountUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetDebug(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetHelp(this AzureAmsAccountUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetHelp(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetOutput(this AzureAmsAccountUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetOutput(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetQuery(this AzureAmsAccountUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetQuery(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings SetVerbose(this AzureAmsAccountUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountUpdateSettings ResetVerbose(this AzureAmsAccountUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetFilterCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetFilterCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetAccountName(this AzureAmsAssetFilterCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetAccountName(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetAssetName(this AzureAmsAssetFilterCreateSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetAssetName(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetName(this AzureAmsAssetFilterCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetName(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetResourceGroup(this AzureAmsAssetFilterCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetResourceGroup(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Bitrate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetBitrate(this AzureAmsAssetFilterCreateSettings toolSettings, string bitrate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = bitrate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetBitrate(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = null;
            return toolSettings;
        }
        #endregion
        #region FirstQuality
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetFirstQuality(this AzureAmsAssetFilterCreateSettings toolSettings, string firstQuality)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = firstQuality;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetFirstQuality(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = null;
            return toolSettings;
        }
        #endregion
        #region Tracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetTracks(this AzureAmsAssetFilterCreateSettings toolSettings, string tracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = tracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetTracks(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = null;
            return toolSettings;
        }
        #endregion
        #region EndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD).For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD.This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes.Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest).For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings, string endTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = endTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD).For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD.This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes.Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest).For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region ForceEndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetForceEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings, bool? forceEndTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = forceEndTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetForceEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings EnableForceEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings DisableForceEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsAssetFilterCreateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ToggleForceEndTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = !toolSettings.ForceEndTimestamp;
            return toolSettings;
        }
        #endregion
        #region LiveBackoffDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetLiveBackoffDuration(this AzureAmsAssetFilterCreateSettings toolSettings, string liveBackoffDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = liveBackoffDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetLiveBackoffDuration(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = null;
            return toolSettings;
        }
        #endregion
        #region PresentationWindowDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only.Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist.The unit for this property is timescale (see below).For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetPresentationWindowDuration(this AzureAmsAssetFilterCreateSettings toolSettings, string presentationWindowDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = presentationWindowDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only.Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist.The unit for this property is timescale (see below).For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetPresentationWindowDuration(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = null;
            return toolSettings;
        }
        #endregion
        #region StartTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetStartTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings, string startTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = startTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetStartTimestamp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region Timescale
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second.Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetTimescale(this AzureAmsAssetFilterCreateSettings toolSettings, string timescale)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = timescale;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second.Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetTimescale(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetSubscription(this AzureAmsAssetFilterCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetSubscription(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetDebug(this AzureAmsAssetFilterCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetDebug(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetHelp(this AzureAmsAssetFilterCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetHelp(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetOutput(this AzureAmsAssetFilterCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetOutput(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetQuery(this AzureAmsAssetFilterCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetQuery(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings SetVerbose(this AzureAmsAssetFilterCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterCreateSettings ResetVerbose(this AzureAmsAssetFilterCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetFilterDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetFilterDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetAccountName(this AzureAmsAssetFilterDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetAccountName(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetAssetName(this AzureAmsAssetFilterDeleteSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetAssetName(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetIds(this AzureAmsAssetFilterDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetIds(this AzureAmsAssetFilterDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings AddIds(this AzureAmsAssetFilterDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings AddIds(this AzureAmsAssetFilterDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ClearIds(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings RemoveIds(this AzureAmsAssetFilterDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetFilterDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings RemoveIds(this AzureAmsAssetFilterDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetName(this AzureAmsAssetFilterDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetName(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetResourceGroup(this AzureAmsAssetFilterDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetResourceGroup(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetSubscription(this AzureAmsAssetFilterDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetSubscription(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetDebug(this AzureAmsAssetFilterDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetDebug(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetHelp(this AzureAmsAssetFilterDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetHelp(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetOutput(this AzureAmsAssetFilterDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetOutput(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetQuery(this AzureAmsAssetFilterDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetQuery(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings SetVerbose(this AzureAmsAssetFilterDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterDeleteSettings ResetVerbose(this AzureAmsAssetFilterDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetFilterListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetFilterListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetAccountName(this AzureAmsAssetFilterListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetAccountName(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetAssetName(this AzureAmsAssetFilterListSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetAssetName(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetResourceGroup(this AzureAmsAssetFilterListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetResourceGroup(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetSubscription(this AzureAmsAssetFilterListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetSubscription(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetDebug(this AzureAmsAssetFilterListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetDebug(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetHelp(this AzureAmsAssetFilterListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetHelp(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetOutput(this AzureAmsAssetFilterListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetOutput(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetQuery(this AzureAmsAssetFilterListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetQuery(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings SetVerbose(this AzureAmsAssetFilterListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterListSettings ResetVerbose(this AzureAmsAssetFilterListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetFilterShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetFilterShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetAccountName(this AzureAmsAssetFilterShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetAccountName(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetAssetName(this AzureAmsAssetFilterShowSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetAssetName(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetIds(this AzureAmsAssetFilterShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetIds(this AzureAmsAssetFilterShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings AddIds(this AzureAmsAssetFilterShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings AddIds(this AzureAmsAssetFilterShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ClearIds(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings RemoveIds(this AzureAmsAssetFilterShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetFilterShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings RemoveIds(this AzureAmsAssetFilterShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetName(this AzureAmsAssetFilterShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetName(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetResourceGroup(this AzureAmsAssetFilterShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetResourceGroup(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetSubscription(this AzureAmsAssetFilterShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetSubscription(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetDebug(this AzureAmsAssetFilterShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetDebug(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetHelp(this AzureAmsAssetFilterShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetHelp(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetOutput(this AzureAmsAssetFilterShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetOutput(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetQuery(this AzureAmsAssetFilterShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetQuery(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings SetVerbose(this AzureAmsAssetFilterShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterShowSettings ResetVerbose(this AzureAmsAssetFilterShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetFilterUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetFilterUpdateSettingsExtensions
    {
        #region Bitrate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetBitrate(this AzureAmsAssetFilterUpdateSettings toolSettings, string bitrate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = bitrate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Bitrate"/></em></p>
        ///   <p>The first quality bitrate.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetBitrate(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Bitrate = null;
            return toolSettings;
        }
        #endregion
        #region FirstQuality
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetFirstQuality(this AzureAmsAssetFilterUpdateSettings toolSettings, string firstQuality)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = firstQuality;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.FirstQuality"/></em></p>
        ///   <p>The first quality (lowest) bitrate to include in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetFirstQuality(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FirstQuality = null;
            return toolSettings;
        }
        #endregion
        #region Tracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetTracks(this AzureAmsAssetFilterUpdateSettings toolSettings, string tracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = tracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Tracks"/></em></p>
        ///   <p>The JSON representing the track selections. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection">https://docs.microsoft.com/en-us/rest/api/media/assetfilters/assetfilters_createorupdate#filtertrackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetTracks(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracks = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetAccountName(this AzureAmsAssetFilterUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetAccountName(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetAssetName(this AzureAmsAssetFilterUpdateSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetAssetName(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetIds(this AzureAmsAssetFilterUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetIds(this AzureAmsAssetFilterUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings AddIds(this AzureAmsAssetFilterUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings AddIds(this AzureAmsAssetFilterUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ClearIds(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings RemoveIds(this AzureAmsAssetFilterUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetFilterUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings RemoveIds(this AzureAmsAssetFilterUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetName(this AzureAmsAssetFilterUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Name"/></em></p>
        ///   <p>The name of the asset filter.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetName(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetResourceGroup(this AzureAmsAssetFilterUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetResourceGroup(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetSubscription(this AzureAmsAssetFilterUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetSubscription(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region EndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD).For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD.This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes.Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest).For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings, string endTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = endTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.EndTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD).For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD.This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is the timescale, so an endTimestamp of 1800000000 would be for 3 minutes.Use startTimestamp and endTimestamp to trim the fragments that will be in the playlist (manifest).For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region ForceEndTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetForceEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings, bool? forceEndTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = forceEndTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetForceEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings EnableForceEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings DisableForceEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsAssetFilterUpdateSettings.ForceEndTimestamp"/></em></p>
        ///   <p>Applies to Live Streaming only. Indicates whether the endTimestamp property must be present. If true, endTimestamp must be specified or a bad request code is returned. Allowed values: false, true.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ToggleForceEndTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceEndTimestamp = !toolSettings.ForceEndTimestamp;
            return toolSettings;
        }
        #endregion
        #region LiveBackoffDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetLiveBackoffDuration(this AzureAmsAssetFilterUpdateSettings toolSettings, string liveBackoffDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = liveBackoffDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.LiveBackoffDuration"/></em></p>
        ///   <p>Applies to Live Streaming only. This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit for this property is timescale (see below). The maximum live back off duration is 300 seconds (3000000000). For example, a value of 2000000000 means that the latest available content is 20 seconds delayed from the real live edge.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetLiveBackoffDuration(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveBackoffDuration = null;
            return toolSettings;
        }
        #endregion
        #region PresentationWindowDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only.Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist.The unit for this property is timescale (see below).For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetPresentationWindowDuration(this AzureAmsAssetFilterUpdateSettings toolSettings, string presentationWindowDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = presentationWindowDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.PresentationWindowDuration"/></em></p>
        ///   <p>Applies to Live Streaming only.Use presentationWindowDuration to apply a sliding window of fragments to include in a playlist.The unit for this property is timescale (see below).For example, set presentationWindowDuration=1200000000 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetPresentationWindowDuration(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresentationWindowDuration = null;
            return toolSettings;
        }
        #endregion
        #region StartTimestamp
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetStartTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings, string startTimestamp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = startTimestamp;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.StartTimestamp"/></em></p>
        ///   <p>Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is the timescale, so a startTimestamp of 150000000 would be for 15 seconds. Use startTimestamp and endTimestampp to trim the fragments that will be in the playlist (manifest). For example, startTimestamp=40000000 and endTimestamp=100000000 using the default timescale will generate a playlist that contains fragments from between 4 seconds and 10 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetStartTimestamp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTimestamp = null;
            return toolSettings;
        }
        #endregion
        #region Timescale
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second.Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetTimescale(this AzureAmsAssetFilterUpdateSettings toolSettings, string timescale)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = timescale;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Timescale"/></em></p>
        ///   <p>Applies to all timestamps and durations in a Presentation Time Range, specified as the number of increments in one second.Default is 10000000 - ten million increments in one second, where each increment would be 100 nanoseconds long. For example, if you want to set a startTimestamp at 30 seconds, you would use a value of 300000000 when using the default timescale.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetTimescale(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timescale = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetAdd(this AzureAmsAssetFilterUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetAdd(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetForceString(this AzureAmsAssetFilterUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetForceString(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetRemove(this AzureAmsAssetFilterUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetRemove(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetSet(this AzureAmsAssetFilterUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetSet(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetDebug(this AzureAmsAssetFilterUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetDebug(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetHelp(this AzureAmsAssetFilterUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetHelp(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetOutput(this AzureAmsAssetFilterUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetOutput(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetQuery(this AzureAmsAssetFilterUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetQuery(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetFilterUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings SetVerbose(this AzureAmsAssetFilterUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetFilterUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetFilterUpdateSettings ResetVerbose(this AzureAmsAssetFilterUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetAccountName(this AzureAmsAssetCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetAccountName(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetName(this AzureAmsAssetCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetName(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetResourceGroup(this AzureAmsAssetCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetResourceGroup(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AlternateId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.AlternateId"/></em></p>
        ///   <p>The alternate id of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetAlternateId(this AzureAmsAssetCreateSettings toolSettings, string alternateId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternateId = alternateId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.AlternateId"/></em></p>
        ///   <p>The alternate id of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetAlternateId(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternateId = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Container"/></em></p>
        ///   <p>The name of the asset blob container.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetContainer(this AzureAmsAssetCreateSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Container"/></em></p>
        ///   <p>The name of the asset blob container.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetContainer(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Description"/></em></p>
        ///   <p>The asset description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetDescription(this AzureAmsAssetCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Description"/></em></p>
        ///   <p>The asset description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetDescription(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.StorageAccount"/></em></p>
        ///   <p>The name of the storage account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetStorageAccount(this AzureAmsAssetCreateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.StorageAccount"/></em></p>
        ///   <p>The name of the storage account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetStorageAccount(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetSubscription(this AzureAmsAssetCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetSubscription(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetDebug(this AzureAmsAssetCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetDebug(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetHelp(this AzureAmsAssetCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetHelp(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetOutput(this AzureAmsAssetCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetOutput(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetQuery(this AzureAmsAssetCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetQuery(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings SetVerbose(this AzureAmsAssetCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetCreateSettings ResetVerbose(this AzureAmsAssetCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetAccountName(this AzureAmsAssetDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetAccountName(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetIds(this AzureAmsAssetDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetIds(this AzureAmsAssetDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings AddIds(this AzureAmsAssetDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings AddIds(this AzureAmsAssetDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ClearIds(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings RemoveIds(this AzureAmsAssetDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings RemoveIds(this AzureAmsAssetDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetName(this AzureAmsAssetDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetName(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetResourceGroup(this AzureAmsAssetDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetResourceGroup(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetSubscription(this AzureAmsAssetDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetSubscription(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetDebug(this AzureAmsAssetDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetDebug(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetHelp(this AzureAmsAssetDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetHelp(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetOutput(this AzureAmsAssetDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetOutput(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetQuery(this AzureAmsAssetDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetQuery(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings SetVerbose(this AzureAmsAssetDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetDeleteSettings ResetVerbose(this AzureAmsAssetDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetGetEncryptionKeySettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetGetEncryptionKeySettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetAccountName(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetAccountName(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings AddIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings AddIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ClearIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings RemoveIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetGetEncryptionKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings RemoveIds(this AzureAmsAssetGetEncryptionKeySettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetName(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetName(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetResourceGroup(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetResourceGroup(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetSubscription(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetSubscription(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetDebug(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetDebug(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetHelp(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetHelp(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetOutput(this AzureAmsAssetGetEncryptionKeySettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetOutput(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetQuery(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetQuery(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetEncryptionKeySettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings SetVerbose(this AzureAmsAssetGetEncryptionKeySettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetEncryptionKeySettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetEncryptionKeySettings ResetVerbose(this AzureAmsAssetGetEncryptionKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetGetSasUrlsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetGetSasUrlsSettingsExtensions
    {
        #region Expiry
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Expiry"/></em></p>
        ///   <p>Specifies the UTC datetime (Y-m-d'T'H:M:S'Z') at which the SAS becomes invalid.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetExpiry(this AzureAmsAssetGetSasUrlsSettings toolSettings, string expiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = expiry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Expiry"/></em></p>
        ///   <p>Specifies the UTC datetime (Y-m-d'T'H:M:S'Z') at which the SAS becomes invalid.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetExpiry(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiry = null;
            return toolSettings;
        }
        #endregion
        #region Permissions
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Permissions"/></em></p>
        ///   <p>The permissions to set on the SAS URL.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetPermissions(this AzureAmsAssetGetSasUrlsSettings toolSettings, AmsAssetGetSasUrlsPermissions permissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = permissions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Permissions"/></em></p>
        ///   <p>The permissions to set on the SAS URL.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetPermissions(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Permissions = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetAccountName(this AzureAmsAssetGetSasUrlsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetAccountName(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetIds(this AzureAmsAssetGetSasUrlsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetIds(this AzureAmsAssetGetSasUrlsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings AddIds(this AzureAmsAssetGetSasUrlsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings AddIds(this AzureAmsAssetGetSasUrlsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ClearIds(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings RemoveIds(this AzureAmsAssetGetSasUrlsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetGetSasUrlsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings RemoveIds(this AzureAmsAssetGetSasUrlsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetName(this AzureAmsAssetGetSasUrlsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetName(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetResourceGroup(this AzureAmsAssetGetSasUrlsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetResourceGroup(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetSubscription(this AzureAmsAssetGetSasUrlsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetSubscription(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetDebug(this AzureAmsAssetGetSasUrlsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetDebug(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetHelp(this AzureAmsAssetGetSasUrlsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetHelp(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetOutput(this AzureAmsAssetGetSasUrlsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetOutput(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetQuery(this AzureAmsAssetGetSasUrlsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetQuery(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetGetSasUrlsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings SetVerbose(this AzureAmsAssetGetSasUrlsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetGetSasUrlsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetGetSasUrlsSettings ResetVerbose(this AzureAmsAssetGetSasUrlsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetAccountName(this AzureAmsAssetListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetAccountName(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetResourceGroup(this AzureAmsAssetListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetResourceGroup(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetFilter(this AzureAmsAssetListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetFilter(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetOrderby(this AzureAmsAssetListSettings toolSettings, string orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetOrderby(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetTop(this AzureAmsAssetListSettings toolSettings, string top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetTop(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetSubscription(this AzureAmsAssetListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetSubscription(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetDebug(this AzureAmsAssetListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetDebug(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetHelp(this AzureAmsAssetListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetHelp(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetOutput(this AzureAmsAssetListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetOutput(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetQuery(this AzureAmsAssetListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetQuery(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings SetVerbose(this AzureAmsAssetListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListSettings ResetVerbose(this AzureAmsAssetListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetListStreamingLocatorsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetListStreamingLocatorsSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetAccountName(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetAccountName(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings AddIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings AddIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ClearIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings RemoveIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetListStreamingLocatorsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings RemoveIds(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetName(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetName(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetResourceGroup(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetResourceGroup(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetSubscription(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetSubscription(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetDebug(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetDebug(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetHelp(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetHelp(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetOutput(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetOutput(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetQuery(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetQuery(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings SetVerbose(this AzureAmsAssetListStreamingLocatorsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetListStreamingLocatorsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetListStreamingLocatorsSettings ResetVerbose(this AzureAmsAssetListStreamingLocatorsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetAccountName(this AzureAmsAssetShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetAccountName(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetIds(this AzureAmsAssetShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetIds(this AzureAmsAssetShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings AddIds(this AzureAmsAssetShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings AddIds(this AzureAmsAssetShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ClearIds(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings RemoveIds(this AzureAmsAssetShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings RemoveIds(this AzureAmsAssetShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetName(this AzureAmsAssetShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetName(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetResourceGroup(this AzureAmsAssetShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetResourceGroup(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetSubscription(this AzureAmsAssetShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetSubscription(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetDebug(this AzureAmsAssetShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetDebug(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetHelp(this AzureAmsAssetShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetHelp(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetOutput(this AzureAmsAssetShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetOutput(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetQuery(this AzureAmsAssetShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetQuery(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings SetVerbose(this AzureAmsAssetShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetShowSettings ResetVerbose(this AzureAmsAssetShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAssetUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAssetUpdateSettingsExtensions
    {
        #region AlternateId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.AlternateId"/></em></p>
        ///   <p>The alternate id of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetAlternateId(this AzureAmsAssetUpdateSettings toolSettings, string alternateId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternateId = alternateId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.AlternateId"/></em></p>
        ///   <p>The alternate id of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetAlternateId(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternateId = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Description"/></em></p>
        ///   <p>The asset description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetDescription(this AzureAmsAssetUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Description"/></em></p>
        ///   <p>The asset description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetDescription(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetAccountName(this AzureAmsAssetUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetAccountName(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetIds(this AzureAmsAssetUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetIds(this AzureAmsAssetUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings AddIds(this AzureAmsAssetUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAssetUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings AddIds(this AzureAmsAssetUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAssetUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ClearIds(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings RemoveIds(this AzureAmsAssetUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAssetUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings RemoveIds(this AzureAmsAssetUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetName(this AzureAmsAssetUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Name"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetName(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetResourceGroup(this AzureAmsAssetUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetResourceGroup(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetSubscription(this AzureAmsAssetUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetSubscription(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetAdd(this AzureAmsAssetUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetAdd(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetForceString(this AzureAmsAssetUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetForceString(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetRemove(this AzureAmsAssetUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetRemove(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetSet(this AzureAmsAssetUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetSet(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetDebug(this AzureAmsAssetUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetDebug(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetHelp(this AzureAmsAssetUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetHelp(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetOutput(this AzureAmsAssetUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetOutput(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetQuery(this AzureAmsAssetUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetQuery(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAssetUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings SetVerbose(this AzureAmsAssetUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAssetUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAssetUpdateSettings ResetVerbose(this AzureAmsAssetUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAccountName(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetAccountName(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetName(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetName(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region PolicyOptionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.PolicyOptionName"/></em></p>
        ///   <p>The content key policy option name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetPolicyOptionName(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string policyOptionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionName = policyOptionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.PolicyOptionName"/></em></p>
        ///   <p>The content key policy option name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetPolicyOptionName(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetResourceGroup(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetResourceGroup(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Description"/></em></p>
        ///   <p>The content key policy description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetDescription(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Description"/></em></p>
        ///   <p>The content key policy description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetDescription(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region ClearKeyConfiguration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.ClearKeyConfiguration"/></em></p>
        ///   <p>Use Clear Key configuration, a.k.a AES encryption. It's intended for non-DRM keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetClearKeyConfiguration(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string clearKeyConfiguration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClearKeyConfiguration = clearKeyConfiguration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.ClearKeyConfiguration"/></em></p>
        ///   <p>Use Clear Key configuration, a.k.a AES encryption. It's intended for non-DRM keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetClearKeyConfiguration(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClearKeyConfiguration = null;
            return toolSettings;
        }
        #endregion
        #region Ask
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Ask"/></em></p>
        ///   <p>The key that must be used as FairPlay Application Secret Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAsk(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string ask)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ask = ask;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Ask"/></em></p>
        ///   <p>The key that must be used as FairPlay Application Secret Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetAsk(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ask = null;
            return toolSettings;
        }
        #endregion
        #region FairPlayPfx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfx"/></em></p>
        ///   <p>The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetFairPlayPfx(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string fairPlayPfx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfx = fairPlayPfx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfx"/></em></p>
        ///   <p>The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetFairPlayPfx(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfx = null;
            return toolSettings;
        }
        #endregion
        #region FairPlayPfxPassword
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfxPassword"/></em></p>
        ///   <p>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetFairPlayPfxPassword(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string fairPlayPfxPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfxPassword = fairPlayPfxPassword;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.FairPlayPfxPassword"/></em></p>
        ///   <p>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetFairPlayPfxPassword(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfxPassword = null;
            return toolSettings;
        }
        #endregion
        #region RentalAndLeaseKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalAndLeaseKeyType"/></em></p>
        ///   <p>The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetRentalAndLeaseKeyType(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string rentalAndLeaseKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalAndLeaseKeyType = rentalAndLeaseKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalAndLeaseKeyType"/></em></p>
        ///   <p>The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetRentalAndLeaseKeyType(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalAndLeaseKeyType = null;
            return toolSettings;
        }
        #endregion
        #region RentalDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalDuration"/></em></p>
        ///   <p>The rental duration. Must be greater than or equal to 0.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetRentalDuration(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string rentalDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalDuration = rentalDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.RentalDuration"/></em></p>
        ///   <p>The rental duration. Must be greater than or equal to 0.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetRentalDuration(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalDuration = null;
            return toolSettings;
        }
        #endregion
        #region OpenRestriction
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenRestriction"/></em></p>
        ///   <p>Use open restriction. License or key will be delivered on every request. Not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetOpenRestriction(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string openRestriction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenRestriction = openRestriction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenRestriction"/></em></p>
        ///   <p>Use open restriction. License or key will be delivered on every request. Not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetOpenRestriction(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenRestriction = null;
            return toolSettings;
        }
        #endregion
        #region PlayReadyTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.PlayReadyTemplate"/></em></p>
        ///   <p>JSON PlayReady license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetPlayReadyTemplate(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string playReadyTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlayReadyTemplate = playReadyTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.PlayReadyTemplate"/></em></p>
        ///   <p>JSON PlayReady license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetPlayReadyTemplate(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlayReadyTemplate = null;
            return toolSettings;
        }
        #endregion
        #region AltRsaTokenKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal = altRsaTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal = altRsaTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal.AddRange(altRsaTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal.AddRange(altRsaTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ClearAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altRsaTokenKeys);
            toolSettings.AltRsaTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveAltRsaTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altRsaTokenKeys);
            toolSettings.AltRsaTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AltSymmetricTokenKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal = altSymmetricTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal = altSymmetricTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal.AddRange(altSymmetricTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal.AddRange(altSymmetricTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ClearAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altSymmetricTokenKeys);
            toolSettings.AltSymmetricTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altSymmetricTokenKeys);
            toolSettings.AltSymmetricTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AltX509TokenKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal = altX509TokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal = altX509TokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal.AddRange(altX509TokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal.AddRange(altX509TokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ClearAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altX509TokenKeys);
            toolSettings.AltX509TokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveAltX509TokenKeys(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altX509TokenKeys);
            toolSettings.AltX509TokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Audience
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Audience"/></em></p>
        ///   <p>The audience for the token.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetAudience(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string audience)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Audience = audience;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Audience"/></em></p>
        ///   <p>The audience for the token.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetAudience(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Audience = null;
            return toolSettings;
        }
        #endregion
        #region Issuer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Issuer"/></em></p>
        ///   <p>The token issuer.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetIssuer(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string issuer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Issuer = issuer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Issuer"/></em></p>
        ///   <p>The token issuer.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetIssuer(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Issuer = null;
            return toolSettings;
        }
        #endregion
        #region OpenIdConnectDiscoveryDocument
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenIdConnectDiscoveryDocument"/></em></p>
        ///   <p>The OpenID connect discovery document.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetOpenIdConnectDiscoveryDocument(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string openIdConnectDiscoveryDocument)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.OpenIdConnectDiscoveryDocument"/></em></p>
        ///   <p>The OpenID connect discovery document.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetOpenIdConnectDiscoveryDocument(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenIdConnectDiscoveryDocument = null;
            return toolSettings;
        }
        #endregion
        #region TokenClaims
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/> to a new list</em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal = tokenClaims.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/> to a new list</em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal = tokenClaims.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.AddRange(tokenClaims);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings AddTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.AddRange(tokenClaims);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ClearTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tokenClaims);
            toolSettings.TokenClaimsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings RemoveTokenClaims(this AzureAmsContentKeyPolicyCreateSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tokenClaims);
            toolSettings.TokenClaimsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TokenKey
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKey"/></em></p>
        ///   <p>Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetTokenKey(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string tokenKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKey = tokenKey;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKey"/></em></p>
        ///   <p>Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetTokenKey(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKey = null;
            return toolSettings;
        }
        #endregion
        #region TokenKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetTokenKeyType(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string tokenKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKeyType = tokenKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetTokenKeyType(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKeyType = null;
            return toolSettings;
        }
        #endregion
        #region TokenType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenType"/></em></p>
        ///   <p>The type of token. Allowed values: Jwt, Swt.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetTokenType(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string tokenType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenType = tokenType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.TokenType"/></em></p>
        ///   <p>The type of token. Allowed values: Jwt, Swt.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetTokenType(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenType = null;
            return toolSettings;
        }
        #endregion
        #region WidevineTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.WidevineTemplate"/></em></p>
        ///   <p>JSON Widevine license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetWidevineTemplate(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string widevineTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WidevineTemplate = widevineTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.WidevineTemplate"/></em></p>
        ///   <p>JSON Widevine license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetWidevineTemplate(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WidevineTemplate = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetSubscription(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetSubscription(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetDebug(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetDebug(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetHelp(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetHelp(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetOutput(this AzureAmsContentKeyPolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetOutput(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetQuery(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetQuery(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings SetVerbose(this AzureAmsContentKeyPolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyCreateSettings ResetVerbose(this AzureAmsContentKeyPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetAccountName(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetAccountName(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings AddIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings AddIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ClearIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings RemoveIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings RemoveIds(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetName(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetName(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetResourceGroup(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetResourceGroup(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetSubscription(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetSubscription(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetDebug(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetDebug(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetHelp(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetHelp(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetOutput(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetOutput(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetQuery(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetQuery(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings SetVerbose(this AzureAmsContentKeyPolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyDeleteSettings ResetVerbose(this AzureAmsContentKeyPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetAccountName(this AzureAmsContentKeyPolicyListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetAccountName(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetResourceGroup(this AzureAmsContentKeyPolicyListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetResourceGroup(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetFilter(this AzureAmsContentKeyPolicyListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetFilter(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetOrderby(this AzureAmsContentKeyPolicyListSettings toolSettings, string orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetOrderby(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetTop(this AzureAmsContentKeyPolicyListSettings toolSettings, string top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetTop(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetSubscription(this AzureAmsContentKeyPolicyListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetSubscription(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetDebug(this AzureAmsContentKeyPolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetDebug(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetHelp(this AzureAmsContentKeyPolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetHelp(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetOutput(this AzureAmsContentKeyPolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetOutput(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetQuery(this AzureAmsContentKeyPolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetQuery(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings SetVerbose(this AzureAmsContentKeyPolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyListSettings ResetVerbose(this AzureAmsContentKeyPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyShowSettingsExtensions
    {
        #region WithSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.WithSecrets"/></em></p>
        ///   <p>Include secret values of the content key policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetWithSecrets(this AzureAmsContentKeyPolicyShowSettings toolSettings, string withSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithSecrets = withSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.WithSecrets"/></em></p>
        ///   <p>Include secret values of the content key policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetWithSecrets(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithSecrets = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetAccountName(this AzureAmsContentKeyPolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetAccountName(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetIds(this AzureAmsContentKeyPolicyShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetIds(this AzureAmsContentKeyPolicyShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings AddIds(this AzureAmsContentKeyPolicyShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings AddIds(this AzureAmsContentKeyPolicyShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ClearIds(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings RemoveIds(this AzureAmsContentKeyPolicyShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings RemoveIds(this AzureAmsContentKeyPolicyShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetName(this AzureAmsContentKeyPolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetName(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetResourceGroup(this AzureAmsContentKeyPolicyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetResourceGroup(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetSubscription(this AzureAmsContentKeyPolicyShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetSubscription(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetDebug(this AzureAmsContentKeyPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetDebug(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetHelp(this AzureAmsContentKeyPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetHelp(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetOutput(this AzureAmsContentKeyPolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetOutput(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetQuery(this AzureAmsContentKeyPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetQuery(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings SetVerbose(this AzureAmsContentKeyPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyShowSettings ResetVerbose(this AzureAmsContentKeyPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyUpdateSettingsExtensions
    {
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Description"/></em></p>
        ///   <p>The content key policy description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetDescription(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Description"/></em></p>
        ///   <p>The content key policy description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetDescription(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetAccountName(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetAccountName(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings AddIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings AddIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ClearIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings RemoveIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings RemoveIds(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetName(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetName(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetResourceGroup(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetResourceGroup(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetSubscription(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetSubscription(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetAdd(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetAdd(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetForceString(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetForceString(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetRemove(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetRemove(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetSet(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetSet(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetDebug(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetDebug(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetHelp(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetHelp(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetOutput(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetOutput(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetQuery(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetQuery(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings SetVerbose(this AzureAmsContentKeyPolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyUpdateSettings ResetVerbose(this AzureAmsContentKeyPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsJobCancelSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsJobCancelSettingsExtensions
    {
        #region Delete
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Delete"/></em></p>
        ///   <p>Delete the job being cancelled.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetDelete(this AzureAmsJobCancelSettings toolSettings, string delete)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Delete = delete;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Delete"/></em></p>
        ///   <p>Delete the job being cancelled.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetDelete(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Delete = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetAccountName(this AzureAmsJobCancelSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetAccountName(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetIds(this AzureAmsJobCancelSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetIds(this AzureAmsJobCancelSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobCancelSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings AddIds(this AzureAmsJobCancelSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobCancelSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings AddIds(this AzureAmsJobCancelSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobCancelSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ClearIds(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobCancelSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings RemoveIds(this AzureAmsJobCancelSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobCancelSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings RemoveIds(this AzureAmsJobCancelSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetName(this AzureAmsJobCancelSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetName(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetResourceGroup(this AzureAmsJobCancelSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetResourceGroup(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetSubscription(this AzureAmsJobCancelSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetSubscription(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region TransformName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetTransformName(this AzureAmsJobCancelSettings toolSettings, string transformName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = transformName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetTransformName(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetDebug(this AzureAmsJobCancelSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetDebug(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetHelp(this AzureAmsJobCancelSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetHelp(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetOutput(this AzureAmsJobCancelSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetOutput(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetQuery(this AzureAmsJobCancelSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetQuery(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobCancelSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings SetVerbose(this AzureAmsJobCancelSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobCancelSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobCancelSettings ResetVerbose(this AzureAmsJobCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsJobDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsJobDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetAccountName(this AzureAmsJobDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetAccountName(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetIds(this AzureAmsJobDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetIds(this AzureAmsJobDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings AddIds(this AzureAmsJobDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings AddIds(this AzureAmsJobDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ClearIds(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings RemoveIds(this AzureAmsJobDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings RemoveIds(this AzureAmsJobDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetName(this AzureAmsJobDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetName(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetResourceGroup(this AzureAmsJobDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetResourceGroup(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetSubscription(this AzureAmsJobDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetSubscription(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region TransformName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetTransformName(this AzureAmsJobDeleteSettings toolSettings, string transformName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = transformName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetTransformName(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetDebug(this AzureAmsJobDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetDebug(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetHelp(this AzureAmsJobDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetHelp(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetOutput(this AzureAmsJobDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetOutput(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetQuery(this AzureAmsJobDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetQuery(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings SetVerbose(this AzureAmsJobDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobDeleteSettings ResetVerbose(this AzureAmsJobDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsJobListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsJobListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetAccountName(this AzureAmsJobListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetAccountName(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetResourceGroup(this AzureAmsJobListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetResourceGroup(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region TransformName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetTransformName(this AzureAmsJobListSettings toolSettings, string transformName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = transformName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetTransformName(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetFilter(this AzureAmsJobListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetFilter(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetOrderby(this AzureAmsJobListSettings toolSettings, string orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetOrderby(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetSubscription(this AzureAmsJobListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetSubscription(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetDebug(this AzureAmsJobListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetDebug(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetHelp(this AzureAmsJobListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetHelp(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetOutput(this AzureAmsJobListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetOutput(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetQuery(this AzureAmsJobListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetQuery(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings SetVerbose(this AzureAmsJobListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobListSettings ResetVerbose(this AzureAmsJobListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsJobShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsJobShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetAccountName(this AzureAmsJobShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetAccountName(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetIds(this AzureAmsJobShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetIds(this AzureAmsJobShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings AddIds(this AzureAmsJobShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings AddIds(this AzureAmsJobShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ClearIds(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings RemoveIds(this AzureAmsJobShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings RemoveIds(this AzureAmsJobShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetName(this AzureAmsJobShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetName(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetResourceGroup(this AzureAmsJobShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetResourceGroup(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetSubscription(this AzureAmsJobShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetSubscription(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region TransformName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetTransformName(this AzureAmsJobShowSettings toolSettings, string transformName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = transformName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetTransformName(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetDebug(this AzureAmsJobShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetDebug(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetHelp(this AzureAmsJobShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetHelp(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetOutput(this AzureAmsJobShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetOutput(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetQuery(this AzureAmsJobShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetQuery(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings SetVerbose(this AzureAmsJobShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobShowSettings ResetVerbose(this AzureAmsJobShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsJobStartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsJobStartSettingsExtensions
    {
        #region OutputAssets
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.OutputAssets"/> to a new list</em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetOutputAssets(this AzureAmsJobStartSettings toolSettings, params string[] outputAssets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputAssetsInternal = outputAssets.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.OutputAssets"/> to a new list</em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetOutputAssets(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> outputAssets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputAssetsInternal = outputAssets.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.OutputAssets"/></em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddOutputAssets(this AzureAmsJobStartSettings toolSettings, params string[] outputAssets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputAssetsInternal.AddRange(outputAssets);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.OutputAssets"/></em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddOutputAssets(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> outputAssets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputAssetsInternal.AddRange(outputAssets);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobStartSettings.OutputAssets"/></em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ClearOutputAssets(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputAssetsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.OutputAssets"/></em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveOutputAssets(this AzureAmsJobStartSettings toolSettings, params string[] outputAssets)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(outputAssets);
            toolSettings.OutputAssetsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.OutputAssets"/></em></p>
        ///   <p>Space-separated assets in 'assetName=label' format. An asset without label can be sent like this: 'assetName='.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveOutputAssets(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> outputAssets)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(outputAssets);
            toolSettings.OutputAssetsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CorrelationData
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.CorrelationData"/> to a new list</em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetCorrelationData(this AzureAmsJobStartSettings toolSettings, params string[] correlationData)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CorrelationDataInternal = correlationData.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.CorrelationData"/> to a new list</em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetCorrelationData(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> correlationData)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CorrelationDataInternal = correlationData.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.CorrelationData"/></em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddCorrelationData(this AzureAmsJobStartSettings toolSettings, params string[] correlationData)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CorrelationDataInternal.AddRange(correlationData);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.CorrelationData"/></em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddCorrelationData(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> correlationData)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CorrelationDataInternal.AddRange(correlationData);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobStartSettings.CorrelationData"/></em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ClearCorrelationData(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CorrelationDataInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.CorrelationData"/></em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveCorrelationData(this AzureAmsJobStartSettings toolSettings, params string[] correlationData)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(correlationData);
            toolSettings.CorrelationDataInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.CorrelationData"/></em></p>
        ///   <p>Space-separated correlation data in 'key[=value]' format. This customer provided data will be returned in Job and JobOutput state events.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveCorrelationData(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> correlationData)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(correlationData);
            toolSettings.CorrelationDataInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Description"/></em></p>
        ///   <p>The job description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetDescription(this AzureAmsJobStartSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Description"/></em></p>
        ///   <p>The job description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetDescription(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Files
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Files"/> to a new list</em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetFiles(this AzureAmsJobStartSettings toolSettings, params string[] files)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilesInternal = files.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Files"/> to a new list</em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetFiles(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> files)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilesInternal = files.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.Files"/></em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddFiles(this AzureAmsJobStartSettings toolSettings, params string[] files)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilesInternal.AddRange(files);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.Files"/></em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddFiles(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> files)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilesInternal.AddRange(files);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobStartSettings.Files"/></em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ClearFiles(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FilesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.Files"/></em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveFiles(this AzureAmsJobStartSettings toolSettings, params string[] files)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(files);
            toolSettings.FilesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.Files"/></em></p>
        ///   <p>Space-separated list of files. It can be used to tell the service to only use the files specified from the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveFiles(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> files)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(files);
            toolSettings.FilesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Label"/></em></p>
        ///   <p>A label that is assigned to a Job Input that is used to satisfy a reference used in the Transform. For example, a Transform can be authored to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetLabel(this AzureAmsJobStartSettings toolSettings, string label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Label = label;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Label"/></em></p>
        ///   <p>A label that is assigned to a Job Input that is used to satisfy a reference used in the Transform. For example, a Transform can be authored to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetLabel(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Label = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Priority"/></em></p>
        ///   <p>The priority with which the job should be processed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetPriority(this AzureAmsJobStartSettings toolSettings, AmsJobPriority priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Priority"/></em></p>
        ///   <p>The priority with which the job should be processed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetPriority(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetAccountName(this AzureAmsJobStartSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetAccountName(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetIds(this AzureAmsJobStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetIds(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddIds(this AzureAmsJobStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings AddIds(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ClearIds(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveIds(this AzureAmsJobStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings RemoveIds(this AzureAmsJobStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetName(this AzureAmsJobStartSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetName(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetResourceGroup(this AzureAmsJobStartSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetResourceGroup(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetSubscription(this AzureAmsJobStartSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetSubscription(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region TransformName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetTransformName(this AzureAmsJobStartSettings toolSettings, string transformName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = transformName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetTransformName(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = null;
            return toolSettings;
        }
        #endregion
        #region InputAssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.InputAssetName"/></em></p>
        ///   <p>The name of the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetInputAssetName(this AzureAmsJobStartSettings toolSettings, string inputAssetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InputAssetName = inputAssetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.InputAssetName"/></em></p>
        ///   <p>The name of the input asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetInputAssetName(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InputAssetName = null;
            return toolSettings;
        }
        #endregion
        #region BaseUri
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.BaseUri"/></em></p>
        ///   <p>Base uri for http job input. It will be concatenated with provided file names. If no base uri is given, then the provided file list is assumed to be fully qualified uris.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetBaseUri(this AzureAmsJobStartSettings toolSettings, string baseUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseUri = baseUri;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.BaseUri"/></em></p>
        ///   <p>Base uri for http job input. It will be concatenated with provided file names. If no base uri is given, then the provided file list is assumed to be fully qualified uris.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetBaseUri(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseUri = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetDebug(this AzureAmsJobStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetDebug(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetHelp(this AzureAmsJobStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetHelp(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetOutput(this AzureAmsJobStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetOutput(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetQuery(this AzureAmsJobStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetQuery(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings SetVerbose(this AzureAmsJobStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobStartSettings ResetVerbose(this AzureAmsJobStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsJobUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsJobUpdateSettingsExtensions
    {
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Description"/></em></p>
        ///   <p>The job description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetDescription(this AzureAmsJobUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Description"/></em></p>
        ///   <p>The job description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetDescription(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Priority
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Priority"/></em></p>
        ///   <p>The priority with which the job should be processed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetPriority(this AzureAmsJobUpdateSettings toolSettings, AmsJobPriority priority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = priority;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Priority"/></em></p>
        ///   <p>The priority with which the job should be processed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetPriority(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Priority = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetAccountName(this AzureAmsJobUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetAccountName(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetIds(this AzureAmsJobUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetIds(this AzureAmsJobUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings AddIds(this AzureAmsJobUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsJobUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings AddIds(this AzureAmsJobUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsJobUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ClearIds(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings RemoveIds(this AzureAmsJobUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsJobUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings RemoveIds(this AzureAmsJobUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetName(this AzureAmsJobUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Name"/></em></p>
        ///   <p>The name of the job.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetName(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetResourceGroup(this AzureAmsJobUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetResourceGroup(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetSubscription(this AzureAmsJobUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetSubscription(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region TransformName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetTransformName(this AzureAmsJobUpdateSettings toolSettings, string transformName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = transformName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.TransformName"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetTransformName(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TransformName = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetAdd(this AzureAmsJobUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetAdd(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetForceString(this AzureAmsJobUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetForceString(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetRemove(this AzureAmsJobUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetRemove(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetSet(this AzureAmsJobUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetSet(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetDebug(this AzureAmsJobUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetDebug(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetHelp(this AzureAmsJobUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetHelp(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetOutput(this AzureAmsJobUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetOutput(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetQuery(this AzureAmsJobUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetQuery(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsJobUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings SetVerbose(this AzureAmsJobUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsJobUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsJobUpdateSettings ResetVerbose(this AzureAmsJobUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetAccountName(this AzureAmsLiveEventCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetAccountName(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetName(this AzureAmsLiveEventCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetName(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetResourceGroup(this AzureAmsLiveEventCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetResourceGroup(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AutoStart
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.AutoStart"/></em></p>
        ///   <p>The flag indicates if the resource should be automatically started on creation.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetAutoStart(this AzureAmsLiveEventCreateSettings toolSettings, string autoStart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoStart = autoStart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.AutoStart"/></em></p>
        ///   <p>The flag indicates if the resource should be automatically started on creation.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetAutoStart(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoStart = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Description"/></em></p>
        ///   <p>The live event description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetDescription(this AzureAmsLiveEventCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Description"/></em></p>
        ///   <p>The live event description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetDescription(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetNoWait(this AzureAmsLiveEventCreateSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetNoWait(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings EnableNoWait(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings DisableNoWait(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsLiveEventCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ToggleNoWait(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region StreamOptions
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.StreamOptions"/></em></p>
        ///   <p>The options to use for the LiveEvent. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetStreamOptions(this AzureAmsLiveEventCreateSettings toolSettings, AmsLiveEventCreateStreamOptions streamOptions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamOptions = streamOptions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.StreamOptions"/></em></p>
        ///   <p>The options to use for the LiveEvent. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetStreamOptions(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamOptions = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetTags(this AzureAmsLiveEventCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetTags(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region VanityUrl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></em></p>
        ///   <p>Specifies whether to use a vanity url with the Live Event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetVanityUrl(this AzureAmsLiveEventCreateSettings toolSettings, bool? vanityUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VanityUrl = vanityUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></em></p>
        ///   <p>Specifies whether to use a vanity url with the Live Event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetVanityUrl(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VanityUrl = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></em></p>
        ///   <p>Specifies whether to use a vanity url with the Live Event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings EnableVanityUrl(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VanityUrl = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></em></p>
        ///   <p>Specifies whether to use a vanity url with the Live Event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings DisableVanityUrl(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VanityUrl = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsLiveEventCreateSettings.VanityUrl"/></em></p>
        ///   <p>Specifies whether to use a vanity url with the Live Event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ToggleVanityUrl(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VanityUrl = !toolSettings.VanityUrl;
            return toolSettings;
        }
        #endregion
        #region ClientAccessPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>Filepath to the clientaccesspolicy.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetClientAccessPolicy(this AzureAmsLiveEventCreateSettings toolSettings, string clientAccessPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = clientAccessPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>Filepath to the clientaccesspolicy.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetClientAccessPolicy(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = null;
            return toolSettings;
        }
        #endregion
        #region CrossDomainPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>Filepath to the crossdomain.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetCrossDomainPolicy(this AzureAmsLiveEventCreateSettings toolSettings, string crossDomainPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = crossDomainPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>Filepath to the crossdomain.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetCrossDomainPolicy(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = null;
            return toolSettings;
        }
        #endregion
        #region EncodingType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.EncodingType"/></em></p>
        ///   <p>The encoding type for live event. This value is specified at creation time and cannot be updated. Allowed values: Basic, None, Standard.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetEncodingType(this AzureAmsLiveEventCreateSettings toolSettings, string encodingType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncodingType = encodingType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.EncodingType"/></em></p>
        ///   <p>The encoding type for live event. This value is specified at creation time and cannot be updated. Allowed values: Basic, None, Standard.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetEncodingType(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EncodingType = null;
            return toolSettings;
        }
        #endregion
        #region PresetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.PresetName"/></em></p>
        ///   <p>The encoding preset name. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetPresetName(this AzureAmsLiveEventCreateSettings toolSettings, string presetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresetName = presetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.PresetName"/></em></p>
        ///   <p>The encoding preset name. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetPresetName(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PresetName = null;
            return toolSettings;
        }
        #endregion
        #region Ips
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetIps(this AzureAmsLiveEventCreateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetIps(this AzureAmsLiveEventCreateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings AddIps(this AzureAmsLiveEventCreateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings AddIps(this AzureAmsLiveEventCreateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ClearIps(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings RemoveIps(this AzureAmsLiveEventCreateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings RemoveIps(this AzureAmsLiveEventCreateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region StreamingProtocol
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.StreamingProtocol"/></em></p>
        ///   <p>The streaming protocol for the live event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetStreamingProtocol(this AzureAmsLiveEventCreateSettings toolSettings, AmsLiveEventCreateStreamingProtocol streamingProtocol)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingProtocol = streamingProtocol;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.StreamingProtocol"/></em></p>
        ///   <p>The streaming protocol for the live event. This value is specified at creation time and cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetStreamingProtocol(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingProtocol = null;
            return toolSettings;
        }
        #endregion
        #region AccessToken
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.AccessToken"/></em></p>
        ///   <p>A unique identifier for a stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetAccessToken(this AzureAmsLiveEventCreateSettings toolSettings, string accessToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccessToken = accessToken;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.AccessToken"/></em></p>
        ///   <p>A unique identifier for a stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetAccessToken(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccessToken = null;
            return toolSettings;
        }
        #endregion
        #region KeyFrameIntervalDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.KeyFrameIntervalDuration"/></em></p>
        ///   <p>ISO 8601 timespan duration of the key frame interval duration in seconds. The value should be an interger in the range of 1 (PT1S or 00:00:01) to 30 (PT30S or 00:00:30) seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetKeyFrameIntervalDuration(this AzureAmsLiveEventCreateSettings toolSettings, string keyFrameIntervalDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyFrameIntervalDuration = keyFrameIntervalDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.KeyFrameIntervalDuration"/></em></p>
        ///   <p>ISO 8601 timespan duration of the key frame interval duration in seconds. The value should be an interger in the range of 1 (PT1S or 00:00:01) to 30 (PT30S or 00:00:30) seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetKeyFrameIntervalDuration(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyFrameIntervalDuration = null;
            return toolSettings;
        }
        #endregion
        #region AlternativeMediaId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.AlternativeMediaId"/></em></p>
        ///   <p>An Alternative Media Identifier associated with the StreamingLocator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetAlternativeMediaId(this AzureAmsLiveEventCreateSettings toolSettings, string alternativeMediaId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternativeMediaId = alternativeMediaId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.AlternativeMediaId"/></em></p>
        ///   <p>An Alternative Media Identifier associated with the StreamingLocator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetAlternativeMediaId(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternativeMediaId = null;
            return toolSettings;
        }
        #endregion
        #region PreviewIps
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetPreviewIps(this AzureAmsLiveEventCreateSettings toolSettings, params string[] previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal = previewIps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetPreviewIps(this AzureAmsLiveEventCreateSettings toolSettings, IEnumerable<string> previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal = previewIps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings AddPreviewIps(this AzureAmsLiveEventCreateSettings toolSettings, params string[] previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal.AddRange(previewIps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings AddPreviewIps(this AzureAmsLiveEventCreateSettings toolSettings, IEnumerable<string> previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal.AddRange(previewIps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ClearPreviewIps(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings RemovePreviewIps(this AzureAmsLiveEventCreateSettings toolSettings, params string[] previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(previewIps);
            toolSettings.PreviewIpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventCreateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings RemovePreviewIps(this AzureAmsLiveEventCreateSettings toolSettings, IEnumerable<string> previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(previewIps);
            toolSettings.PreviewIpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region PreviewLocator
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.PreviewLocator"/></em></p>
        ///   <p>The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetPreviewLocator(this AzureAmsLiveEventCreateSettings toolSettings, string previewLocator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewLocator = previewLocator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.PreviewLocator"/></em></p>
        ///   <p>The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetPreviewLocator(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewLocator = null;
            return toolSettings;
        }
        #endregion
        #region StreamingPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.StreamingPolicyName"/></em></p>
        ///   <p>The name of streaming policy used for the live event preview. This can be specified at creation time but cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetStreamingPolicyName(this AzureAmsLiveEventCreateSettings toolSettings, string streamingPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingPolicyName = streamingPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.StreamingPolicyName"/></em></p>
        ///   <p>The name of streaming policy used for the live event preview. This can be specified at creation time but cannot be updated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetStreamingPolicyName(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetSubscription(this AzureAmsLiveEventCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetSubscription(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetDebug(this AzureAmsLiveEventCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetDebug(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetHelp(this AzureAmsLiveEventCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetHelp(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetOutput(this AzureAmsLiveEventCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetOutput(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetQuery(this AzureAmsLiveEventCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetQuery(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings SetVerbose(this AzureAmsLiveEventCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventCreateSettings ResetVerbose(this AzureAmsLiveEventCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetAccountName(this AzureAmsLiveEventDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetAccountName(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetIds(this AzureAmsLiveEventDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetIds(this AzureAmsLiveEventDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings AddIds(this AzureAmsLiveEventDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings AddIds(this AzureAmsLiveEventDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ClearIds(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings RemoveIds(this AzureAmsLiveEventDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings RemoveIds(this AzureAmsLiveEventDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetName(this AzureAmsLiveEventDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetName(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetResourceGroup(this AzureAmsLiveEventDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetResourceGroup(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetSubscription(this AzureAmsLiveEventDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetSubscription(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetDebug(this AzureAmsLiveEventDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetDebug(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetHelp(this AzureAmsLiveEventDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetHelp(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetOutput(this AzureAmsLiveEventDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetOutput(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetQuery(this AzureAmsLiveEventDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetQuery(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings SetVerbose(this AzureAmsLiveEventDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventDeleteSettings ResetVerbose(this AzureAmsLiveEventDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetAccountName(this AzureAmsLiveEventListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetAccountName(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetResourceGroup(this AzureAmsLiveEventListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetResourceGroup(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetSubscription(this AzureAmsLiveEventListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetSubscription(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetDebug(this AzureAmsLiveEventListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetDebug(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetHelp(this AzureAmsLiveEventListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetHelp(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetOutput(this AzureAmsLiveEventListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetOutput(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetQuery(this AzureAmsLiveEventListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetQuery(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings SetVerbose(this AzureAmsLiveEventListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventListSettings ResetVerbose(this AzureAmsLiveEventListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventResetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventResetSettingsExtensions
    {
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetNoWait(this AzureAmsLiveEventResetSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetNoWait(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsLiveEventResetSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings EnableNoWait(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsLiveEventResetSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings DisableNoWait(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsLiveEventResetSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ToggleNoWait(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetAccountName(this AzureAmsLiveEventResetSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetAccountName(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetIds(this AzureAmsLiveEventResetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetIds(this AzureAmsLiveEventResetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventResetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings AddIds(this AzureAmsLiveEventResetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventResetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings AddIds(this AzureAmsLiveEventResetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventResetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ClearIds(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventResetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings RemoveIds(this AzureAmsLiveEventResetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventResetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings RemoveIds(this AzureAmsLiveEventResetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetName(this AzureAmsLiveEventResetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetName(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetResourceGroup(this AzureAmsLiveEventResetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetResourceGroup(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetSubscription(this AzureAmsLiveEventResetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetSubscription(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetDebug(this AzureAmsLiveEventResetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetDebug(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetHelp(this AzureAmsLiveEventResetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetHelp(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetOutput(this AzureAmsLiveEventResetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetOutput(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetQuery(this AzureAmsLiveEventResetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetQuery(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventResetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings SetVerbose(this AzureAmsLiveEventResetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventResetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventResetSettings ResetVerbose(this AzureAmsLiveEventResetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetAccountName(this AzureAmsLiveEventShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetAccountName(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetIds(this AzureAmsLiveEventShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetIds(this AzureAmsLiveEventShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings AddIds(this AzureAmsLiveEventShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings AddIds(this AzureAmsLiveEventShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ClearIds(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings RemoveIds(this AzureAmsLiveEventShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings RemoveIds(this AzureAmsLiveEventShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetName(this AzureAmsLiveEventShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetName(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetResourceGroup(this AzureAmsLiveEventShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetResourceGroup(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetSubscription(this AzureAmsLiveEventShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetSubscription(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetDebug(this AzureAmsLiveEventShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetDebug(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetHelp(this AzureAmsLiveEventShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetHelp(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetOutput(this AzureAmsLiveEventShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetOutput(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetQuery(this AzureAmsLiveEventShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetQuery(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings SetVerbose(this AzureAmsLiveEventShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventShowSettings ResetVerbose(this AzureAmsLiveEventShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventStartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventStartSettingsExtensions
    {
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetNoWait(this AzureAmsLiveEventStartSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetNoWait(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsLiveEventStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings EnableNoWait(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsLiveEventStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings DisableNoWait(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsLiveEventStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ToggleNoWait(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetAccountName(this AzureAmsLiveEventStartSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetAccountName(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetIds(this AzureAmsLiveEventStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetIds(this AzureAmsLiveEventStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings AddIds(this AzureAmsLiveEventStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings AddIds(this AzureAmsLiveEventStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ClearIds(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings RemoveIds(this AzureAmsLiveEventStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings RemoveIds(this AzureAmsLiveEventStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetName(this AzureAmsLiveEventStartSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetName(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetResourceGroup(this AzureAmsLiveEventStartSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetResourceGroup(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetSubscription(this AzureAmsLiveEventStartSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetSubscription(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetDebug(this AzureAmsLiveEventStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetDebug(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetHelp(this AzureAmsLiveEventStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetHelp(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetOutput(this AzureAmsLiveEventStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetOutput(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetQuery(this AzureAmsLiveEventStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetQuery(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings SetVerbose(this AzureAmsLiveEventStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStartSettings ResetVerbose(this AzureAmsLiveEventStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventStopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventStopSettingsExtensions
    {
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetNoWait(this AzureAmsLiveEventStopSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetNoWait(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsLiveEventStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings EnableNoWait(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsLiveEventStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings DisableNoWait(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsLiveEventStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ToggleNoWait(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region RemoveOutputsOnStop
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.RemoveOutputsOnStop"/></em></p>
        ///   <p>Remove live outputs on stop.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetRemoveOutputsOnStop(this AzureAmsLiveEventStopSettings toolSettings, string removeOutputsOnStop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoveOutputsOnStop = removeOutputsOnStop;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.RemoveOutputsOnStop"/></em></p>
        ///   <p>Remove live outputs on stop.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetRemoveOutputsOnStop(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RemoveOutputsOnStop = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetAccountName(this AzureAmsLiveEventStopSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetAccountName(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetIds(this AzureAmsLiveEventStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetIds(this AzureAmsLiveEventStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings AddIds(this AzureAmsLiveEventStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings AddIds(this AzureAmsLiveEventStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ClearIds(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings RemoveIds(this AzureAmsLiveEventStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings RemoveIds(this AzureAmsLiveEventStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetName(this AzureAmsLiveEventStopSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetName(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetResourceGroup(this AzureAmsLiveEventStopSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetResourceGroup(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetSubscription(this AzureAmsLiveEventStopSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetSubscription(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetDebug(this AzureAmsLiveEventStopSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetDebug(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetHelp(this AzureAmsLiveEventStopSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetHelp(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetOutput(this AzureAmsLiveEventStopSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetOutput(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetQuery(this AzureAmsLiveEventStopSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetQuery(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventStopSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings SetVerbose(this AzureAmsLiveEventStopSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventStopSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventStopSettings ResetVerbose(this AzureAmsLiveEventStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventUpdateSettingsExtensions
    {
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Description"/></em></p>
        ///   <p>The live event description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetDescription(this AzureAmsLiveEventUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Description"/></em></p>
        ///   <p>The live event description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetDescription(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetTags(this AzureAmsLiveEventUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetTags(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetAccountName(this AzureAmsLiveEventUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetAccountName(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetIds(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetIds(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings AddIds(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings AddIds(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ClearIds(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings RemoveIds(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings RemoveIds(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetName(this AzureAmsLiveEventUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetName(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetResourceGroup(this AzureAmsLiveEventUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetResourceGroup(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetSubscription(this AzureAmsLiveEventUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetSubscription(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region ClientAccessPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>Filepath to the clientaccesspolicy.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetClientAccessPolicy(this AzureAmsLiveEventUpdateSettings toolSettings, string clientAccessPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = clientAccessPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>Filepath to the clientaccesspolicy.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetClientAccessPolicy(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = null;
            return toolSettings;
        }
        #endregion
        #region CrossDomainPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>Filepath to the crossdomain.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetCrossDomainPolicy(this AzureAmsLiveEventUpdateSettings toolSettings, string crossDomainPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = crossDomainPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>Filepath to the crossdomain.xml used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetCrossDomainPolicy(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = null;
            return toolSettings;
        }
        #endregion
        #region Ips
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetIps(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetIps(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings AddIps(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings AddIps(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ClearIps(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings RemoveIps(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings RemoveIps(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region KeyFrameIntervalDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.KeyFrameIntervalDuration"/></em></p>
        ///   <p>ISO 8601 timespan duration of the key frame interval duration in seconds. The value should be an interger in the range of 1 (PT1S or 00:00:01) to 30 (PT30S or 00:00:30) seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetKeyFrameIntervalDuration(this AzureAmsLiveEventUpdateSettings toolSettings, string keyFrameIntervalDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyFrameIntervalDuration = keyFrameIntervalDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.KeyFrameIntervalDuration"/></em></p>
        ///   <p>ISO 8601 timespan duration of the key frame interval duration in seconds. The value should be an interger in the range of 1 (PT1S or 00:00:01) to 30 (PT30S or 00:00:30) seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetKeyFrameIntervalDuration(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyFrameIntervalDuration = null;
            return toolSettings;
        }
        #endregion
        #region PreviewIps
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetPreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal = previewIps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetPreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal = previewIps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings AddPreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal.AddRange(previewIps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings AddPreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal.AddRange(previewIps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ClearPreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreviewIpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings RemovePreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings, params string[] previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(previewIps);
            toolSettings.PreviewIpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventUpdateSettings.PreviewIps"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. Use "AllowAll" to allow all IP addresses. Allowing all IPs is not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings RemovePreviewIps(this AzureAmsLiveEventUpdateSettings toolSettings, IEnumerable<string> previewIps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(previewIps);
            toolSettings.PreviewIpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetAdd(this AzureAmsLiveEventUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetAdd(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetForceString(this AzureAmsLiveEventUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetForceString(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetRemove(this AzureAmsLiveEventUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetRemove(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetSet(this AzureAmsLiveEventUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetSet(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetDebug(this AzureAmsLiveEventUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetDebug(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetHelp(this AzureAmsLiveEventUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetHelp(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetOutput(this AzureAmsLiveEventUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetOutput(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetQuery(this AzureAmsLiveEventUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetQuery(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings SetVerbose(this AzureAmsLiveEventUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventUpdateSettings ResetVerbose(this AzureAmsLiveEventUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveEventWaitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveEventWaitSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetAccountName(this AzureAmsLiveEventWaitSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetAccountName(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetIds(this AzureAmsLiveEventWaitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetIds(this AzureAmsLiveEventWaitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings AddIds(this AzureAmsLiveEventWaitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveEventWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings AddIds(this AzureAmsLiveEventWaitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveEventWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ClearIds(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings RemoveIds(this AzureAmsLiveEventWaitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveEventWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings RemoveIds(this AzureAmsLiveEventWaitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetName(this AzureAmsLiveEventWaitSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Name"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetName(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetResourceGroup(this AzureAmsLiveEventWaitSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetResourceGroup(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetSubscription(this AzureAmsLiveEventWaitSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetSubscription(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Created
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Created"/></em></p>
        ///   <p>Wait until created with 'provisioningState' at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetCreated(this AzureAmsLiveEventWaitSettings toolSettings, string created)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Created = created;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Created"/></em></p>
        ///   <p>Wait until created with 'provisioningState' at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetCreated(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Created = null;
            return toolSettings;
        }
        #endregion
        #region Custom
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Custom"/></em></p>
        ///   <p>Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetCustom(this AzureAmsLiveEventWaitSettings toolSettings, string custom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Custom = custom;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Custom"/></em></p>
        ///   <p>Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetCustom(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Custom = null;
            return toolSettings;
        }
        #endregion
        #region Deleted
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Deleted"/></em></p>
        ///   <p>Wait until deleted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetDeleted(this AzureAmsLiveEventWaitSettings toolSettings, string deleted)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Deleted = deleted;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Deleted"/></em></p>
        ///   <p>Wait until deleted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetDeleted(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Deleted = null;
            return toolSettings;
        }
        #endregion
        #region Exists
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Exists"/></em></p>
        ///   <p>Wait until the resource exists.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetExists(this AzureAmsLiveEventWaitSettings toolSettings, string exists)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exists = exists;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Exists"/></em></p>
        ///   <p>Wait until the resource exists.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetExists(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exists = null;
            return toolSettings;
        }
        #endregion
        #region Interval
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Interval"/></em></p>
        ///   <p>Polling interval in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetInterval(this AzureAmsLiveEventWaitSettings toolSettings, string interval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interval = interval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Interval"/></em></p>
        ///   <p>Polling interval in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetInterval(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interval = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Timeout"/></em></p>
        ///   <p>Maximum wait in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetTimeout(this AzureAmsLiveEventWaitSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Timeout"/></em></p>
        ///   <p>Maximum wait in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetTimeout(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Updated
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Updated"/></em></p>
        ///   <p>Wait until updated with provisioningState at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetUpdated(this AzureAmsLiveEventWaitSettings toolSettings, string updated)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Updated = updated;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Updated"/></em></p>
        ///   <p>Wait until updated with provisioningState at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetUpdated(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Updated = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetDebug(this AzureAmsLiveEventWaitSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetDebug(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetHelp(this AzureAmsLiveEventWaitSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetHelp(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetOutput(this AzureAmsLiveEventWaitSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetOutput(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetQuery(this AzureAmsLiveEventWaitSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetQuery(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveEventWaitSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings SetVerbose(this AzureAmsLiveEventWaitSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveEventWaitSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveEventWaitSettings ResetVerbose(this AzureAmsLiveEventWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveOutputCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveOutputCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetAccountName(this AzureAmsLiveOutputCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetAccountName(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ArchiveWindowLength
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.ArchiveWindowLength"/></em></p>
        ///   <p>ISO 8601 timespan duration of the archive window length. This is the duration that customer want to retain the recorded content. Minimum window is 5 minutes (PT5M or 00:05:00). Maximum window is 25 hours (PT25H or 25:00:00). For example, to retain the output for 10 minutes, use PT10M or 00:10:00.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetArchiveWindowLength(this AzureAmsLiveOutputCreateSettings toolSettings, string archiveWindowLength)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArchiveWindowLength = archiveWindowLength;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.ArchiveWindowLength"/></em></p>
        ///   <p>ISO 8601 timespan duration of the archive window length. This is the duration that customer want to retain the recorded content. Minimum window is 5 minutes (PT5M or 00:05:00). Maximum window is 25 hours (PT25H or 25:00:00). For example, to retain the output for 10 minutes, use PT10M or 00:10:00.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetArchiveWindowLength(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArchiveWindowLength = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetAssetName(this AzureAmsLiveOutputCreateSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetAssetName(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region LiveEventName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetLiveEventName(this AzureAmsLiveOutputCreateSettings toolSettings, string liveEventName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = liveEventName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetLiveEventName(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Name"/></em></p>
        ///   <p>The name of the live output.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetName(this AzureAmsLiveOutputCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Name"/></em></p>
        ///   <p>The name of the live output.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetName(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetResourceGroup(this AzureAmsLiveOutputCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetResourceGroup(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Description"/></em></p>
        ///   <p>The live output description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetDescription(this AzureAmsLiveOutputCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Description"/></em></p>
        ///   <p>The live output description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetDescription(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region FragmentsPerTsSegment
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.FragmentsPerTsSegment"/></em></p>
        ///   <p>The number of fragments per HLS segment.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetFragmentsPerTsSegment(this AzureAmsLiveOutputCreateSettings toolSettings, string fragmentsPerTsSegment)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FragmentsPerTsSegment = fragmentsPerTsSegment;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.FragmentsPerTsSegment"/></em></p>
        ///   <p>The number of fragments per HLS segment.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetFragmentsPerTsSegment(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FragmentsPerTsSegment = null;
            return toolSettings;
        }
        #endregion
        #region ManifestName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.ManifestName"/></em></p>
        ///   <p>The manifest file name. If not provided, the service will generate one automatically.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetManifestName(this AzureAmsLiveOutputCreateSettings toolSettings, string manifestName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestName = manifestName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.ManifestName"/></em></p>
        ///   <p>The manifest file name. If not provided, the service will generate one automatically.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetManifestName(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestName = null;
            return toolSettings;
        }
        #endregion
        #region OutputSnapTime
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.OutputSnapTime"/></em></p>
        ///   <p>The output snapshot time.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetOutputSnapTime(this AzureAmsLiveOutputCreateSettings toolSettings, string outputSnapTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputSnapTime = outputSnapTime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.OutputSnapTime"/></em></p>
        ///   <p>The output snapshot time.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetOutputSnapTime(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputSnapTime = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetSubscription(this AzureAmsLiveOutputCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetSubscription(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetDebug(this AzureAmsLiveOutputCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetDebug(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetHelp(this AzureAmsLiveOutputCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetHelp(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetOutput(this AzureAmsLiveOutputCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetOutput(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetQuery(this AzureAmsLiveOutputCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetQuery(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings SetVerbose(this AzureAmsLiveOutputCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputCreateSettings ResetVerbose(this AzureAmsLiveOutputCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveOutputDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveOutputDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetAccountName(this AzureAmsLiveOutputDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetAccountName(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetIds(this AzureAmsLiveOutputDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetIds(this AzureAmsLiveOutputDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings AddIds(this AzureAmsLiveOutputDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings AddIds(this AzureAmsLiveOutputDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ClearIds(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings RemoveIds(this AzureAmsLiveOutputDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveOutputDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings RemoveIds(this AzureAmsLiveOutputDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LiveEventName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetLiveEventName(this AzureAmsLiveOutputDeleteSettings toolSettings, string liveEventName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = liveEventName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetLiveEventName(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Name"/></em></p>
        ///   <p>The name of the live output.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetName(this AzureAmsLiveOutputDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Name"/></em></p>
        ///   <p>The name of the live output.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetName(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetResourceGroup(this AzureAmsLiveOutputDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetResourceGroup(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetSubscription(this AzureAmsLiveOutputDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetSubscription(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetDebug(this AzureAmsLiveOutputDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetDebug(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetHelp(this AzureAmsLiveOutputDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetHelp(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetOutput(this AzureAmsLiveOutputDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetOutput(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetQuery(this AzureAmsLiveOutputDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetQuery(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings SetVerbose(this AzureAmsLiveOutputDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputDeleteSettings ResetVerbose(this AzureAmsLiveOutputDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveOutputListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveOutputListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetAccountName(this AzureAmsLiveOutputListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetAccountName(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region LiveEventName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetLiveEventName(this AzureAmsLiveOutputListSettings toolSettings, string liveEventName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = liveEventName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetLiveEventName(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetResourceGroup(this AzureAmsLiveOutputListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetResourceGroup(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetSubscription(this AzureAmsLiveOutputListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetSubscription(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetDebug(this AzureAmsLiveOutputListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetDebug(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetHelp(this AzureAmsLiveOutputListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetHelp(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetOutput(this AzureAmsLiveOutputListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetOutput(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetQuery(this AzureAmsLiveOutputListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetQuery(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings SetVerbose(this AzureAmsLiveOutputListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputListSettings ResetVerbose(this AzureAmsLiveOutputListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsLiveOutputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsLiveOutputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetAccountName(this AzureAmsLiveOutputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetAccountName(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetIds(this AzureAmsLiveOutputShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetIds(this AzureAmsLiveOutputShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveOutputShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings AddIds(this AzureAmsLiveOutputShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsLiveOutputShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings AddIds(this AzureAmsLiveOutputShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsLiveOutputShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ClearIds(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveOutputShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings RemoveIds(this AzureAmsLiveOutputShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsLiveOutputShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings RemoveIds(this AzureAmsLiveOutputShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LiveEventName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetLiveEventName(this AzureAmsLiveOutputShowSettings toolSettings, string liveEventName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = liveEventName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.LiveEventName"/></em></p>
        ///   <p>The name of the live event.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetLiveEventName(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LiveEventName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Name"/></em></p>
        ///   <p>The name of the live output.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetName(this AzureAmsLiveOutputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Name"/></em></p>
        ///   <p>The name of the live output.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetName(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetResourceGroup(this AzureAmsLiveOutputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetResourceGroup(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetSubscription(this AzureAmsLiveOutputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetSubscription(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetDebug(this AzureAmsLiveOutputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetDebug(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetHelp(this AzureAmsLiveOutputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetHelp(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetOutput(this AzureAmsLiveOutputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetOutput(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetQuery(this AzureAmsLiveOutputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetQuery(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsLiveOutputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings SetVerbose(this AzureAmsLiveOutputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsLiveOutputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsLiveOutputShowSettings ResetVerbose(this AzureAmsLiveOutputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetAccountName(this AzureAmsStreamingEndpointCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetAccountName(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetName(this AzureAmsStreamingEndpointCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetName(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetResourceGroup(this AzureAmsStreamingEndpointCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetResourceGroup(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region ScaleUnits
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.ScaleUnits"/></em></p>
        ///   <p>The number of scale units for Premium StreamingEndpoints. For Standard StreamingEndpoints, set this value to 0. Use the Scale operation to adjust this value for Premium StreamingEndpoints.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetScaleUnits(this AzureAmsStreamingEndpointCreateSettings toolSettings, string scaleUnits)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ScaleUnits = scaleUnits;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.ScaleUnits"/></em></p>
        ///   <p>The number of scale units for Premium StreamingEndpoints. For Standard StreamingEndpoints, set this value to 0. Use the Scale operation to adjust this value for Premium StreamingEndpoints.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetScaleUnits(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ScaleUnits = null;
            return toolSettings;
        }
        #endregion
        #region AutoStart
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.AutoStart"/></em></p>
        ///   <p>The flag indicates if the resource should be automatically started on creation.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetAutoStart(this AzureAmsStreamingEndpointCreateSettings toolSettings, string autoStart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoStart = autoStart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.AutoStart"/></em></p>
        ///   <p>The flag indicates if the resource should be automatically started on creation.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetAutoStart(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AutoStart = null;
            return toolSettings;
        }
        #endregion
        #region AvailabilitySetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.AvailabilitySetName"/></em></p>
        ///   <p>The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming. This value can only be set at creation time.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetAvailabilitySetName(this AzureAmsStreamingEndpointCreateSettings toolSettings, string availabilitySetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AvailabilitySetName = availabilitySetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.AvailabilitySetName"/></em></p>
        ///   <p>The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming. This value can only be set at creation time.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetAvailabilitySetName(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AvailabilitySetName = null;
            return toolSettings;
        }
        #endregion
        #region CustomHostNames
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/> to a new list</em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings, params string[] customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal = customHostNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/> to a new list</em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings, IEnumerable<string> customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal = customHostNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings AddCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings, params string[] customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal.AddRange(customHostNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings AddCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings, IEnumerable<string> customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal.AddRange(customHostNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ClearCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings RemoveCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings, params string[] customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(customHostNames);
            toolSettings.CustomHostNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointCreateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings RemoveCustomHostNames(this AzureAmsStreamingEndpointCreateSettings toolSettings, IEnumerable<string> customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(customHostNames);
            toolSettings.CustomHostNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Description"/></em></p>
        ///   <p>The streaming endpoint description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetDescription(this AzureAmsStreamingEndpointCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Description"/></em></p>
        ///   <p>The streaming endpoint description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetDescription(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region MaxCacheAge
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.MaxCacheAge"/></em></p>
        ///   <p>Max cache age.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetMaxCacheAge(this AzureAmsStreamingEndpointCreateSettings toolSettings, string maxCacheAge)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxCacheAge = maxCacheAge;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.MaxCacheAge"/></em></p>
        ///   <p>Max cache age.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetMaxCacheAge(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxCacheAge = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetNoWait(this AzureAmsStreamingEndpointCreateSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetNoWait(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings EnableNoWait(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings DisableNoWait(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingEndpointCreateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ToggleNoWait(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetTags(this AzureAmsStreamingEndpointCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetTags(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Ips
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetIps(this AzureAmsStreamingEndpointCreateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetIps(this AzureAmsStreamingEndpointCreateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings AddIps(this AzureAmsStreamingEndpointCreateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings AddIps(this AzureAmsStreamingEndpointCreateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ClearIps(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings RemoveIps(this AzureAmsStreamingEndpointCreateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointCreateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings RemoveIps(this AzureAmsStreamingEndpointCreateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CdnProfile
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProfile"/></em></p>
        ///   <p>The CDN profile name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetCdnProfile(this AzureAmsStreamingEndpointCreateSettings toolSettings, string cdnProfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProfile = cdnProfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProfile"/></em></p>
        ///   <p>The CDN profile name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetCdnProfile(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProfile = null;
            return toolSettings;
        }
        #endregion
        #region CdnProvider
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProvider"/></em></p>
        ///   <p>The CDN provider name. Allowed values: StandardVerizon, PremiumVerizon, StandardAkamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetCdnProvider(this AzureAmsStreamingEndpointCreateSettings toolSettings, string cdnProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProvider = cdnProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.CdnProvider"/></em></p>
        ///   <p>The CDN provider name. Allowed values: StandardVerizon, PremiumVerizon, StandardAkamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetCdnProvider(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProvider = null;
            return toolSettings;
        }
        #endregion
        #region ClientAccessPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>The XML representing the clientaccesspolicy data used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetClientAccessPolicy(this AzureAmsStreamingEndpointCreateSettings toolSettings, string clientAccessPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = clientAccessPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>The XML representing the clientaccesspolicy data used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetClientAccessPolicy(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = null;
            return toolSettings;
        }
        #endregion
        #region CrossDomainPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>The XML representing the crossdomain data used by Silverlight. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetCrossDomainPolicy(this AzureAmsStreamingEndpointCreateSettings toolSettings, string crossDomainPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = crossDomainPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>The XML representing the crossdomain data used by Silverlight. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetCrossDomainPolicy(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetSubscription(this AzureAmsStreamingEndpointCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetSubscription(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetDebug(this AzureAmsStreamingEndpointCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetDebug(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetHelp(this AzureAmsStreamingEndpointCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetHelp(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetOutput(this AzureAmsStreamingEndpointCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetOutput(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetQuery(this AzureAmsStreamingEndpointCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetQuery(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings SetVerbose(this AzureAmsStreamingEndpointCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointCreateSettings ResetVerbose(this AzureAmsStreamingEndpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetAccountName(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetAccountName(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings AddIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings AddIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ClearIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings RemoveIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings RemoveIds(this AzureAmsStreamingEndpointDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetName(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetName(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetResourceGroup(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetResourceGroup(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetSubscription(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetSubscription(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetDebug(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetDebug(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetHelp(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetHelp(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetOutput(this AzureAmsStreamingEndpointDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetOutput(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetQuery(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetQuery(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings SetVerbose(this AzureAmsStreamingEndpointDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointDeleteSettings ResetVerbose(this AzureAmsStreamingEndpointDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetAccountName(this AzureAmsStreamingEndpointListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetAccountName(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetResourceGroup(this AzureAmsStreamingEndpointListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetResourceGroup(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetSubscription(this AzureAmsStreamingEndpointListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetSubscription(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetDebug(this AzureAmsStreamingEndpointListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetDebug(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetHelp(this AzureAmsStreamingEndpointListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetHelp(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetOutput(this AzureAmsStreamingEndpointListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetOutput(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetQuery(this AzureAmsStreamingEndpointListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetQuery(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings SetVerbose(this AzureAmsStreamingEndpointListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointListSettings ResetVerbose(this AzureAmsStreamingEndpointListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointScaleSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointScaleSettingsExtensions
    {
        #region ScaleUnits
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.ScaleUnits"/></em></p>
        ///   <p>The number of scale units for Premium StreamingEndpoints.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetScaleUnits(this AzureAmsStreamingEndpointScaleSettings toolSettings, string scaleUnits)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ScaleUnits = scaleUnits;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.ScaleUnits"/></em></p>
        ///   <p>The number of scale units for Premium StreamingEndpoints.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetScaleUnits(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ScaleUnits = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetAccountName(this AzureAmsStreamingEndpointScaleSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetAccountName(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetIds(this AzureAmsStreamingEndpointScaleSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetIds(this AzureAmsStreamingEndpointScaleSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings AddIds(this AzureAmsStreamingEndpointScaleSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings AddIds(this AzureAmsStreamingEndpointScaleSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ClearIds(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings RemoveIds(this AzureAmsStreamingEndpointScaleSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointScaleSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings RemoveIds(this AzureAmsStreamingEndpointScaleSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetName(this AzureAmsStreamingEndpointScaleSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetName(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetResourceGroup(this AzureAmsStreamingEndpointScaleSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetResourceGroup(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetSubscription(this AzureAmsStreamingEndpointScaleSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetSubscription(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetDebug(this AzureAmsStreamingEndpointScaleSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetDebug(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetHelp(this AzureAmsStreamingEndpointScaleSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetHelp(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetOutput(this AzureAmsStreamingEndpointScaleSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetOutput(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetQuery(this AzureAmsStreamingEndpointScaleSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetQuery(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointScaleSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings SetVerbose(this AzureAmsStreamingEndpointScaleSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointScaleSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointScaleSettings ResetVerbose(this AzureAmsStreamingEndpointScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetAccountName(this AzureAmsStreamingEndpointShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetAccountName(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetIds(this AzureAmsStreamingEndpointShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetIds(this AzureAmsStreamingEndpointShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings AddIds(this AzureAmsStreamingEndpointShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings AddIds(this AzureAmsStreamingEndpointShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ClearIds(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings RemoveIds(this AzureAmsStreamingEndpointShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings RemoveIds(this AzureAmsStreamingEndpointShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetName(this AzureAmsStreamingEndpointShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetName(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetResourceGroup(this AzureAmsStreamingEndpointShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetResourceGroup(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetSubscription(this AzureAmsStreamingEndpointShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetSubscription(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetDebug(this AzureAmsStreamingEndpointShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetDebug(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetHelp(this AzureAmsStreamingEndpointShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetHelp(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetOutput(this AzureAmsStreamingEndpointShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetOutput(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetQuery(this AzureAmsStreamingEndpointShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetQuery(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings SetVerbose(this AzureAmsStreamingEndpointShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointShowSettings ResetVerbose(this AzureAmsStreamingEndpointShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointStartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointStartSettingsExtensions
    {
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetNoWait(this AzureAmsStreamingEndpointStartSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetNoWait(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings EnableNoWait(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings DisableNoWait(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingEndpointStartSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ToggleNoWait(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetAccountName(this AzureAmsStreamingEndpointStartSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetAccountName(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetIds(this AzureAmsStreamingEndpointStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetIds(this AzureAmsStreamingEndpointStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings AddIds(this AzureAmsStreamingEndpointStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings AddIds(this AzureAmsStreamingEndpointStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ClearIds(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings RemoveIds(this AzureAmsStreamingEndpointStartSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointStartSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings RemoveIds(this AzureAmsStreamingEndpointStartSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetName(this AzureAmsStreamingEndpointStartSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetName(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetResourceGroup(this AzureAmsStreamingEndpointStartSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetResourceGroup(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetSubscription(this AzureAmsStreamingEndpointStartSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetSubscription(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetDebug(this AzureAmsStreamingEndpointStartSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetDebug(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetHelp(this AzureAmsStreamingEndpointStartSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetHelp(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetOutput(this AzureAmsStreamingEndpointStartSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetOutput(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetQuery(this AzureAmsStreamingEndpointStartSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetQuery(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings SetVerbose(this AzureAmsStreamingEndpointStartSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStartSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStartSettings ResetVerbose(this AzureAmsStreamingEndpointStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointStopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointStopSettingsExtensions
    {
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetNoWait(this AzureAmsStreamingEndpointStopSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetNoWait(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings EnableNoWait(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings DisableNoWait(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingEndpointStopSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ToggleNoWait(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetAccountName(this AzureAmsStreamingEndpointStopSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetAccountName(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetIds(this AzureAmsStreamingEndpointStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetIds(this AzureAmsStreamingEndpointStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings AddIds(this AzureAmsStreamingEndpointStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings AddIds(this AzureAmsStreamingEndpointStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ClearIds(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings RemoveIds(this AzureAmsStreamingEndpointStopSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointStopSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings RemoveIds(this AzureAmsStreamingEndpointStopSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetName(this AzureAmsStreamingEndpointStopSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetName(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetResourceGroup(this AzureAmsStreamingEndpointStopSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetResourceGroup(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetSubscription(this AzureAmsStreamingEndpointStopSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetSubscription(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetDebug(this AzureAmsStreamingEndpointStopSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetDebug(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetHelp(this AzureAmsStreamingEndpointStopSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetHelp(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetOutput(this AzureAmsStreamingEndpointStopSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetOutput(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetQuery(this AzureAmsStreamingEndpointStopSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetQuery(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointStopSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings SetVerbose(this AzureAmsStreamingEndpointStopSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointStopSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointStopSettings ResetVerbose(this AzureAmsStreamingEndpointStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointUpdateSettingsExtensions
    {
        #region CustomHostNames
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/> to a new list</em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal = customHostNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/> to a new list</em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal = customHostNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings AddCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal.AddRange(customHostNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings AddCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal.AddRange(customHostNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ClearCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CustomHostNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings RemoveCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(customHostNames);
            toolSettings.CustomHostNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointUpdateSettings.CustomHostNames"/></em></p>
        ///   <p>Space-separated list of custom host names for the streaming endpoint. Use "" to clear existing list.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings RemoveCustomHostNames(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> customHostNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(customHostNames);
            toolSettings.CustomHostNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Description"/></em></p>
        ///   <p>The streaming endpoint description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetDescription(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Description"/></em></p>
        ///   <p>The streaming endpoint description.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetDescription(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region MaxCacheAge
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.MaxCacheAge"/></em></p>
        ///   <p>Max cache age.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetMaxCacheAge(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string maxCacheAge)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxCacheAge = maxCacheAge;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.MaxCacheAge"/></em></p>
        ///   <p>Max cache age.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetMaxCacheAge(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxCacheAge = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetNoWait(this AzureAmsStreamingEndpointUpdateSettings toolSettings, bool? noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetNoWait(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings EnableNoWait(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings DisableNoWait(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingEndpointUpdateSettings.NoWait"/></em></p>
        ///   <p>Do not wait for the long-running operation to finish.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ToggleNoWait(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = !toolSettings.NoWait;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetTags(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetTags(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetAccountName(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetAccountName(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings AddIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings AddIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ClearIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings RemoveIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings RemoveIds(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetName(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetName(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetResourceGroup(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetResourceGroup(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetSubscription(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetSubscription(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Ips
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/> to a new list</em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal = ips.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings AddIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings AddIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.AddRange(ips);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ClearIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings RemoveIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings, params string[] ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointUpdateSettings.Ips"/></em></p>
        ///   <p>Space-separated IP addresses for access control. Allowed IP addresses can be specified as either a single IP address (e.g. "10.0.0.1") or as an IP range using an IP address and a CIDR subnet mask (e.g. "10.0.0.1/22"). Use "" to clear existing list. If no IP addresses are specified any IP address will be allowed.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings RemoveIps(this AzureAmsStreamingEndpointUpdateSettings toolSettings, IEnumerable<string> ips)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ips);
            toolSettings.IpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CdnProfile
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProfile"/></em></p>
        ///   <p>The CDN profile name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetCdnProfile(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string cdnProfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProfile = cdnProfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProfile"/></em></p>
        ///   <p>The CDN profile name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetCdnProfile(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProfile = null;
            return toolSettings;
        }
        #endregion
        #region CdnProvider
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProvider"/></em></p>
        ///   <p>The CDN provider name. Allowed values: StandardVerizon, PremiumVerizon, StandardAkamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetCdnProvider(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string cdnProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProvider = cdnProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.CdnProvider"/></em></p>
        ///   <p>The CDN provider name. Allowed values: StandardVerizon, PremiumVerizon, StandardAkamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetCdnProvider(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CdnProvider = null;
            return toolSettings;
        }
        #endregion
        #region DisableCdn
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.DisableCdn"/></em></p>
        ///   <p>Use this flag to disable CDN for the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetDisableCdn(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string disableCdn)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableCdn = disableCdn;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.DisableCdn"/></em></p>
        ///   <p>Use this flag to disable CDN for the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetDisableCdn(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableCdn = null;
            return toolSettings;
        }
        #endregion
        #region ClientAccessPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>The XML representing the clientaccesspolicy data used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetClientAccessPolicy(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string clientAccessPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = clientAccessPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.ClientAccessPolicy"/></em></p>
        ///   <p>The XML representing the clientaccesspolicy data used by Microsoft Silverlight and Adobe Flash. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetClientAccessPolicy(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientAccessPolicy = null;
            return toolSettings;
        }
        #endregion
        #region CrossDomainPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>The XML representing the crossdomain data used by Silverlight. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetCrossDomainPolicy(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string crossDomainPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = crossDomainPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.CrossDomainPolicy"/></em></p>
        ///   <p>The XML representing the crossdomain data used by Silverlight. Use @{file} to load from a file. For further information about the XML structure please refer to documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies">https://docs.microsoft.com/en-us/rest/api/media/operations/crosssiteaccesspolicies</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetCrossDomainPolicy(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CrossDomainPolicy = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetAdd(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetAdd(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetForceString(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetForceString(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetRemove(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetRemove(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetSet(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetSet(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetDebug(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetDebug(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetHelp(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetHelp(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetOutput(this AzureAmsStreamingEndpointUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetOutput(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetQuery(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetQuery(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings SetVerbose(this AzureAmsStreamingEndpointUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointUpdateSettings ResetVerbose(this AzureAmsStreamingEndpointUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointWaitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointWaitSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetAccountName(this AzureAmsStreamingEndpointWaitSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetAccountName(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetIds(this AzureAmsStreamingEndpointWaitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetIds(this AzureAmsStreamingEndpointWaitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings AddIds(this AzureAmsStreamingEndpointWaitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings AddIds(this AzureAmsStreamingEndpointWaitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ClearIds(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings RemoveIds(this AzureAmsStreamingEndpointWaitSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointWaitSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings RemoveIds(this AzureAmsStreamingEndpointWaitSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetName(this AzureAmsStreamingEndpointWaitSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetName(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetResourceGroup(this AzureAmsStreamingEndpointWaitSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetResourceGroup(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetSubscription(this AzureAmsStreamingEndpointWaitSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetSubscription(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Created
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Created"/></em></p>
        ///   <p>Wait until created with 'provisioningState' at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetCreated(this AzureAmsStreamingEndpointWaitSettings toolSettings, string created)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Created = created;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Created"/></em></p>
        ///   <p>Wait until created with 'provisioningState' at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetCreated(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Created = null;
            return toolSettings;
        }
        #endregion
        #region Custom
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Custom"/></em></p>
        ///   <p>Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetCustom(this AzureAmsStreamingEndpointWaitSettings toolSettings, string custom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Custom = custom;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Custom"/></em></p>
        ///   <p>Wait until the condition satisfies a custom JMESPath query. E.g. provisioningState!='InProgress', instanceView.statuses[?code=='PowerState/running'].</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetCustom(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Custom = null;
            return toolSettings;
        }
        #endregion
        #region Deleted
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Deleted"/></em></p>
        ///   <p>Wait until deleted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetDeleted(this AzureAmsStreamingEndpointWaitSettings toolSettings, string deleted)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Deleted = deleted;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Deleted"/></em></p>
        ///   <p>Wait until deleted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetDeleted(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Deleted = null;
            return toolSettings;
        }
        #endregion
        #region Exists
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Exists"/></em></p>
        ///   <p>Wait until the resource exists.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetExists(this AzureAmsStreamingEndpointWaitSettings toolSettings, string exists)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exists = exists;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Exists"/></em></p>
        ///   <p>Wait until the resource exists.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetExists(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exists = null;
            return toolSettings;
        }
        #endregion
        #region Interval
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Interval"/></em></p>
        ///   <p>Polling interval in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetInterval(this AzureAmsStreamingEndpointWaitSettings toolSettings, string interval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interval = interval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Interval"/></em></p>
        ///   <p>Polling interval in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetInterval(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interval = null;
            return toolSettings;
        }
        #endregion
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Timeout"/></em></p>
        ///   <p>Maximum wait in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetTimeout(this AzureAmsStreamingEndpointWaitSettings toolSettings, string timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Timeout"/></em></p>
        ///   <p>Maximum wait in seconds.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetTimeout(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Updated
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Updated"/></em></p>
        ///   <p>Wait until updated with provisioningState at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetUpdated(this AzureAmsStreamingEndpointWaitSettings toolSettings, string updated)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Updated = updated;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Updated"/></em></p>
        ///   <p>Wait until updated with provisioningState at 'Succeeded'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetUpdated(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Updated = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetDebug(this AzureAmsStreamingEndpointWaitSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetDebug(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetHelp(this AzureAmsStreamingEndpointWaitSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetHelp(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetOutput(this AzureAmsStreamingEndpointWaitSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetOutput(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetQuery(this AzureAmsStreamingEndpointWaitSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetQuery(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointWaitSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings SetVerbose(this AzureAmsStreamingEndpointWaitSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointWaitSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointWaitSettings ResetVerbose(this AzureAmsStreamingEndpointWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingLocatorCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingLocatorCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetAccountName(this AzureAmsStreamingLocatorCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetAccountName(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region AssetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset used by the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetAssetName(this AzureAmsStreamingLocatorCreateSettings toolSettings, string assetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = assetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.AssetName"/></em></p>
        ///   <p>The name of the asset used by the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetAssetName(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssetName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetName(this AzureAmsStreamingLocatorCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetName(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetResourceGroup(this AzureAmsStreamingLocatorCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetResourceGroup(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region StreamingPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingPolicyName"/></em></p>
        ///   <p>The name of the streaming policy used by the streaming locator. You can either create one with `az ams streaming policy create` or use any of the predefined policies: Predefined_DownloadOnly, Predefined_ClearStreamingOnly, Predefined_DownloadAndClearStreaming, Predefined_ClearKey, Predefined_MultiDrmCencStreaming, Predefined_MultiDrmStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetStreamingPolicyName(this AzureAmsStreamingLocatorCreateSettings toolSettings, string streamingPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingPolicyName = streamingPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingPolicyName"/></em></p>
        ///   <p>The name of the streaming policy used by the streaming locator. You can either create one with `az ams streaming policy create` or use any of the predefined policies: Predefined_DownloadOnly, Predefined_ClearStreamingOnly, Predefined_DownloadAndClearStreaming, Predefined_ClearKey, Predefined_MultiDrmCencStreaming, Predefined_MultiDrmStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetStreamingPolicyName(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region AlternativeMediaId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.AlternativeMediaId"/></em></p>
        ///   <p>An alternative media identifier associated with the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetAlternativeMediaId(this AzureAmsStreamingLocatorCreateSettings toolSettings, string alternativeMediaId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternativeMediaId = alternativeMediaId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.AlternativeMediaId"/></em></p>
        ///   <p>An alternative media identifier associated with the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetAlternativeMediaId(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternativeMediaId = null;
            return toolSettings;
        }
        #endregion
        #region ContentKeyPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeyPolicyName"/></em></p>
        ///   <p>The default content key policy name used by the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetContentKeyPolicyName(this AzureAmsStreamingLocatorCreateSettings toolSettings, string contentKeyPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentKeyPolicyName = contentKeyPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeyPolicyName"/></em></p>
        ///   <p>The default content key policy name used by the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetContentKeyPolicyName(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentKeyPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region ContentKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeys"/></em></p>
        ///   <p>JSON string with the content keys to be used by the streaming locator. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streaminglocators/streaminglocators_create#streaminglocatorcontentkey">https://docs.microsoft.com/en-us/rest/api/media/streaminglocators/streaminglocators_create#streaminglocatorcontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetContentKeys(this AzureAmsStreamingLocatorCreateSettings toolSettings, string contentKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentKeys = contentKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.ContentKeys"/></em></p>
        ///   <p>JSON string with the content keys to be used by the streaming locator. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streaminglocators/streaminglocators_create#streaminglocatorcontentkey">https://docs.microsoft.com/en-us/rest/api/media/streaminglocators/streaminglocators_create#streaminglocatorcontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetContentKeys(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContentKeys = null;
            return toolSettings;
        }
        #endregion
        #region EndTime
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.EndTime"/></em></p>
        ///   <p>The ISO 8601 DateTime end time (Y-m-d'T'H:M:S'Z') of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetEndTime(this AzureAmsStreamingLocatorCreateSettings toolSettings, string endTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTime = endTime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.EndTime"/></em></p>
        ///   <p>The ISO 8601 DateTime end time (Y-m-d'T'H:M:S'Z') of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetEndTime(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndTime = null;
            return toolSettings;
        }
        #endregion
        #region Filters
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Filters"/></em></p>
        ///   <p>A space-separated list of asset filter names and/or account filter names.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetFilters(this AzureAmsStreamingLocatorCreateSettings toolSettings, string filters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filters = filters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Filters"/></em></p>
        ///   <p>A space-separated list of asset filter names and/or account filter names.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetFilters(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filters = null;
            return toolSettings;
        }
        #endregion
        #region StartTime
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.StartTime"/></em></p>
        ///   <p>The ISO 8601 DateTime start time (Y-m-d'T'H:M:S'Z') of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetStartTime(this AzureAmsStreamingLocatorCreateSettings toolSettings, string startTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTime = startTime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.StartTime"/></em></p>
        ///   <p>The ISO 8601 DateTime start time (Y-m-d'T'H:M:S'Z') of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetStartTime(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartTime = null;
            return toolSettings;
        }
        #endregion
        #region StreamingLocatorId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingLocatorId"/></em></p>
        ///   <p>The identifier of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetStreamingLocatorId(this AzureAmsStreamingLocatorCreateSettings toolSettings, string streamingLocatorId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingLocatorId = streamingLocatorId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.StreamingLocatorId"/></em></p>
        ///   <p>The identifier of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetStreamingLocatorId(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StreamingLocatorId = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetSubscription(this AzureAmsStreamingLocatorCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetSubscription(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetDebug(this AzureAmsStreamingLocatorCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetDebug(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetHelp(this AzureAmsStreamingLocatorCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetHelp(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetOutput(this AzureAmsStreamingLocatorCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetOutput(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetQuery(this AzureAmsStreamingLocatorCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetQuery(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings SetVerbose(this AzureAmsStreamingLocatorCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorCreateSettings ResetVerbose(this AzureAmsStreamingLocatorCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingLocatorDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingLocatorDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetAccountName(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetAccountName(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings AddIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings AddIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ClearIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings RemoveIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings RemoveIds(this AzureAmsStreamingLocatorDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetName(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetName(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetResourceGroup(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetResourceGroup(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetSubscription(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetSubscription(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetDebug(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetDebug(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetHelp(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetHelp(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetOutput(this AzureAmsStreamingLocatorDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetOutput(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetQuery(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetQuery(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings SetVerbose(this AzureAmsStreamingLocatorDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorDeleteSettings ResetVerbose(this AzureAmsStreamingLocatorDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingLocatorGetPathsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingLocatorGetPathsSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetAccountName(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetAccountName(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings AddIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings AddIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ClearIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings RemoveIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorGetPathsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings RemoveIds(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetName(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetName(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetResourceGroup(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetResourceGroup(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetSubscription(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetSubscription(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetDebug(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetDebug(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetHelp(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetHelp(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetOutput(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetOutput(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetQuery(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetQuery(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings SetVerbose(this AzureAmsStreamingLocatorGetPathsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorGetPathsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorGetPathsSettings ResetVerbose(this AzureAmsStreamingLocatorGetPathsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingLocatorListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingLocatorListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetAccountName(this AzureAmsStreamingLocatorListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetAccountName(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetResourceGroup(this AzureAmsStreamingLocatorListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetResourceGroup(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetFilter(this AzureAmsStreamingLocatorListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetFilter(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Orderby"/></em></p>
        ///   <p>Specifies the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetOrderby(this AzureAmsStreamingLocatorListSettings toolSettings, string orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Orderby"/></em></p>
        ///   <p>Specifies the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetOrderby(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetTop(this AzureAmsStreamingLocatorListSettings toolSettings, string top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetTop(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetSubscription(this AzureAmsStreamingLocatorListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetSubscription(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetDebug(this AzureAmsStreamingLocatorListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetDebug(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetHelp(this AzureAmsStreamingLocatorListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetHelp(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetOutput(this AzureAmsStreamingLocatorListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetOutput(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetQuery(this AzureAmsStreamingLocatorListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetQuery(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings SetVerbose(this AzureAmsStreamingLocatorListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListSettings ResetVerbose(this AzureAmsStreamingLocatorListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingLocatorListContentKeysSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingLocatorListContentKeysSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetAccountName(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetAccountName(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings AddIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings AddIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ClearIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings RemoveIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings RemoveIds(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetName(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetName(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetResourceGroup(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetResourceGroup(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetSubscription(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetSubscription(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetDebug(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetDebug(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetHelp(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetHelp(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetOutput(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetOutput(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetQuery(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetQuery(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings SetVerbose(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorListContentKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorListContentKeysSettings ResetVerbose(this AzureAmsStreamingLocatorListContentKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingLocatorShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingLocatorShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetAccountName(this AzureAmsStreamingLocatorShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetAccountName(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetIds(this AzureAmsStreamingLocatorShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetIds(this AzureAmsStreamingLocatorShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings AddIds(this AzureAmsStreamingLocatorShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings AddIds(this AzureAmsStreamingLocatorShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ClearIds(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings RemoveIds(this AzureAmsStreamingLocatorShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingLocatorShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings RemoveIds(this AzureAmsStreamingLocatorShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetName(this AzureAmsStreamingLocatorShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Name"/></em></p>
        ///   <p>The name of the streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetName(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetResourceGroup(this AzureAmsStreamingLocatorShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetResourceGroup(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetSubscription(this AzureAmsStreamingLocatorShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetSubscription(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetDebug(this AzureAmsStreamingLocatorShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetDebug(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetHelp(this AzureAmsStreamingLocatorShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetHelp(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetOutput(this AzureAmsStreamingLocatorShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetOutput(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetQuery(this AzureAmsStreamingLocatorShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetQuery(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingLocatorShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings SetVerbose(this AzureAmsStreamingLocatorShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingLocatorShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingLocatorShowSettings ResetVerbose(this AzureAmsStreamingLocatorShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingPolicyCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingPolicyCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetAccountName(this AzureAmsStreamingPolicyCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetAccountName(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Name"/></em></p>
        ///   <p>The name of the streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetName(this AzureAmsStreamingPolicyCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Name"/></em></p>
        ///   <p>The name of the streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetName(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetResourceGroup(this AzureAmsStreamingPolicyCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetResourceGroup(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region DefaultContentKeyPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.DefaultContentKeyPolicyName"/></em></p>
        ///   <p>Default Content Key used by current streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetDefaultContentKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings, string defaultContentKeyPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultContentKeyPolicyName = defaultContentKeyPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.DefaultContentKeyPolicyName"/></em></p>
        ///   <p>Default Content Key used by current streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetDefaultContentKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultContentKeyPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region NoEncryptionProtocols
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params bool[] noEncryptionProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoEncryptionProtocolsInternal = noEncryptionProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<bool> noEncryptionProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoEncryptionProtocolsInternal = noEncryptionProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params bool[] noEncryptionProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoEncryptionProtocolsInternal.AddRange(noEncryptionProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<bool> noEncryptionProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoEncryptionProtocolsInternal.AddRange(noEncryptionProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ClearNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoEncryptionProtocolsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params bool[] noEncryptionProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<bool>(noEncryptionProtocols);
            toolSettings.NoEncryptionProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.NoEncryptionProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for NoEncryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveNoEncryptionProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<bool> noEncryptionProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<bool>(noEncryptionProtocols);
            toolSettings.NoEncryptionProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CbcsClearTracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsClearTracks"/></em></p>
        ///   <p>The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsClearTracks(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsClearTracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsClearTracks = cbcsClearTracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsClearTracks"/></em></p>
        ///   <p>The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsClearTracks(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsClearTracks = null;
            return toolSettings;
        }
        #endregion
        #region CbcsDefaultKeyLabel
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyLabel"/></em></p>
        ///   <p>Label to specify Default Content Key for an encryption scheme.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsDefaultKeyLabel(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsDefaultKeyLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsDefaultKeyLabel = cbcsDefaultKeyLabel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyLabel"/></em></p>
        ///   <p>Label to specify Default Content Key for an encryption scheme.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsDefaultKeyLabel(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsDefaultKeyLabel = null;
            return toolSettings;
        }
        #endregion
        #region CbcsDefaultKeyPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyPolicyName"/></em></p>
        ///   <p>Policy used by Default Content Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsDefaultKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsDefaultKeyPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsDefaultKeyPolicyName = cbcsDefaultKeyPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsDefaultKeyPolicyName"/></em></p>
        ///   <p>Policy used by Default Content Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsDefaultKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsDefaultKeyPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region CbcsFairPlayAllowPersistentLicense
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></em></p>
        ///   <p>Allows the license to be persistent or not.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsFairPlayAllowPersistentLicense(this AzureAmsStreamingPolicyCreateSettings toolSettings, bool? cbcsFairPlayAllowPersistentLicense)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayAllowPersistentLicense = cbcsFairPlayAllowPersistentLicense;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></em></p>
        ///   <p>Allows the license to be persistent or not.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsFairPlayAllowPersistentLicense(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayAllowPersistentLicense = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></em></p>
        ///   <p>Allows the license to be persistent or not.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings EnableCbcsFairPlayAllowPersistentLicense(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayAllowPersistentLicense = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></em></p>
        ///   <p>Allows the license to be persistent or not.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings DisableCbcsFairPlayAllowPersistentLicense(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayAllowPersistentLicense = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayAllowPersistentLicense"/></em></p>
        ///   <p>Allows the license to be persistent or not.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ToggleCbcsFairPlayAllowPersistentLicense(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayAllowPersistentLicense = !toolSettings.CbcsFairPlayAllowPersistentLicense;
            return toolSettings;
        }
        #endregion
        #region CbcsFairPlayTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsFairPlayTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsFairPlayTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayTemplate = cbcsFairPlayTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsFairPlayTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsFairPlayTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsFairPlayTemplate = null;
            return toolSettings;
        }
        #endregion
        #region CbcsKeyToTrackMappings
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsKeyToTrackMappings"/></em></p>
        ///   <p>The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsKeyToTrackMappings(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsKeyToTrackMappings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsKeyToTrackMappings = cbcsKeyToTrackMappings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsKeyToTrackMappings"/></em></p>
        ///   <p>The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsKeyToTrackMappings(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsKeyToTrackMappings = null;
            return toolSettings;
        }
        #endregion
        #region CbcsPlayReadyAttributes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyAttributes"/></em></p>
        ///   <p>Custom attributes for PlayReady.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsPlayReadyAttributes(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsPlayReadyAttributes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsPlayReadyAttributes = cbcsPlayReadyAttributes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyAttributes"/></em></p>
        ///   <p>Custom attributes for PlayReady.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsPlayReadyAttributes(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsPlayReadyAttributes = null;
            return toolSettings;
        }
        #endregion
        #region CbcsPlayReadyTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsPlayReadyTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsPlayReadyTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsPlayReadyTemplate = cbcsPlayReadyTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsPlayReadyTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsPlayReadyTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsPlayReadyTemplate = null;
            return toolSettings;
        }
        #endregion
        #region CbcsProtocols
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] cbcsProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsProtocolsInternal = cbcsProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> cbcsProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsProtocolsInternal = cbcsProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] cbcsProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsProtocolsInternal.AddRange(cbcsProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> cbcsProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsProtocolsInternal.AddRange(cbcsProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ClearCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsProtocolsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] cbcsProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cbcsProtocols);
            toolSettings.CbcsProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CBCS. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveCbcsProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> cbcsProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cbcsProtocols);
            toolSettings.CbcsProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CbcsWidevineTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsWidevineTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCbcsWidevineTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cbcsWidevineTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsWidevineTemplate = cbcsWidevineTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CbcsWidevineTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCbcsWidevineTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CbcsWidevineTemplate = null;
            return toolSettings;
        }
        #endregion
        #region CencClearTracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencClearTracks"/></em></p>
        ///   <p>The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencClearTracks(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencClearTracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencClearTracks = cencClearTracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencClearTracks"/></em></p>
        ///   <p>The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencClearTracks(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencClearTracks = null;
            return toolSettings;
        }
        #endregion
        #region CencDefaultKeyLabel
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyLabel"/></em></p>
        ///   <p>Label to specify Default Content Key for an encryption scheme.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencDefaultKeyLabel(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencDefaultKeyLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDefaultKeyLabel = cencDefaultKeyLabel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyLabel"/></em></p>
        ///   <p>Label to specify Default Content Key for an encryption scheme.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencDefaultKeyLabel(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDefaultKeyLabel = null;
            return toolSettings;
        }
        #endregion
        #region CencDefaultKeyPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyPolicyName"/></em></p>
        ///   <p>Policy used by Default Content Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencDefaultKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencDefaultKeyPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDefaultKeyPolicyName = cencDefaultKeyPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDefaultKeyPolicyName"/></em></p>
        ///   <p>Policy used by Default Content Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencDefaultKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDefaultKeyPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region CencDisablePlayReady
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></em></p>
        ///   <p>If specified, no PlayReady cenc DRM will be configured. If --cenc-disable-play-ready is set, --cenc-disable-widevine cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencDisablePlayReady(this AzureAmsStreamingPolicyCreateSettings toolSettings, bool? cencDisablePlayReady)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisablePlayReady = cencDisablePlayReady;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></em></p>
        ///   <p>If specified, no PlayReady cenc DRM will be configured. If --cenc-disable-play-ready is set, --cenc-disable-widevine cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencDisablePlayReady(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisablePlayReady = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></em></p>
        ///   <p>If specified, no PlayReady cenc DRM will be configured. If --cenc-disable-play-ready is set, --cenc-disable-widevine cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings EnableCencDisablePlayReady(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisablePlayReady = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></em></p>
        ///   <p>If specified, no PlayReady cenc DRM will be configured. If --cenc-disable-play-ready is set, --cenc-disable-widevine cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings DisableCencDisablePlayReady(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisablePlayReady = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisablePlayReady"/></em></p>
        ///   <p>If specified, no PlayReady cenc DRM will be configured. If --cenc-disable-play-ready is set, --cenc-disable-widevine cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ToggleCencDisablePlayReady(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisablePlayReady = !toolSettings.CencDisablePlayReady;
            return toolSettings;
        }
        #endregion
        #region CencDisableWidevine
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></em></p>
        ///   <p>If specified, no Widevine cenc DRM will be configured. If --cenc-disable-widevine is set, --cenc-disable-play-ready cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencDisableWidevine(this AzureAmsStreamingPolicyCreateSettings toolSettings, bool? cencDisableWidevine)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisableWidevine = cencDisableWidevine;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></em></p>
        ///   <p>If specified, no Widevine cenc DRM will be configured. If --cenc-disable-widevine is set, --cenc-disable-play-ready cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencDisableWidevine(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisableWidevine = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></em></p>
        ///   <p>If specified, no Widevine cenc DRM will be configured. If --cenc-disable-widevine is set, --cenc-disable-play-ready cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings EnableCencDisableWidevine(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisableWidevine = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></em></p>
        ///   <p>If specified, no Widevine cenc DRM will be configured. If --cenc-disable-widevine is set, --cenc-disable-play-ready cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings DisableCencDisableWidevine(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisableWidevine = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureAmsStreamingPolicyCreateSettings.CencDisableWidevine"/></em></p>
        ///   <p>If specified, no Widevine cenc DRM will be configured. If --cenc-disable-widevine is set, --cenc-disable-play-ready cannot also be set.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ToggleCencDisableWidevine(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencDisableWidevine = !toolSettings.CencDisableWidevine;
            return toolSettings;
        }
        #endregion
        #region CencKeyToTrackMappings
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencKeyToTrackMappings"/></em></p>
        ///   <p>The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencKeyToTrackMappings(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencKeyToTrackMappings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencKeyToTrackMappings = cencKeyToTrackMappings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencKeyToTrackMappings"/></em></p>
        ///   <p>The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencKeyToTrackMappings(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencKeyToTrackMappings = null;
            return toolSettings;
        }
        #endregion
        #region CencPlayReadyAttributes
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyAttributes"/></em></p>
        ///   <p>Custom attributes for PlayReady.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencPlayReadyAttributes(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencPlayReadyAttributes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencPlayReadyAttributes = cencPlayReadyAttributes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyAttributes"/></em></p>
        ///   <p>Custom attributes for PlayReady.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencPlayReadyAttributes(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencPlayReadyAttributes = null;
            return toolSettings;
        }
        #endregion
        #region CencPlayReadyTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencPlayReadyTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencPlayReadyTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencPlayReadyTemplate = cencPlayReadyTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencPlayReadyTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencPlayReadyTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencPlayReadyTemplate = null;
            return toolSettings;
        }
        #endregion
        #region CencProtocols
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] cencProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencProtocolsInternal = cencProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> cencProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencProtocolsInternal = cencProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] cencProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencProtocolsInternal.AddRange(cencProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> cencProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencProtocolsInternal.AddRange(cencProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ClearCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencProtocolsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] cencProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cencProtocols);
            toolSettings.CencProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.CencProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Common Encryption CENC. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveCencProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> cencProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cencProtocols);
            toolSettings.CencProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CencWidevineTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.CencWidevineTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetCencWidevineTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings, string cencWidevineTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencWidevineTemplate = cencWidevineTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.CencWidevineTemplate"/></em></p>
        ///   <p>The custom license acquisition URL template for a customer service to deliver keys to end users. Not needed when using Azure Media Services for issuing keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetCencWidevineTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CencWidevineTemplate = null;
            return toolSettings;
        }
        #endregion
        #region EnvelopeClearTracks
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeClearTracks"/></em></p>
        ///   <p>The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeClearTracks(this AzureAmsStreamingPolicyCreateSettings toolSettings, string envelopeClearTracks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeClearTracks = envelopeClearTracks;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeClearTracks"/></em></p>
        ///   <p>The JSON representing which tracks should not be encrypted. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#trackselection</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetEnvelopeClearTracks(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeClearTracks = null;
            return toolSettings;
        }
        #endregion
        #region EnvelopeDefaultKeyLabel
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyLabel"/></em></p>
        ///   <p>Label used to specify Content Key when creating a streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeDefaultKeyLabel(this AzureAmsStreamingPolicyCreateSettings toolSettings, string envelopeDefaultKeyLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeDefaultKeyLabel = envelopeDefaultKeyLabel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyLabel"/></em></p>
        ///   <p>Label used to specify Content Key when creating a streaming locator.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetEnvelopeDefaultKeyLabel(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeDefaultKeyLabel = null;
            return toolSettings;
        }
        #endregion
        #region EnvelopeDefaultKeyPolicyName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyPolicyName"/></em></p>
        ///   <p>Policy used by Default Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeDefaultKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings, string envelopeDefaultKeyPolicyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeDefaultKeyPolicyName = envelopeDefaultKeyPolicyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeDefaultKeyPolicyName"/></em></p>
        ///   <p>Policy used by Default Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetEnvelopeDefaultKeyPolicyName(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeDefaultKeyPolicyName = null;
            return toolSettings;
        }
        #endregion
        #region EnvelopeKeyToTrackMappings
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeKeyToTrackMappings"/></em></p>
        ///   <p>The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeKeyToTrackMappings(this AzureAmsStreamingPolicyCreateSettings toolSettings, string envelopeKeyToTrackMappings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeKeyToTrackMappings = envelopeKeyToTrackMappings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeKeyToTrackMappings"/></em></p>
        ///   <p>The JSON representing a list of StreamingPolicyContentKey. Use @{file} to load from a file. For further information about the JSON structure please refer to swagger documentation on <a href="https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey">https://docs.microsoft.com/en-us/rest/api/media/streamingpolicies/create#streamingpolicycontentkey</a>.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetEnvelopeKeyToTrackMappings(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeKeyToTrackMappings = null;
            return toolSettings;
        }
        #endregion
        #region EnvelopeProtocols
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] envelopeProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeProtocolsInternal = envelopeProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/> to a new list</em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> envelopeProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeProtocolsInternal = envelopeProtocols.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] envelopeProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeProtocolsInternal.AddRange(envelopeProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings AddEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> envelopeProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeProtocolsInternal.AddRange(envelopeProtocols);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ClearEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeProtocolsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, params string[] envelopeProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envelopeProtocols);
            toolSettings.EnvelopeProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeProtocols"/></em></p>
        ///   <p>Space-separated list of enabled protocols for Envelope Encryption. Allowed values: Download, Dash, HLS, SmoothStreaming.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings RemoveEnvelopeProtocols(this AzureAmsStreamingPolicyCreateSettings toolSettings, IEnumerable<string> envelopeProtocols)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envelopeProtocols);
            toolSettings.EnvelopeProtocolsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvelopeTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeTemplate"/></em></p>
        ///   <p>The KeyAcquistionUrlTemplate is used to point to user specified service to delivery content keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetEnvelopeTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings, string envelopeTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeTemplate = envelopeTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.EnvelopeTemplate"/></em></p>
        ///   <p>The KeyAcquistionUrlTemplate is used to point to user specified service to delivery content keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetEnvelopeTemplate(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvelopeTemplate = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetSubscription(this AzureAmsStreamingPolicyCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetSubscription(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetDebug(this AzureAmsStreamingPolicyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetDebug(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetHelp(this AzureAmsStreamingPolicyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetHelp(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetOutput(this AzureAmsStreamingPolicyCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetOutput(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetQuery(this AzureAmsStreamingPolicyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetQuery(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings SetVerbose(this AzureAmsStreamingPolicyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyCreateSettings ResetVerbose(this AzureAmsStreamingPolicyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingPolicyDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingPolicyDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetAccountName(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetAccountName(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings AddIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings AddIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ClearIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings RemoveIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings RemoveIds(this AzureAmsStreamingPolicyDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Name"/></em></p>
        ///   <p>The name of the streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetName(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Name"/></em></p>
        ///   <p>The name of the streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetName(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetResourceGroup(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetResourceGroup(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetSubscription(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetSubscription(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetDebug(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetDebug(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetHelp(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetHelp(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetOutput(this AzureAmsStreamingPolicyDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetOutput(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetQuery(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetQuery(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings SetVerbose(this AzureAmsStreamingPolicyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyDeleteSettings ResetVerbose(this AzureAmsStreamingPolicyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingPolicyListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingPolicyListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetAccountName(this AzureAmsStreamingPolicyListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetAccountName(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetResourceGroup(this AzureAmsStreamingPolicyListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetResourceGroup(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetFilter(this AzureAmsStreamingPolicyListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetFilter(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Orderby"/></em></p>
        ///   <p>Specifies the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetOrderby(this AzureAmsStreamingPolicyListSettings toolSettings, string orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Orderby"/></em></p>
        ///   <p>Specifies the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetOrderby(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetTop(this AzureAmsStreamingPolicyListSettings toolSettings, string top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Top"/></em></p>
        ///   <p>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetTop(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetSubscription(this AzureAmsStreamingPolicyListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetSubscription(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetDebug(this AzureAmsStreamingPolicyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetDebug(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetHelp(this AzureAmsStreamingPolicyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetHelp(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetOutput(this AzureAmsStreamingPolicyListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetOutput(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetQuery(this AzureAmsStreamingPolicyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetQuery(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings SetVerbose(this AzureAmsStreamingPolicyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyListSettings ResetVerbose(this AzureAmsStreamingPolicyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingPolicyShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingPolicyShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetAccountName(this AzureAmsStreamingPolicyShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetAccountName(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetIds(this AzureAmsStreamingPolicyShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetIds(this AzureAmsStreamingPolicyShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings AddIds(this AzureAmsStreamingPolicyShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings AddIds(this AzureAmsStreamingPolicyShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ClearIds(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings RemoveIds(this AzureAmsStreamingPolicyShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingPolicyShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings RemoveIds(this AzureAmsStreamingPolicyShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Name"/></em></p>
        ///   <p>The name of the streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetName(this AzureAmsStreamingPolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Name"/></em></p>
        ///   <p>The name of the streaming policy.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetName(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetResourceGroup(this AzureAmsStreamingPolicyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetResourceGroup(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetSubscription(this AzureAmsStreamingPolicyShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetSubscription(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetDebug(this AzureAmsStreamingPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetDebug(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetHelp(this AzureAmsStreamingPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetHelp(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetOutput(this AzureAmsStreamingPolicyShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetOutput(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetQuery(this AzureAmsStreamingPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetQuery(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingPolicyShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings SetVerbose(this AzureAmsStreamingPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingPolicyShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingPolicyShowSettings ResetVerbose(this AzureAmsStreamingPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetAccountName(this AzureAmsTransformCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetAccountName(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetName(this AzureAmsTransformCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetName(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Preset
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Preset"/></em></p>
        ///   <p>Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the transform output. Allowed values: H264SingleBitrateSD, H264SingleBitrate720p, H264SingleBitrate1080p, AdaptiveStreaming, AACGoodQualityAudio, ContentAwareEncodingExperimental, H264MultipleBitrate1080p, H264MultipleBitrate720p, H264MultipleBitrateSD, AudioAnalyzer, VideoAnalyzer. In addition to the allowed values, you can also pass a path to a custom Standard Encoder preset JSON file. See <a href="https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset">https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset</a> for further details on the settings to use to build a custom preset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetPreset(this AzureAmsTransformCreateSettings toolSettings, string preset)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preset = preset;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Preset"/></em></p>
        ///   <p>Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the transform output. Allowed values: H264SingleBitrateSD, H264SingleBitrate720p, H264SingleBitrate1080p, AdaptiveStreaming, AACGoodQualityAudio, ContentAwareEncodingExperimental, H264MultipleBitrate1080p, H264MultipleBitrate720p, H264MultipleBitrateSD, AudioAnalyzer, VideoAnalyzer. In addition to the allowed values, you can also pass a path to a custom Standard Encoder preset JSON file. See <a href="https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset">https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset</a> for further details on the settings to use to build a custom preset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetPreset(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preset = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetResourceGroup(this AzureAmsTransformCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetResourceGroup(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Description"/></em></p>
        ///   <p>The description of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetDescription(this AzureAmsTransformCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Description"/></em></p>
        ///   <p>The description of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetDescription(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region OnError
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.OnError"/></em></p>
        ///   <p>A Transform can define more than one output. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetOnError(this AzureAmsTransformCreateSettings toolSettings, AmsTransformOnError onError)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnError = onError;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.OnError"/></em></p>
        ///   <p>A Transform can define more than one output. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetOnError(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnError = null;
            return toolSettings;
        }
        #endregion
        #region RelativePriority
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.RelativePriority"/></em></p>
        ///   <p>Sets the relative priority of the transform outputs within a transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetRelativePriority(this AzureAmsTransformCreateSettings toolSettings, AmsJobPriority relativePriority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RelativePriority = relativePriority;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.RelativePriority"/></em></p>
        ///   <p>Sets the relative priority of the transform outputs within a transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetRelativePriority(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RelativePriority = null;
            return toolSettings;
        }
        #endregion
        #region AudioLanguage
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.AudioLanguage"/></em></p>
        ///   <p>The language for the audio payload in the input using the BCP-47 format of "language tag-region" (e.g: en-US). If not specified, automatic language detection would be employed. This feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to English. Allowed values: en-US, en-GB, es-ES, es-MX, fr-FR, it-IT, ja-JP, pt-BR, zh-CN, de-DE, ar-EG, ru-RU, hi-IN.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetAudioLanguage(this AzureAmsTransformCreateSettings toolSettings, string audioLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AudioLanguage = audioLanguage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.AudioLanguage"/></em></p>
        ///   <p>The language for the audio payload in the input using the BCP-47 format of "language tag-region" (e.g: en-US). If not specified, automatic language detection would be employed. This feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to English. Allowed values: en-US, en-GB, es-ES, es-MX, fr-FR, it-IT, ja-JP, pt-BR, zh-CN, de-DE, ar-EG, ru-RU, hi-IN.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetAudioLanguage(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AudioLanguage = null;
            return toolSettings;
        }
        #endregion
        #region InsightsToExtract
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.InsightsToExtract"/></em></p>
        ///   <p>The type of insights to be extracted. If not set then the type will be selected based on the content type. If the content is audio only then only audio insights will be extracted and if it is video only video insights will be extracted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetInsightsToExtract(this AzureAmsTransformCreateSettings toolSettings, AmsTransformInsightsToExtract insightsToExtract)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InsightsToExtract = insightsToExtract;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.InsightsToExtract"/></em></p>
        ///   <p>The type of insights to be extracted. If not set then the type will be selected based on the content type. If the content is audio only then only audio insights will be extracted and if it is video only video insights will be extracted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetInsightsToExtract(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InsightsToExtract = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetSubscription(this AzureAmsTransformCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetSubscription(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetDebug(this AzureAmsTransformCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetDebug(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetHelp(this AzureAmsTransformCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetHelp(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetOutput(this AzureAmsTransformCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetOutput(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetQuery(this AzureAmsTransformCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetQuery(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings SetVerbose(this AzureAmsTransformCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformCreateSettings ResetVerbose(this AzureAmsTransformCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetAccountName(this AzureAmsTransformDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetAccountName(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetIds(this AzureAmsTransformDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetIds(this AzureAmsTransformDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings AddIds(this AzureAmsTransformDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings AddIds(this AzureAmsTransformDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsTransformDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ClearIds(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings RemoveIds(this AzureAmsTransformDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings RemoveIds(this AzureAmsTransformDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetName(this AzureAmsTransformDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetName(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetResourceGroup(this AzureAmsTransformDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetResourceGroup(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetSubscription(this AzureAmsTransformDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetSubscription(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetDebug(this AzureAmsTransformDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetDebug(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetHelp(this AzureAmsTransformDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetHelp(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetOutput(this AzureAmsTransformDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetOutput(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetQuery(this AzureAmsTransformDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetQuery(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings SetVerbose(this AzureAmsTransformDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformDeleteSettings ResetVerbose(this AzureAmsTransformDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetAccountName(this AzureAmsTransformListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetAccountName(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetResourceGroup(this AzureAmsTransformListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetResourceGroup(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetFilter(this AzureAmsTransformListSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Filter"/></em></p>
        ///   <p>Restricts the set of items returned.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetFilter(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Orderby
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetOrderby(this AzureAmsTransformListSettings toolSettings, string orderby)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = orderby;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Orderby"/></em></p>
        ///   <p>Specifies the the key by which the result collection should be ordered.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetOrderby(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orderby = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetSubscription(this AzureAmsTransformListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetSubscription(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetDebug(this AzureAmsTransformListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetDebug(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetHelp(this AzureAmsTransformListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetHelp(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetOutput(this AzureAmsTransformListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetOutput(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetQuery(this AzureAmsTransformListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetQuery(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings SetVerbose(this AzureAmsTransformListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformListSettings ResetVerbose(this AzureAmsTransformListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetAccountName(this AzureAmsTransformShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetAccountName(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetIds(this AzureAmsTransformShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetIds(this AzureAmsTransformShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings AddIds(this AzureAmsTransformShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings AddIds(this AzureAmsTransformShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsTransformShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ClearIds(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings RemoveIds(this AzureAmsTransformShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings RemoveIds(this AzureAmsTransformShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetName(this AzureAmsTransformShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetName(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetResourceGroup(this AzureAmsTransformShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetResourceGroup(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetSubscription(this AzureAmsTransformShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetSubscription(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetDebug(this AzureAmsTransformShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetDebug(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetHelp(this AzureAmsTransformShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetHelp(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetOutput(this AzureAmsTransformShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetOutput(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetQuery(this AzureAmsTransformShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetQuery(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings SetVerbose(this AzureAmsTransformShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformShowSettings ResetVerbose(this AzureAmsTransformShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformUpdateSettingsExtensions
    {
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Description"/></em></p>
        ///   <p>The description of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetDescription(this AzureAmsTransformUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Description"/></em></p>
        ///   <p>The description of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetDescription(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetAccountName(this AzureAmsTransformUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetAccountName(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetIds(this AzureAmsTransformUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetIds(this AzureAmsTransformUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings AddIds(this AzureAmsTransformUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings AddIds(this AzureAmsTransformUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsTransformUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ClearIds(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings RemoveIds(this AzureAmsTransformUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings RemoveIds(this AzureAmsTransformUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetName(this AzureAmsTransformUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetName(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetResourceGroup(this AzureAmsTransformUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetResourceGroup(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetSubscription(this AzureAmsTransformUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetSubscription(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetAdd(this AzureAmsTransformUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetAdd(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetForceString(this AzureAmsTransformUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetForceString(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetRemove(this AzureAmsTransformUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetRemove(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetSet(this AzureAmsTransformUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetSet(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetDebug(this AzureAmsTransformUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetDebug(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetHelp(this AzureAmsTransformUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetHelp(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetOutput(this AzureAmsTransformUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetOutput(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetQuery(this AzureAmsTransformUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetQuery(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings SetVerbose(this AzureAmsTransformUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformUpdateSettings ResetVerbose(this AzureAmsTransformUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountMruSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountMruSetSettingsExtensions
    {
        #region Count
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Count"/></em></p>
        ///   <p>The number of the encoding reserved units that you want to be provisioned for this account for concurrent tasks (one unit equals one task).</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetCount(this AzureAmsAccountMruSetSettings toolSettings, string count)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Count = count;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Count"/></em></p>
        ///   <p>The number of the encoding reserved units that you want to be provisioned for this account for concurrent tasks (one unit equals one task).</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetCount(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Count = null;
            return toolSettings;
        }
        #endregion
        #region Type
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Type"/></em></p>
        ///   <p>Speed of reserved processing units. The cost of media encoding depends on the pricing tier you choose. See <a href="https://azure.microsoft.com/pricing/details/media-services/">https://azure.microsoft.com/pricing/details/media-services/</a> for further details. Allowed values: S1, S2, S3.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetType(this AzureAmsAccountMruSetSettings toolSettings, string type)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = type;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Type"/></em></p>
        ///   <p>Speed of reserved processing units. The cost of media encoding depends on the pricing tier you choose. See <a href="https://azure.microsoft.com/pricing/details/media-services/">https://azure.microsoft.com/pricing/details/media-services/</a> for further details. Allowed values: S1, S2, S3.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetType(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetIds(this AzureAmsAccountMruSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetIds(this AzureAmsAccountMruSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountMruSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings AddIds(this AzureAmsAccountMruSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountMruSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings AddIds(this AzureAmsAccountMruSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountMruSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ClearIds(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountMruSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings RemoveIds(this AzureAmsAccountMruSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountMruSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings RemoveIds(this AzureAmsAccountMruSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetName(this AzureAmsAccountMruSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetName(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetResourceGroup(this AzureAmsAccountMruSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetResourceGroup(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetSubscription(this AzureAmsAccountMruSetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetSubscription(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetDebug(this AzureAmsAccountMruSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetDebug(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetHelp(this AzureAmsAccountMruSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetHelp(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetOutput(this AzureAmsAccountMruSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetOutput(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetQuery(this AzureAmsAccountMruSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetQuery(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings SetVerbose(this AzureAmsAccountMruSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruSetSettings ResetVerbose(this AzureAmsAccountMruSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountMruShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountMruShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetIds(this AzureAmsAccountMruShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetIds(this AzureAmsAccountMruShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountMruShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings AddIds(this AzureAmsAccountMruShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountMruShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings AddIds(this AzureAmsAccountMruShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountMruShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ClearIds(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountMruShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings RemoveIds(this AzureAmsAccountMruShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountMruShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings RemoveIds(this AzureAmsAccountMruShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetName(this AzureAmsAccountMruShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Name"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetName(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetResourceGroup(this AzureAmsAccountMruShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetResourceGroup(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetSubscription(this AzureAmsAccountMruShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetSubscription(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetDebug(this AzureAmsAccountMruShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetDebug(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetHelp(this AzureAmsAccountMruShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetHelp(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetOutput(this AzureAmsAccountMruShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetOutput(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetQuery(this AzureAmsAccountMruShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetQuery(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountMruShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings SetVerbose(this AzureAmsAccountMruShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountMruShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountMruShowSettings ResetVerbose(this AzureAmsAccountMruShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountSpCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountSpCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetAccountName(this AzureAmsAccountSpCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetAccountName(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetResourceGroup(this AzureAmsAccountSpCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetResourceGroup(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Name"/></em></p>
        ///   <p>The app name or app URI to associate the RBAC with. If not present, a default name like '{amsaccountname}-access-sp' will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetName(this AzureAmsAccountSpCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Name"/></em></p>
        ///   <p>The app name or app URI to associate the RBAC with. If not present, a default name like '{amsaccountname}-access-sp' will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetName(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Password"/></em></p>
        ///   <p>The password used to log in. Also known as 'Client Secret'. If not present, a random secret will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetPassword(this AzureAmsAccountSpCreateSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Password"/></em></p>
        ///   <p>The password used to log in. Also known as 'Client Secret'. If not present, a random secret will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetPassword(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Role
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Role"/></em></p>
        ///   <p>The role of the service principal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetRole(this AzureAmsAccountSpCreateSettings toolSettings, string role)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = role;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Role"/></em></p>
        ///   <p>The role of the service principal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetRole(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = null;
            return toolSettings;
        }
        #endregion
        #region Xml
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Xml"/></em></p>
        ///   <p>Enables xml output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetXml(this AzureAmsAccountSpCreateSettings toolSettings, string xml)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Xml = xml;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Xml"/></em></p>
        ///   <p>Enables xml output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetXml(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Xml = null;
            return toolSettings;
        }
        #endregion
        #region Years
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Years"/></em></p>
        ///   <p>Number of years for which the secret will be valid. Default: 1 year.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetYears(this AzureAmsAccountSpCreateSettings toolSettings, int? years)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Years = years;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Years"/></em></p>
        ///   <p>Number of years for which the secret will be valid. Default: 1 year.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetYears(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Years = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetSubscription(this AzureAmsAccountSpCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetSubscription(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetDebug(this AzureAmsAccountSpCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetDebug(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetHelp(this AzureAmsAccountSpCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetHelp(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetOutput(this AzureAmsAccountSpCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetOutput(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetQuery(this AzureAmsAccountSpCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetQuery(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings SetVerbose(this AzureAmsAccountSpCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpCreateSettings ResetVerbose(this AzureAmsAccountSpCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountSpResetCredentialsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountSpResetCredentialsSettingsExtensions
    {
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Password"/></em></p>
        ///   <p>The password used to log in. Also known as 'Client Secret'. If not present, a random secret will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetPassword(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Password"/></em></p>
        ///   <p>The password used to log in. Also known as 'Client Secret'. If not present, a random secret will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetPassword(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Role
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Role"/></em></p>
        ///   <p>The role of the service principal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetRole(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string role)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = role;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Role"/></em></p>
        ///   <p>The role of the service principal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetRole(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = null;
            return toolSettings;
        }
        #endregion
        #region Xml
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Xml"/></em></p>
        ///   <p>Enables xml output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetXml(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string xml)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Xml = xml;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Xml"/></em></p>
        ///   <p>Enables xml output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetXml(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Xml = null;
            return toolSettings;
        }
        #endregion
        #region Years
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Years"/></em></p>
        ///   <p>Number of years for which the secret will be valid. Default: 1 year.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetYears(this AzureAmsAccountSpResetCredentialsSettings toolSettings, int? years)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Years = years;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Years"/></em></p>
        ///   <p>Number of years for which the secret will be valid. Default: 1 year.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetYears(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Years = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetAccountName(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetAccountName(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings AddIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings AddIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ClearIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings RemoveIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountSpResetCredentialsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings RemoveIds(this AzureAmsAccountSpResetCredentialsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Name"/></em></p>
        ///   <p>The app name or app URI to associate the RBAC with. If not present, a default name like '{amsaccountname}-access-sp' will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetName(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Name"/></em></p>
        ///   <p>The app name or app URI to associate the RBAC with. If not present, a default name like '{amsaccountname}-access-sp' will be generated.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetName(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetResourceGroup(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetResourceGroup(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetSubscription(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetSubscription(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetDebug(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetDebug(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetHelp(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetHelp(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetOutput(this AzureAmsAccountSpResetCredentialsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetOutput(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetQuery(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetQuery(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountSpResetCredentialsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings SetVerbose(this AzureAmsAccountSpResetCredentialsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountSpResetCredentialsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountSpResetCredentialsSettings ResetVerbose(this AzureAmsAccountSpResetCredentialsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountStorageAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountStorageAddSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetAccountName(this AzureAmsAccountStorageAddSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetAccountName(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetIds(this AzureAmsAccountStorageAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetIds(this AzureAmsAccountStorageAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountStorageAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings AddIds(this AzureAmsAccountStorageAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountStorageAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings AddIds(this AzureAmsAccountStorageAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountStorageAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ClearIds(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountStorageAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings RemoveIds(this AzureAmsAccountStorageAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountStorageAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings RemoveIds(this AzureAmsAccountStorageAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Name"/></em></p>
        ///   <p>The name or resource ID of the secondary storage account to detach from the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetName(this AzureAmsAccountStorageAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Name"/></em></p>
        ///   <p>The name or resource ID of the secondary storage account to detach from the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetName(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetResourceGroup(this AzureAmsAccountStorageAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetResourceGroup(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetSubscription(this AzureAmsAccountStorageAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetSubscription(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetDebug(this AzureAmsAccountStorageAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetDebug(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetHelp(this AzureAmsAccountStorageAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetHelp(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetOutput(this AzureAmsAccountStorageAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetOutput(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetQuery(this AzureAmsAccountStorageAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetQuery(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings SetVerbose(this AzureAmsAccountStorageAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageAddSettings ResetVerbose(this AzureAmsAccountStorageAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountStorageRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountStorageRemoveSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetAccountName(this AzureAmsAccountStorageRemoveSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetAccountName(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetIds(this AzureAmsAccountStorageRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetIds(this AzureAmsAccountStorageRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings AddIds(this AzureAmsAccountStorageRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings AddIds(this AzureAmsAccountStorageRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ClearIds(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings RemoveIds(this AzureAmsAccountStorageRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountStorageRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings RemoveIds(this AzureAmsAccountStorageRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Name"/></em></p>
        ///   <p>The name or resource ID of the secondary storage account to detach from the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetName(this AzureAmsAccountStorageRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Name"/></em></p>
        ///   <p>The name or resource ID of the secondary storage account to detach from the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetName(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetResourceGroup(this AzureAmsAccountStorageRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetResourceGroup(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetSubscription(this AzureAmsAccountStorageRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetSubscription(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetDebug(this AzureAmsAccountStorageRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetDebug(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetHelp(this AzureAmsAccountStorageRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetHelp(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetOutput(this AzureAmsAccountStorageRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetOutput(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetQuery(this AzureAmsAccountStorageRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetQuery(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings SetVerbose(this AzureAmsAccountStorageRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageRemoveSettings ResetVerbose(this AzureAmsAccountStorageRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsAccountStorageSyncStorageKeysSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsAccountStorageSyncStorageKeysSettingsExtensions
    {
        #region Id
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Id"/></em></p>
        ///   <p>The ID of the storage account resource.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetId(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string id)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = id;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Id"/></em></p>
        ///   <p>The ID of the storage account resource.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetId(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Id = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetAccountName(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetAccountName(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings AddIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings AddIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ClearIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings RemoveIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings RemoveIds(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetResourceGroup(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetResourceGroup(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetSubscription(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetSubscription(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetDebug(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetDebug(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetHelp(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetHelp(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetOutput(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetOutput(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetQuery(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetQuery(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings SetVerbose(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsAccountStorageSyncStorageKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsAccountStorageSyncStorageKeysSettings ResetVerbose(this AzureAmsAccountStorageSyncStorageKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyOptionAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyOptionAddSettingsExtensions
    {
        #region PolicyOptionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PolicyOptionName"/></em></p>
        ///   <p>The content key policy option name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetPolicyOptionName(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string policyOptionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionName = policyOptionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PolicyOptionName"/></em></p>
        ///   <p>The content key policy option name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetPolicyOptionName(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionName = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAccountName(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetAccountName(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ClearIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveIds(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetName(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetName(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetResourceGroup(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetResourceGroup(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetSubscription(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetSubscription(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region ClearKeyConfiguration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ClearKeyConfiguration"/></em></p>
        ///   <p>Use Clear Key configuration, a.k.a AES encryption. It's intended for non-DRM keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetClearKeyConfiguration(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string clearKeyConfiguration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClearKeyConfiguration = clearKeyConfiguration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.ClearKeyConfiguration"/></em></p>
        ///   <p>Use Clear Key configuration, a.k.a AES encryption. It's intended for non-DRM keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetClearKeyConfiguration(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClearKeyConfiguration = null;
            return toolSettings;
        }
        #endregion
        #region Ask
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ask"/></em></p>
        ///   <p>The key that must be used as FairPlay Application Secret Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAsk(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string ask)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ask = ask;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Ask"/></em></p>
        ///   <p>The key that must be used as FairPlay Application Secret Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetAsk(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ask = null;
            return toolSettings;
        }
        #endregion
        #region FairPlayPfx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfx"/></em></p>
        ///   <p>The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetFairPlayPfx(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string fairPlayPfx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfx = fairPlayPfx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfx"/></em></p>
        ///   <p>The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetFairPlayPfx(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfx = null;
            return toolSettings;
        }
        #endregion
        #region FairPlayPfxPassword
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfxPassword"/></em></p>
        ///   <p>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetFairPlayPfxPassword(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string fairPlayPfxPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfxPassword = fairPlayPfxPassword;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.FairPlayPfxPassword"/></em></p>
        ///   <p>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetFairPlayPfxPassword(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfxPassword = null;
            return toolSettings;
        }
        #endregion
        #region RentalAndLeaseKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalAndLeaseKeyType"/></em></p>
        ///   <p>The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetRentalAndLeaseKeyType(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string rentalAndLeaseKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalAndLeaseKeyType = rentalAndLeaseKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalAndLeaseKeyType"/></em></p>
        ///   <p>The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetRentalAndLeaseKeyType(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalAndLeaseKeyType = null;
            return toolSettings;
        }
        #endregion
        #region RentalDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalDuration"/></em></p>
        ///   <p>The rental duration. Must be greater than or equal to 0.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetRentalDuration(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string rentalDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalDuration = rentalDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.RentalDuration"/></em></p>
        ///   <p>The rental duration. Must be greater than or equal to 0.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetRentalDuration(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalDuration = null;
            return toolSettings;
        }
        #endregion
        #region OpenRestriction
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenRestriction"/></em></p>
        ///   <p>Use open restriction. License or key will be delivered on every request. Not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetOpenRestriction(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string openRestriction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenRestriction = openRestriction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenRestriction"/></em></p>
        ///   <p>Use open restriction. License or key will be delivered on every request. Not recommended for production environments.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetOpenRestriction(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenRestriction = null;
            return toolSettings;
        }
        #endregion
        #region PlayReadyTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PlayReadyTemplate"/></em></p>
        ///   <p>JSON PlayReady license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetPlayReadyTemplate(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string playReadyTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlayReadyTemplate = playReadyTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.PlayReadyTemplate"/></em></p>
        ///   <p>JSON PlayReady license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetPlayReadyTemplate(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlayReadyTemplate = null;
            return toolSettings;
        }
        #endregion
        #region AltRsaTokenKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal = altRsaTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal = altRsaTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal.AddRange(altRsaTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal.AddRange(altRsaTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ClearAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltRsaTokenKeysInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altRsaTokenKeys);
            toolSettings.AltRsaTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltRsaTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate rsa token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveAltRsaTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altRsaTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altRsaTokenKeys);
            toolSettings.AltRsaTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AltSymmetricTokenKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal = altSymmetricTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal = altSymmetricTokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal.AddRange(altSymmetricTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal.AddRange(altSymmetricTokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ClearAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltSymmetricTokenKeysInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altSymmetricTokenKeys);
            toolSettings.AltSymmetricTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltSymmetricTokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate symmetric token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveAltSymmetricTokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altSymmetricTokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altSymmetricTokenKeys);
            toolSettings.AltSymmetricTokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AltX509TokenKeys
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal = altX509TokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/> to a new list</em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal = altX509TokenKeys.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal.AddRange(altX509TokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal.AddRange(altX509TokenKeys);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ClearAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AltX509TokenKeysInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altX509TokenKeys);
            toolSettings.AltX509TokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.AltX509TokenKeys"/></em></p>
        ///   <p>Space-separated list of alternate x509 certificate token keys.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveAltX509TokenKeys(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> altX509TokenKeys)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(altX509TokenKeys);
            toolSettings.AltX509TokenKeysInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Audience
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Audience"/></em></p>
        ///   <p>The audience for the token.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetAudience(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string audience)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Audience = audience;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Audience"/></em></p>
        ///   <p>The audience for the token.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetAudience(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Audience = null;
            return toolSettings;
        }
        #endregion
        #region Issuer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Issuer"/></em></p>
        ///   <p>The token issuer.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetIssuer(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string issuer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Issuer = issuer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Issuer"/></em></p>
        ///   <p>The token issuer.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetIssuer(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Issuer = null;
            return toolSettings;
        }
        #endregion
        #region OpenIdConnectDiscoveryDocument
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenIdConnectDiscoveryDocument"/></em></p>
        ///   <p>The OpenID connect discovery document.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetOpenIdConnectDiscoveryDocument(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string openIdConnectDiscoveryDocument)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.OpenIdConnectDiscoveryDocument"/></em></p>
        ///   <p>The OpenID connect discovery document.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetOpenIdConnectDiscoveryDocument(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenIdConnectDiscoveryDocument = null;
            return toolSettings;
        }
        #endregion
        #region TokenClaims
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/> to a new list</em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal = tokenClaims.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/> to a new list</em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal = tokenClaims.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.AddRange(tokenClaims);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings AddTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.AddRange(tokenClaims);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ClearTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tokenClaims);
            toolSettings.TokenClaimsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings RemoveTokenClaims(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tokenClaims);
            toolSettings.TokenClaimsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TokenKey
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKey"/></em></p>
        ///   <p>Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetTokenKey(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string tokenKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKey = tokenKey;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKey"/></em></p>
        ///   <p>Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetTokenKey(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKey = null;
            return toolSettings;
        }
        #endregion
        #region TokenKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetTokenKeyType(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string tokenKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKeyType = tokenKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetTokenKeyType(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKeyType = null;
            return toolSettings;
        }
        #endregion
        #region TokenType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenType"/></em></p>
        ///   <p>The type of token. Allowed values: Jwt, Swt.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetTokenType(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string tokenType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenType = tokenType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.TokenType"/></em></p>
        ///   <p>The type of token. Allowed values: Jwt, Swt.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetTokenType(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenType = null;
            return toolSettings;
        }
        #endregion
        #region WidevineTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.WidevineTemplate"/></em></p>
        ///   <p>JSON Widevine license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetWidevineTemplate(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string widevineTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WidevineTemplate = widevineTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.WidevineTemplate"/></em></p>
        ///   <p>JSON Widevine license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetWidevineTemplate(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WidevineTemplate = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetDebug(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetDebug(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetHelp(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetHelp(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetOutput(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetOutput(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetQuery(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetQuery(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings SetVerbose(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionAddSettings ResetVerbose(this AzureAmsContentKeyPolicyOptionAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyOptionRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyOptionRemoveSettingsExtensions
    {
        #region PolicyOptionId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.PolicyOptionId"/></em></p>
        ///   <p>The content key policy option identifier. This value can be obtained from "policyOptionId" property by running a show operation on a content key policy resource.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetPolicyOptionId(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string policyOptionId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionId = policyOptionId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.PolicyOptionId"/></em></p>
        ///   <p>The content key policy option identifier. This value can be obtained from "policyOptionId" property by running a show operation on a content key policy resource.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetPolicyOptionId(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionId = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetAccountName(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetAccountName(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings AddIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings AddIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ClearIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings RemoveIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings RemoveIds(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetName(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetName(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetResourceGroup(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetResourceGroup(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetSubscription(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetSubscription(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetDebug(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetDebug(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetHelp(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetHelp(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetOutput(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetOutput(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetQuery(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetQuery(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings SetVerbose(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionRemoveSettings ResetVerbose(this AzureAmsContentKeyPolicyOptionRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsContentKeyPolicyOptionUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsContentKeyPolicyOptionUpdateSettingsExtensions
    {
        #region PolicyOptionId
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionId"/></em></p>
        ///   <p>The content key policy option identifier. This value can be obtained from "policyOptionId" property by running a show operation on a content key policy resource.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetPolicyOptionId(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string policyOptionId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionId = policyOptionId;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionId"/></em></p>
        ///   <p>The content key policy option identifier. This value can be obtained from "policyOptionId" property by running a show operation on a content key policy resource.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetPolicyOptionId(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionId = null;
            return toolSettings;
        }
        #endregion
        #region PolicyOptionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionName"/></em></p>
        ///   <p>The content key policy option name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetPolicyOptionName(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string policyOptionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionName = policyOptionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PolicyOptionName"/></em></p>
        ///   <p>The content key policy option name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetPolicyOptionName(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PolicyOptionName = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetAccountName(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetAccountName(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings AddIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings AddIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ClearIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings RemoveIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings RemoveIds(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetName(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Name"/></em></p>
        ///   <p>The content key policy name.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetName(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetResourceGroup(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetResourceGroup(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetSubscription(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetSubscription(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Ask
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ask"/></em></p>
        ///   <p>The key that must be used as FairPlay Application Secret Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetAsk(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string ask)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ask = ask;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Ask"/></em></p>
        ///   <p>The key that must be used as FairPlay Application Secret Key.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetAsk(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ask = null;
            return toolSettings;
        }
        #endregion
        #region FairPlayPfx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfx"/></em></p>
        ///   <p>The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetFairPlayPfx(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string fairPlayPfx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfx = fairPlayPfx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfx"/></em></p>
        ///   <p>The filepath to a FairPlay certificate file in PKCS 12 (pfx) format (including private key).</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetFairPlayPfx(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfx = null;
            return toolSettings;
        }
        #endregion
        #region FairPlayPfxPassword
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfxPassword"/></em></p>
        ///   <p>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetFairPlayPfxPassword(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string fairPlayPfxPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfxPassword = fairPlayPfxPassword;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.FairPlayPfxPassword"/></em></p>
        ///   <p>The password encrypting FairPlay certificate in PKCS 12 (pfx) format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetFairPlayPfxPassword(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FairPlayPfxPassword = null;
            return toolSettings;
        }
        #endregion
        #region RentalAndLeaseKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalAndLeaseKeyType"/></em></p>
        ///   <p>The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetRentalAndLeaseKeyType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string rentalAndLeaseKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalAndLeaseKeyType = rentalAndLeaseKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalAndLeaseKeyType"/></em></p>
        ///   <p>The rental and lease key type. Available values: Undefined, PersistentUnlimited, PersistentLimited.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetRentalAndLeaseKeyType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalAndLeaseKeyType = null;
            return toolSettings;
        }
        #endregion
        #region RentalDuration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalDuration"/></em></p>
        ///   <p>The rental duration. Must be greater than or equal to 0.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetRentalDuration(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string rentalDuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalDuration = rentalDuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.RentalDuration"/></em></p>
        ///   <p>The rental duration. Must be greater than or equal to 0.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetRentalDuration(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RentalDuration = null;
            return toolSettings;
        }
        #endregion
        #region PlayReadyTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PlayReadyTemplate"/></em></p>
        ///   <p>JSON PlayReady license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetPlayReadyTemplate(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string playReadyTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlayReadyTemplate = playReadyTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.PlayReadyTemplate"/></em></p>
        ///   <p>JSON PlayReady license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetPlayReadyTemplate(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlayReadyTemplate = null;
            return toolSettings;
        }
        #endregion
        #region AddAltTokenKey
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKey"/></em></p>
        ///   <p>Creates an alternate token key with either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --add-alt-token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetAddAltTokenKey(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string addAltTokenKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddAltTokenKey = addAltTokenKey;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKey"/></em></p>
        ///   <p>Creates an alternate token key with either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --add-alt-token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetAddAltTokenKey(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddAltTokenKey = null;
            return toolSettings;
        }
        #endregion
        #region AddAltTokenKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the alternate verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetAddAltTokenKeyType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string addAltTokenKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddAltTokenKeyType = addAltTokenKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.AddAltTokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the alternate verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetAddAltTokenKeyType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddAltTokenKeyType = null;
            return toolSettings;
        }
        #endregion
        #region Audience
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Audience"/></em></p>
        ///   <p>The audience for the token.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetAudience(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string audience)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Audience = audience;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Audience"/></em></p>
        ///   <p>The audience for the token.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetAudience(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Audience = null;
            return toolSettings;
        }
        #endregion
        #region Issuer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Issuer"/></em></p>
        ///   <p>The token issuer.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetIssuer(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string issuer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Issuer = issuer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Issuer"/></em></p>
        ///   <p>The token issuer.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetIssuer(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Issuer = null;
            return toolSettings;
        }
        #endregion
        #region OpenIdConnectDiscoveryDocument
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.OpenIdConnectDiscoveryDocument"/></em></p>
        ///   <p>The OpenID connect discovery document.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetOpenIdConnectDiscoveryDocument(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string openIdConnectDiscoveryDocument)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.OpenIdConnectDiscoveryDocument"/></em></p>
        ///   <p>The OpenID connect discovery document.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetOpenIdConnectDiscoveryDocument(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OpenIdConnectDiscoveryDocument = null;
            return toolSettings;
        }
        #endregion
        #region TokenClaims
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/> to a new list</em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal = tokenClaims.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/> to a new list</em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal = tokenClaims.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings AddTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.AddRange(tokenClaims);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings AddTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.AddRange(tokenClaims);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ClearTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenClaimsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings RemoveTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, params string[] tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tokenClaims);
            toolSettings.TokenClaimsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenClaims"/></em></p>
        ///   <p>Space-separated required token claims in '[key=value]' format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings RemoveTokenClaims(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, IEnumerable<string> tokenClaims)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tokenClaims);
            toolSettings.TokenClaimsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TokenKey
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKey"/></em></p>
        ///   <p>Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetTokenKey(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string tokenKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKey = tokenKey;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKey"/></em></p>
        ///   <p>Either a string (for symmetric key) or a filepath to a certificate (x509) or public key (rsa). Must be used in conjunction with --token-key-type.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetTokenKey(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKey = null;
            return toolSettings;
        }
        #endregion
        #region TokenKeyType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetTokenKeyType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string tokenKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKeyType = tokenKeyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenKeyType"/></em></p>
        ///   <p>The type of the token key to be used for the primary verification key. Allowed values: Symmetric, RSA, X509.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetTokenKeyType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenKeyType = null;
            return toolSettings;
        }
        #endregion
        #region TokenType
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenType"/></em></p>
        ///   <p>The type of token. Allowed values: Jwt, Swt.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetTokenType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string tokenType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenType = tokenType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.TokenType"/></em></p>
        ///   <p>The type of token. Allowed values: Jwt, Swt.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetTokenType(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TokenType = null;
            return toolSettings;
        }
        #endregion
        #region WidevineTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.WidevineTemplate"/></em></p>
        ///   <p>JSON Widevine license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetWidevineTemplate(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string widevineTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WidevineTemplate = widevineTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.WidevineTemplate"/></em></p>
        ///   <p>JSON Widevine license template. Use @{file} to load from a file.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetWidevineTemplate(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WidevineTemplate = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetDebug(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetDebug(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetHelp(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetHelp(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetOutput(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetOutput(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetQuery(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetQuery(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings SetVerbose(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsContentKeyPolicyOptionUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsContentKeyPolicyOptionUpdateSettings ResetVerbose(this AzureAmsContentKeyPolicyOptionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointAkamaiAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointAkamaiAddSettingsExtensions
    {
        #region Base64Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Base64Key"/></em></p>
        ///   <p>Base64-encoded authentication key that will be used by the CDN. The authentication key provided by Akamai is an ASCII encoded string, and must be converted to bytes and then base64 encoded.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetBase64Key(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string base64Key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Base64Key = base64Key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Base64Key"/></em></p>
        ///   <p>Base64-encoded authentication key that will be used by the CDN. The authentication key provided by Akamai is an ASCII encoded string, and must be converted to bytes and then base64 encoded.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetBase64Key(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Base64Key = null;
            return toolSettings;
        }
        #endregion
        #region Expiration
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Expiration"/></em></p>
        ///   <p>The ISO 8601 DateTime value that specifies when the Akamai authentication expires.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetExpiration(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string expiration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiration = expiration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Expiration"/></em></p>
        ///   <p>The ISO 8601 DateTime value that specifies when the Akamai authentication expires.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetExpiration(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Expiration = null;
            return toolSettings;
        }
        #endregion
        #region Identifier
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Identifier"/></em></p>
        ///   <p>The identifier for the authentication key. This is the nonce provided by Akamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetIdentifier(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string identifier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identifier = identifier;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Identifier"/></em></p>
        ///   <p>The identifier for the authentication key. This is the nonce provided by Akamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetIdentifier(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identifier = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetAccountName(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetAccountName(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings AddIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings AddIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ClearIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings RemoveIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings RemoveIds(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetName(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetName(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetResourceGroup(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetResourceGroup(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetSubscription(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetSubscription(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetDebug(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetDebug(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetHelp(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetHelp(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetOutput(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetOutput(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetQuery(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetQuery(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings SetVerbose(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiAddSettings ResetVerbose(this AzureAmsStreamingEndpointAkamaiAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsStreamingEndpointAkamaiRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsStreamingEndpointAkamaiRemoveSettingsExtensions
    {
        #region Identifier
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Identifier"/></em></p>
        ///   <p>The identifier for the authentication key. This is the nonce provided by Akamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetIdentifier(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string identifier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identifier = identifier;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Identifier"/></em></p>
        ///   <p>The identifier for the authentication key. This is the nonce provided by Akamai.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetIdentifier(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Identifier = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetAccountName(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetAccountName(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings AddIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings AddIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ClearIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings RemoveIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings RemoveIds(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetName(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Name"/></em></p>
        ///   <p>The name of the streaming endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetName(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetResourceGroup(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetResourceGroup(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetSubscription(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetSubscription(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetDebug(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetDebug(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetHelp(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetHelp(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetOutput(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetOutput(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetQuery(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetQuery(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings SetVerbose(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsStreamingEndpointAkamaiRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsStreamingEndpointAkamaiRemoveSettings ResetVerbose(this AzureAmsStreamingEndpointAkamaiRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformOutputAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformOutputAddSettingsExtensions
    {
        #region Preset
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Preset"/></em></p>
        ///   <p>Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the transform output. Allowed values: H264SingleBitrateSD, H264SingleBitrate720p, H264SingleBitrate1080p, AdaptiveStreaming, AACGoodQualityAudio, ContentAwareEncodingExperimental, H264MultipleBitrate1080p, H264MultipleBitrate720p, H264MultipleBitrateSD, AudioAnalyzer, VideoAnalyzer. In addition to the allowed values, you can also pass a path to a custom Standard Encoder preset JSON file. See <a href="https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset">https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset</a> for further details on the settings to use to build a custom preset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetPreset(this AzureAmsTransformOutputAddSettings toolSettings, string preset)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preset = preset;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Preset"/></em></p>
        ///   <p>Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the transform output. Allowed values: H264SingleBitrateSD, H264SingleBitrate720p, H264SingleBitrate1080p, AdaptiveStreaming, AACGoodQualityAudio, ContentAwareEncodingExperimental, H264MultipleBitrate1080p, H264MultipleBitrate720p, H264MultipleBitrateSD, AudioAnalyzer, VideoAnalyzer. In addition to the allowed values, you can also pass a path to a custom Standard Encoder preset JSON file. See <a href="https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset">https://docs.microsoft.com/rest/api/media/transforms/createorupdate#standardencoderpreset</a> for further details on the settings to use to build a custom preset.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetPreset(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preset = null;
            return toolSettings;
        }
        #endregion
        #region OnError
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.OnError"/></em></p>
        ///   <p>A Transform can define more than one output. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetOnError(this AzureAmsTransformOutputAddSettings toolSettings, AmsTransformOnError onError)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnError = onError;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.OnError"/></em></p>
        ///   <p>A Transform can define more than one output. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetOnError(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OnError = null;
            return toolSettings;
        }
        #endregion
        #region RelativePriority
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.RelativePriority"/></em></p>
        ///   <p>Sets the relative priority of the transform outputs within a transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetRelativePriority(this AzureAmsTransformOutputAddSettings toolSettings, AmsJobPriority relativePriority)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RelativePriority = relativePriority;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.RelativePriority"/></em></p>
        ///   <p>Sets the relative priority of the transform outputs within a transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetRelativePriority(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RelativePriority = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetAccountName(this AzureAmsTransformOutputAddSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetAccountName(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetIds(this AzureAmsTransformOutputAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetIds(this AzureAmsTransformOutputAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformOutputAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings AddIds(this AzureAmsTransformOutputAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformOutputAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings AddIds(this AzureAmsTransformOutputAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsTransformOutputAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ClearIds(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformOutputAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings RemoveIds(this AzureAmsTransformOutputAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformOutputAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings RemoveIds(this AzureAmsTransformOutputAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetName(this AzureAmsTransformOutputAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetName(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetResourceGroup(this AzureAmsTransformOutputAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetResourceGroup(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetSubscription(this AzureAmsTransformOutputAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetSubscription(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region AudioLanguage
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.AudioLanguage"/></em></p>
        ///   <p>The language for the audio payload in the input using the BCP-47 format of "language tag-region" (e.g: en-US). If not specified, automatic language detection would be employed. This feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to English. Allowed values: en-US, en-GB, es-ES, es-MX, fr-FR, it-IT, ja-JP, pt-BR, zh-CN, de-DE, ar-EG, ru-RU, hi-IN.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetAudioLanguage(this AzureAmsTransformOutputAddSettings toolSettings, string audioLanguage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AudioLanguage = audioLanguage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.AudioLanguage"/></em></p>
        ///   <p>The language for the audio payload in the input using the BCP-47 format of "language tag-region" (e.g: en-US). If not specified, automatic language detection would be employed. This feature currently supports English, Chinese, French, German, Italian, Japanese, Spanish, Russian, and Portuguese. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to English. Allowed values: en-US, en-GB, es-ES, es-MX, fr-FR, it-IT, ja-JP, pt-BR, zh-CN, de-DE, ar-EG, ru-RU, hi-IN.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetAudioLanguage(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AudioLanguage = null;
            return toolSettings;
        }
        #endregion
        #region InsightsToExtract
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.InsightsToExtract"/></em></p>
        ///   <p>The type of insights to be extracted. If not set then the type will be selected based on the content type. If the content is audio only then only audio insights will be extracted and if it is video only video insights will be extracted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetInsightsToExtract(this AzureAmsTransformOutputAddSettings toolSettings, AmsTransformInsightsToExtract insightsToExtract)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InsightsToExtract = insightsToExtract;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.InsightsToExtract"/></em></p>
        ///   <p>The type of insights to be extracted. If not set then the type will be selected based on the content type. If the content is audio only then only audio insights will be extracted and if it is video only video insights will be extracted.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetInsightsToExtract(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InsightsToExtract = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetDebug(this AzureAmsTransformOutputAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetDebug(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetHelp(this AzureAmsTransformOutputAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetHelp(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetOutput(this AzureAmsTransformOutputAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetOutput(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetQuery(this AzureAmsTransformOutputAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetQuery(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings SetVerbose(this AzureAmsTransformOutputAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputAddSettings ResetVerbose(this AzureAmsTransformOutputAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureAmsTransformOutputRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureAmsTransformOutputRemoveSettingsExtensions
    {
        #region OutputIndex
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.OutputIndex"/></em></p>
        ///   <p>The element index of the output to remove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetOutputIndex(this AzureAmsTransformOutputRemoveSettings toolSettings, string outputIndex)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputIndex = outputIndex;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.OutputIndex"/></em></p>
        ///   <p>The element index of the output to remove.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetOutputIndex(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputIndex = null;
            return toolSettings;
        }
        #endregion
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetAccountName(this AzureAmsTransformOutputRemoveSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.AccountName"/></em></p>
        ///   <p>The name of the Azure Media Services account.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetAccountName(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetIds(this AzureAmsTransformOutputRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetIds(this AzureAmsTransformOutputRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings AddIds(this AzureAmsTransformOutputRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings AddIds(this AzureAmsTransformOutputRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ClearIds(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings RemoveIds(this AzureAmsTransformOutputRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureAmsTransformOutputRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings RemoveIds(this AzureAmsTransformOutputRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetName(this AzureAmsTransformOutputRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Name"/></em></p>
        ///   <p>The name of the transform.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetName(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetResourceGroup(this AzureAmsTransformOutputRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetResourceGroup(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetSubscription(this AzureAmsTransformOutputRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetSubscription(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetDebug(this AzureAmsTransformOutputRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetDebug(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetHelp(this AzureAmsTransformOutputRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetHelp(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetOutput(this AzureAmsTransformOutputRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetOutput(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetQuery(this AzureAmsTransformOutputRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetQuery(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureAmsTransformOutputRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings SetVerbose(this AzureAmsTransformOutputRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureAmsTransformOutputRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureAmsTransformOutputRemoveSettings ResetVerbose(this AzureAmsTransformOutputRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AmsAssetGetSasUrlsPermissions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AmsAssetGetSasUrlsPermissions>))]
    public partial class AmsAssetGetSasUrlsPermissions : Enumeration
    {
        public static AmsAssetGetSasUrlsPermissions read = new AmsAssetGetSasUrlsPermissions { Value = "read" };
        public static AmsAssetGetSasUrlsPermissions readwrite = new AmsAssetGetSasUrlsPermissions { Value = "readwrite" };
        public static AmsAssetGetSasUrlsPermissions readwritedelete = new AmsAssetGetSasUrlsPermissions { Value = "readwritedelete" };
    }
    #endregion
    #region AmsJobPriority
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AmsJobPriority>))]
    public partial class AmsJobPriority : Enumeration
    {
        public static AmsJobPriority high = new AmsJobPriority { Value = "high" };
        public static AmsJobPriority low = new AmsJobPriority { Value = "low" };
        public static AmsJobPriority normal = new AmsJobPriority { Value = "normal" };
    }
    #endregion
    #region AmsLiveEventCreateStreamOptions
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AmsLiveEventCreateStreamOptions>))]
    public partial class AmsLiveEventCreateStreamOptions : Enumeration
    {
        public static AmsLiveEventCreateStreamOptions default_ = new AmsLiveEventCreateStreamOptions { Value = "default" };
        public static AmsLiveEventCreateStreamOptions lowlatency = new AmsLiveEventCreateStreamOptions { Value = "lowlatency" };
    }
    #endregion
    #region AmsLiveEventCreateStreamingProtocol
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AmsLiveEventCreateStreamingProtocol>))]
    public partial class AmsLiveEventCreateStreamingProtocol : Enumeration
    {
        public static AmsLiveEventCreateStreamingProtocol fragmentedmp4 = new AmsLiveEventCreateStreamingProtocol { Value = "fragmentedmp4" };
        public static AmsLiveEventCreateStreamingProtocol rtmp = new AmsLiveEventCreateStreamingProtocol { Value = "rtmp" };
    }
    #endregion
    #region AmsTransformOnError
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AmsTransformOnError>))]
    public partial class AmsTransformOnError : Enumeration
    {
        public static AmsTransformOnError continuejob = new AmsTransformOnError { Value = "continuejob" };
        public static AmsTransformOnError stopprocessingjob = new AmsTransformOnError { Value = "stopprocessingjob" };
    }
    #endregion
    #region AmsTransformInsightsToExtract
    /// <summary>
    ///   Used within <see cref="AzureAmsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<AmsTransformInsightsToExtract>))]
    public partial class AmsTransformInsightsToExtract : Enumeration
    {
        public static AmsTransformInsightsToExtract allinsights = new AmsTransformInsightsToExtract { Value = "allinsights" };
        public static AmsTransformInsightsToExtract audioinsightsonly = new AmsTransformInsightsToExtract { Value = "audioinsightsonly" };
        public static AmsTransformInsightsToExtract videoinsightsonly = new AmsTransformInsightsToExtract { Value = "videoinsightsonly" };
    }
    #endregion
}
