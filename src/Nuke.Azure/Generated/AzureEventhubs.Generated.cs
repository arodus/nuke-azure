// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureEventhubs.json
// Generated with Nuke.CodeGeneration version 0.20.1 (Windows,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsTasks
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public static string AzureEventhubsPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("AZUREEVENTHUBS_EXE") ??
            ToolPathResolver.GetPathExecutable("az");
        public static Action<OutputType, string> AzureEventhubsLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubs(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureEventhubsPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, AzureEventhubsLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubs(AzureEventhubsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubs(Configure<AzureEventhubsSettings> configurator)
        {
            return AzureEventhubs(configurator(new AzureEventhubsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubs(CombinatorialConfigure<AzureEventhubsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubs, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubCreate(AzureEventhubsEventhubCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--archive-name-format</c> via <see cref="AzureEventhubsEventhubCreateSettings.ArchiveNameFormat"/></li>
        ///     <li><c>--blob-container</c> via <see cref="AzureEventhubsEventhubCreateSettings.BlobContainer"/></li>
        ///     <li><c>--capture-interval</c> via <see cref="AzureEventhubsEventhubCreateSettings.CaptureInterval"/></li>
        ///     <li><c>--capture-size-limit</c> via <see cref="AzureEventhubsEventhubCreateSettings.CaptureSizeLimit"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubCreateSettings.Debug"/></li>
        ///     <li><c>--destination-name</c> via <see cref="AzureEventhubsEventhubCreateSettings.DestinationName"/></li>
        ///     <li><c>--enable-capture</c> via <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubCreateSettings.Help"/></li>
        ///     <li><c>--message-retention</c> via <see cref="AzureEventhubsEventhubCreateSettings.MessageRetention"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubCreateSettings.Output"/></li>
        ///     <li><c>--partition-count</c> via <see cref="AzureEventhubsEventhubCreateSettings.PartitionCount"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--skip-empty-archives</c> via <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></li>
        ///     <li><c>--status</c> via <see cref="AzureEventhubsEventhubCreateSettings.Status"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureEventhubsEventhubCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubCreate(Configure<AzureEventhubsEventhubCreateSettings> configurator)
        {
            return AzureEventhubsEventhubCreate(configurator(new AzureEventhubsEventhubCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--archive-name-format</c> via <see cref="AzureEventhubsEventhubCreateSettings.ArchiveNameFormat"/></li>
        ///     <li><c>--blob-container</c> via <see cref="AzureEventhubsEventhubCreateSettings.BlobContainer"/></li>
        ///     <li><c>--capture-interval</c> via <see cref="AzureEventhubsEventhubCreateSettings.CaptureInterval"/></li>
        ///     <li><c>--capture-size-limit</c> via <see cref="AzureEventhubsEventhubCreateSettings.CaptureSizeLimit"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubCreateSettings.Debug"/></li>
        ///     <li><c>--destination-name</c> via <see cref="AzureEventhubsEventhubCreateSettings.DestinationName"/></li>
        ///     <li><c>--enable-capture</c> via <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubCreateSettings.Help"/></li>
        ///     <li><c>--message-retention</c> via <see cref="AzureEventhubsEventhubCreateSettings.MessageRetention"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubCreateSettings.Output"/></li>
        ///     <li><c>--partition-count</c> via <see cref="AzureEventhubsEventhubCreateSettings.PartitionCount"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--skip-empty-archives</c> via <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></li>
        ///     <li><c>--status</c> via <see cref="AzureEventhubsEventhubCreateSettings.Status"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureEventhubsEventhubCreateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubCreate(CombinatorialConfigure<AzureEventhubsEventhubCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubCreate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubDelete(AzureEventhubsEventhubDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubDelete(Configure<AzureEventhubsEventhubDeleteSettings> configurator)
        {
            return AzureEventhubsEventhubDelete(configurator(new AzureEventhubsEventhubDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubDelete(CombinatorialConfigure<AzureEventhubsEventhubDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubDelete, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubList(AzureEventhubsEventhubListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubListSettings.ResourceGroup"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureEventhubsEventhubListSettings.Skip"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureEventhubsEventhubListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubList(Configure<AzureEventhubsEventhubListSettings> configurator)
        {
            return AzureEventhubsEventhubList(configurator(new AzureEventhubsEventhubListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubListSettings.ResourceGroup"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureEventhubsEventhubListSettings.Skip"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureEventhubsEventhubListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubList(CombinatorialConfigure<AzureEventhubsEventhubListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubShow(AzureEventhubsEventhubShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubShow(Configure<AzureEventhubsEventhubShowSettings> configurator)
        {
            return AzureEventhubsEventhubShow(configurator(new AzureEventhubsEventhubShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubShow(CombinatorialConfigure<AzureEventhubsEventhubShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubUpdate(AzureEventhubsEventhubUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Add"/></li>
        ///     <li><c>--archive-name-format</c> via <see cref="AzureEventhubsEventhubUpdateSettings.ArchiveNameFormat"/></li>
        ///     <li><c>--blob-container</c> via <see cref="AzureEventhubsEventhubUpdateSettings.BlobContainer"/></li>
        ///     <li><c>--capture-interval</c> via <see cref="AzureEventhubsEventhubUpdateSettings.CaptureInterval"/></li>
        ///     <li><c>--capture-size-limit</c> via <see cref="AzureEventhubsEventhubUpdateSettings.CaptureSizeLimit"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Debug"/></li>
        ///     <li><c>--destination-name</c> via <see cref="AzureEventhubsEventhubUpdateSettings.DestinationName"/></li>
        ///     <li><c>--enable-capture</c> via <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsEventhubUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></li>
        ///     <li><c>--message-retention</c> via <see cref="AzureEventhubsEventhubUpdateSettings.MessageRetention"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Output"/></li>
        ///     <li><c>--partition-count</c> via <see cref="AzureEventhubsEventhubUpdateSettings.PartitionCount"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Set"/></li>
        ///     <li><c>--skip-empty-archives</c> via <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></li>
        ///     <li><c>--status</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Status"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureEventhubsEventhubUpdateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubUpdate(Configure<AzureEventhubsEventhubUpdateSettings> configurator)
        {
            return AzureEventhubsEventhubUpdate(configurator(new AzureEventhubsEventhubUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Add"/></li>
        ///     <li><c>--archive-name-format</c> via <see cref="AzureEventhubsEventhubUpdateSettings.ArchiveNameFormat"/></li>
        ///     <li><c>--blob-container</c> via <see cref="AzureEventhubsEventhubUpdateSettings.BlobContainer"/></li>
        ///     <li><c>--capture-interval</c> via <see cref="AzureEventhubsEventhubUpdateSettings.CaptureInterval"/></li>
        ///     <li><c>--capture-size-limit</c> via <see cref="AzureEventhubsEventhubUpdateSettings.CaptureSizeLimit"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Debug"/></li>
        ///     <li><c>--destination-name</c> via <see cref="AzureEventhubsEventhubUpdateSettings.DestinationName"/></li>
        ///     <li><c>--enable-capture</c> via <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsEventhubUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></li>
        ///     <li><c>--message-retention</c> via <see cref="AzureEventhubsEventhubUpdateSettings.MessageRetention"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Output"/></li>
        ///     <li><c>--partition-count</c> via <see cref="AzureEventhubsEventhubUpdateSettings.PartitionCount"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Set"/></li>
        ///     <li><c>--skip-empty-archives</c> via <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></li>
        ///     <li><c>--status</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Status"/></li>
        ///     <li><c>--storage-account</c> via <see cref="AzureEventhubsEventhubUpdateSettings.StorageAccount"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubUpdate(CombinatorialConfigure<AzureEventhubsEventhubUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubUpdate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasBreakPair(AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasBreakPairSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasBreakPair(Configure<AzureEventhubsGeorecoveryAliasBreakPairSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasBreakPair(configurator(new AzureEventhubsGeorecoveryAliasBreakPairSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasBreakPairSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasBreakPair(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasBreakPairSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasBreakPair, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasDelete(AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasDelete(Configure<AzureEventhubsGeorecoveryAliasDeleteSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasDelete(configurator(new AzureEventhubsGeorecoveryAliasDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasDelete(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasDelete, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasExists(AzureEventhubsGeorecoveryAliasExistsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasExistsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasExists(Configure<AzureEventhubsGeorecoveryAliasExistsSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasExists(configurator(new AzureEventhubsGeorecoveryAliasExistsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasExistsSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasExists(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasExistsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasExists, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasFailOver(AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasFailOverSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasFailOver(Configure<AzureEventhubsGeorecoveryAliasFailOverSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasFailOver(configurator(new AzureEventhubsGeorecoveryAliasFailOverSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasFailOverSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasFailOver(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasFailOverSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasFailOver, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasList(AzureEventhubsGeorecoveryAliasListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasList(Configure<AzureEventhubsGeorecoveryAliasListSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasList(configurator(new AzureEventhubsGeorecoveryAliasListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasList(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasSet(AzureEventhubsGeorecoveryAliasSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Alias"/></li>
        ///     <li><c>--alternate-name</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.AlternateName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Output"/></li>
        ///     <li><c>--partner-namespace</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.PartnerNamespace"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasSet(Configure<AzureEventhubsGeorecoveryAliasSetSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasSet(configurator(new AzureEventhubsGeorecoveryAliasSetSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Alias"/></li>
        ///     <li><c>--alternate-name</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.AlternateName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Output"/></li>
        ///     <li><c>--partner-namespace</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.PartnerNamespace"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasSetSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasSet(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasSet, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasShow(AzureEventhubsGeorecoveryAliasShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasShow(Configure<AzureEventhubsGeorecoveryAliasShowSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasShow(configurator(new AzureEventhubsGeorecoveryAliasShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasShow(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceCreate(AzureEventhubsNamespaceCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--capacity</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Capacity"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureEventhubsNamespaceCreateSettings.DefaultAction"/></li>
        ///     <li><c>--enable-auto-inflate</c> via <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></li>
        ///     <li><c>--enable-kafka</c> via <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Location"/></li>
        ///     <li><c>--maximum-throughput-units</c> via <see cref="AzureEventhubsNamespaceCreateSettings.MaximumThroughputUnits"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceCreate(Configure<AzureEventhubsNamespaceCreateSettings> configurator)
        {
            return AzureEventhubsNamespaceCreate(configurator(new AzureEventhubsNamespaceCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--capacity</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Capacity"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureEventhubsNamespaceCreateSettings.DefaultAction"/></li>
        ///     <li><c>--enable-auto-inflate</c> via <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></li>
        ///     <li><c>--enable-kafka</c> via <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Help"/></li>
        ///     <li><c>--location</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Location"/></li>
        ///     <li><c>--maximum-throughput-units</c> via <see cref="AzureEventhubsNamespaceCreateSettings.MaximumThroughputUnits"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceCreate(CombinatorialConfigure<AzureEventhubsNamespaceCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceCreate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceDelete(AzureEventhubsNamespaceDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceDelete(Configure<AzureEventhubsNamespaceDeleteSettings> configurator)
        {
            return AzureEventhubsNamespaceDelete(configurator(new AzureEventhubsNamespaceDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceDelete(CombinatorialConfigure<AzureEventhubsNamespaceDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceDelete, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceExists(AzureEventhubsNamespaceExistsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceExistsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceExists(Configure<AzureEventhubsNamespaceExistsSettings> configurator)
        {
            return AzureEventhubsNamespaceExists(configurator(new AzureEventhubsNamespaceExistsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceExistsSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceExists(CombinatorialConfigure<AzureEventhubsNamespaceExistsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceExists, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceList(AzureEventhubsNamespaceListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceList(Configure<AzureEventhubsNamespaceListSettings> configurator)
        {
            return AzureEventhubsNamespaceList(configurator(new AzureEventhubsNamespaceListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceList(CombinatorialConfigure<AzureEventhubsNamespaceListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceShow(AzureEventhubsNamespaceShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceShow(Configure<AzureEventhubsNamespaceShowSettings> configurator)
        {
            return AzureEventhubsNamespaceShow(configurator(new AzureEventhubsNamespaceShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceShow(CombinatorialConfigure<AzureEventhubsNamespaceShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceUpdate(AzureEventhubsNamespaceUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Add"/></li>
        ///     <li><c>--capacity</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Capacity"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.DefaultAction"/></li>
        ///     <li><c>--enable-auto-inflate</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></li>
        ///     <li><c>--enable-kafka</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></li>
        ///     <li><c>--maximum-throughput-units</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.MaximumThroughputUnits"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Set"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceUpdate(Configure<AzureEventhubsNamespaceUpdateSettings> configurator)
        {
            return AzureEventhubsNamespaceUpdate(configurator(new AzureEventhubsNamespaceUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Add"/></li>
        ///     <li><c>--capacity</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Capacity"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Debug"/></li>
        ///     <li><c>--default-action</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.DefaultAction"/></li>
        ///     <li><c>--enable-auto-inflate</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></li>
        ///     <li><c>--enable-kafka</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></li>
        ///     <li><c>--maximum-throughput-units</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.MaximumThroughputUnits"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Set"/></li>
        ///     <li><c>--sku</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Sku"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceUpdate(CombinatorialConfigure<AzureEventhubsNamespaceUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceUpdate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleCreate(AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleCreate(Configure<AzureEventhubsEventhubAuthorizationRuleCreateSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleCreate(configurator(new AzureEventhubsEventhubAuthorizationRuleCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleCreate(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleCreate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleDelete(AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleDelete(Configure<AzureEventhubsEventhubAuthorizationRuleDeleteSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleDelete(configurator(new AzureEventhubsEventhubAuthorizationRuleDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleDelete(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleDelete, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleList(AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleList(Configure<AzureEventhubsEventhubAuthorizationRuleListSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleList(configurator(new AzureEventhubsEventhubAuthorizationRuleListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleList(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleShow(AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleShow(Configure<AzureEventhubsEventhubAuthorizationRuleShowSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleShow(configurator(new AzureEventhubsEventhubAuthorizationRuleShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleShow(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleUpdate(AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.EventhubName"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleUpdate(Configure<AzureEventhubsEventhubAuthorizationRuleUpdateSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleUpdate(configurator(new AzureEventhubsEventhubAuthorizationRuleUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.EventhubName"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleUpdate(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleUpdate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupCreate(AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubConsumerGroupCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Subscription"/></li>
        ///     <li><c>--user-metadata</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.UserMetadata"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupCreate(Configure<AzureEventhubsEventhubConsumerGroupCreateSettings> configurator)
        {
            return AzureEventhubsEventhubConsumerGroupCreate(configurator(new AzureEventhubsEventhubConsumerGroupCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Subscription"/></li>
        ///     <li><c>--user-metadata</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.UserMetadata"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubConsumerGroupCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubConsumerGroupCreate(CombinatorialConfigure<AzureEventhubsEventhubConsumerGroupCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubConsumerGroupCreate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupDelete(AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubConsumerGroupDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupDelete(Configure<AzureEventhubsEventhubConsumerGroupDeleteSettings> configurator)
        {
            return AzureEventhubsEventhubConsumerGroupDelete(configurator(new AzureEventhubsEventhubConsumerGroupDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubConsumerGroupDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubConsumerGroupDelete(CombinatorialConfigure<AzureEventhubsEventhubConsumerGroupDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubConsumerGroupDelete, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupList(AzureEventhubsEventhubConsumerGroupListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubConsumerGroupListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.ResourceGroup"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Skip"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupList(Configure<AzureEventhubsEventhubConsumerGroupListSettings> configurator)
        {
            return AzureEventhubsEventhubConsumerGroupList(configurator(new AzureEventhubsEventhubConsumerGroupListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.ResourceGroup"/></li>
        ///     <li><c>--skip</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Skip"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Subscription"/></li>
        ///     <li><c>--top</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Top"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubConsumerGroupListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubConsumerGroupList(CombinatorialConfigure<AzureEventhubsEventhubConsumerGroupListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubConsumerGroupList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupShow(AzureEventhubsEventhubConsumerGroupShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubConsumerGroupShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupShow(Configure<AzureEventhubsEventhubConsumerGroupShowSettings> configurator)
        {
            return AzureEventhubsEventhubConsumerGroupShow(configurator(new AzureEventhubsEventhubConsumerGroupShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubConsumerGroupShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubConsumerGroupShow(CombinatorialConfigure<AzureEventhubsEventhubConsumerGroupShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubConsumerGroupShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupUpdate(AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubConsumerGroupUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.EventhubName"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Subscription"/></li>
        ///     <li><c>--user-metadata</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.UserMetadata"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubConsumerGroupUpdate(Configure<AzureEventhubsEventhubConsumerGroupUpdateSettings> configurator)
        {
            return AzureEventhubsEventhubConsumerGroupUpdate(configurator(new AzureEventhubsEventhubConsumerGroupUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.EventhubName"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Subscription"/></li>
        ///     <li><c>--user-metadata</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.UserMetadata"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubConsumerGroupUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubConsumerGroupUpdate(CombinatorialConfigure<AzureEventhubsEventhubConsumerGroupUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubConsumerGroupUpdate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasAuthorizationRuleList(AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasAuthorizationRuleList(Configure<AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasAuthorizationRuleList(configurator(new AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasAuthorizationRuleList(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasAuthorizationRuleList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasAuthorizationRuleShow(AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasAuthorizationRuleShow(Configure<AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasAuthorizationRuleShow(configurator(new AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasAuthorizationRuleShow(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasAuthorizationRuleShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleCreate(AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleCreate(Configure<AzureEventhubsNamespaceAuthorizationRuleCreateSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleCreate(configurator(new AzureEventhubsNamespaceAuthorizationRuleCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleCreate(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleCreate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleDelete(AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleDelete(Configure<AzureEventhubsNamespaceAuthorizationRuleDeleteSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleDelete(configurator(new AzureEventhubsNamespaceAuthorizationRuleDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleDelete(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleDelete, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleList(AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleList(Configure<AzureEventhubsNamespaceAuthorizationRuleListSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleList(configurator(new AzureEventhubsNamespaceAuthorizationRuleListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleList(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleShow(AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleShow(Configure<AzureEventhubsNamespaceAuthorizationRuleShowSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleShow(configurator(new AzureEventhubsNamespaceAuthorizationRuleShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleShow(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleShow, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleUpdate(AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleUpdate(Configure<AzureEventhubsNamespaceAuthorizationRuleUpdateSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleUpdate(configurator(new AzureEventhubsNamespaceAuthorizationRuleUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--add</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Add"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Debug"/></li>
        ///     <li><c>--force-string</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ForceString"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Query"/></li>
        ///     <li><c>--remove</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Remove"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--rights</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></li>
        ///     <li><c>--set</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Set"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleUpdate(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleUpdate, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceNetworkRuleAdd(AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceNetworkRuleAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--action</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Action"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Help"/></li>
        ///     <li><c>--ignore-missing-endpoint</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IpAddress"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceNetworkRuleAdd(Configure<AzureEventhubsNamespaceNetworkRuleAddSettings> configurator)
        {
            return AzureEventhubsNamespaceNetworkRuleAdd(configurator(new AzureEventhubsNamespaceNetworkRuleAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--action</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Action"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Help"/></li>
        ///     <li><c>--ignore-missing-endpoint</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IpAddress"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceNetworkRuleAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceNetworkRuleAdd(CombinatorialConfigure<AzureEventhubsNamespaceNetworkRuleAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceNetworkRuleAdd, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceNetworkRuleList(AzureEventhubsNamespaceNetworkRuleListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceNetworkRuleListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceNetworkRuleList(Configure<AzureEventhubsNamespaceNetworkRuleListSettings> configurator)
        {
            return AzureEventhubsNamespaceNetworkRuleList(configurator(new AzureEventhubsNamespaceNetworkRuleListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Help"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceNetworkRuleListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceNetworkRuleList(CombinatorialConfigure<AzureEventhubsNamespaceNetworkRuleListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceNetworkRuleList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceNetworkRuleRemove(AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceNetworkRuleRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Help"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.IpAddress"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceNetworkRuleRemove(Configure<AzureEventhubsNamespaceNetworkRuleRemoveSettings> configurator)
        {
            return AzureEventhubsNamespaceNetworkRuleRemove(configurator(new AzureEventhubsNamespaceNetworkRuleRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Help"/></li>
        ///     <li><c>--ip-address</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.IpAddress"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Verbose"/></li>
        ///     <li><c>--vnet-name</c> via <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.VnetName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceNetworkRuleRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceNetworkRuleRemove(CombinatorialConfigure<AzureEventhubsNamespaceNetworkRuleRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceNetworkRuleRemove, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleKeysList(AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleKeysListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleKeysList(Configure<AzureEventhubsEventhubAuthorizationRuleKeysListSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleKeysList(configurator(new AzureEventhubsEventhubAuthorizationRuleKeysListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleKeysListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleKeysList(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleKeysListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleKeysList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleKeysRenew(AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></li>
        ///     <li><c>--key</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Key"/></li>
        ///     <li><c>--key-value</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.KeyValue"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsEventhubAuthorizationRuleKeysRenew(Configure<AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings> configurator)
        {
            return AzureEventhubsEventhubAuthorizationRuleKeysRenew(configurator(new AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Debug"/></li>
        ///     <li><c>--eventhub-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.EventhubName"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></li>
        ///     <li><c>--key</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Key"/></li>
        ///     <li><c>--key-value</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.KeyValue"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsEventhubAuthorizationRuleKeysRenew(CombinatorialConfigure<AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsEventhubAuthorizationRuleKeysRenew, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysList(AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysList(Configure<AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings> configurator)
        {
            return AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysList(configurator(new AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--alias</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Alias"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysList(CombinatorialConfigure<AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleKeysList(AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleKeysListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleKeysList(Configure<AzureEventhubsNamespaceAuthorizationRuleKeysListSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleKeysList(configurator(new AzureEventhubsNamespaceAuthorizationRuleKeysListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleKeysListSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleKeysList(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleKeysListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleKeysList, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleKeysRenew(AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></li>
        ///     <li><c>--key</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Key"/></li>
        ///     <li><c>--key-value</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.KeyValue"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureEventhubsNamespaceAuthorizationRuleKeysRenew(Configure<AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings> configurator)
        {
            return AzureEventhubsNamespaceAuthorizationRuleKeysRenew(configurator(new AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Event Hubs namespaces, eventhubs, consumergroups and geo recovery configurations - Alias.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/eventhubs?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></li>
        ///     <li><c>--key</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Key"/></li>
        ///     <li><c>--key-value</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.KeyValue"/></li>
        ///     <li><c>--name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Name"/></li>
        ///     <li><c>--namespace-name</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.NamespaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings Settings, IReadOnlyCollection<Output> Output)> AzureEventhubsNamespaceAuthorizationRuleKeysRenew(CombinatorialConfigure<AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureEventhubsNamespaceAuthorizationRuleKeysRenew, AzureEventhubsLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region AzureEventhubsSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Eventhub.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether capture description is enabled.
        /// </summary>
        public virtual bool? EnableCapture { get; internal set; }
        /// <summary>
        ///   Number of days to retain events for this Event Hub, value should be 1 to 7 days and depends on Namespace sku. if Namespace sku is Basic than value should be one and is Manadatory parameter. Namespace sku is standard value should be 1 to 7 days, default is 7 days and is optional parameter.
        /// </summary>
        public virtual int? MessageRetention { get; internal set; }
        /// <summary>
        ///   Number of partitions created for the Event Hub. By default, allowed values are 2-32. Lower value of 1 is supported with Kafka enabled namespaces. In presence of a custom quota, the upper limit will match the upper limit of the quota.
        /// </summary>
        public virtual int? PartitionCount { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether to Skip Empty.
        /// </summary>
        public virtual bool? SkipEmptyArchives { get; internal set; }
        /// <summary>
        ///   Status of Eventhub.
        /// </summary>
        public virtual EventhubsEventhubStatus Status { get; internal set; }
        /// <summary>
        ///   Allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds.
        /// </summary>
        public virtual string CaptureInterval { get; internal set; }
        /// <summary>
        ///   Defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes.
        /// </summary>
        public virtual string CaptureSizeLimit { get; internal set; }
        /// <summary>
        ///   Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order.
        /// </summary>
        public virtual string ArchiveNameFormat { get; internal set; }
        /// <summary>
        ///   Blob container Name.
        /// </summary>
        public virtual string BlobContainer { get; internal set; }
        /// <summary>
        ///   Name for capture destination.
        /// </summary>
        public virtual string DestinationName { get; internal set; }
        /// <summary>
        ///   Name (if within same resource group and not of type Classic Storage) or ARM id of the storage account to be used to create the blobs.
        /// </summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub create")
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--enable-capture", EnableCapture)
              .Add("--message-retention {value}", MessageRetention)
              .Add("--partition-count {value}", PartitionCount)
              .Add("--skip-empty-archives", SkipEmptyArchives)
              .Add("--status {value}", Status)
              .Add("--capture-interval {value}", CaptureInterval)
              .Add("--capture-size-limit {value}", CaptureSizeLimit)
              .Add("--archive-name-format {value}", ArchiveNameFormat)
              .Add("--blob-container {value}", BlobContainer)
              .Add("--destination-name {value}", DestinationName)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Eventhub.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub delete")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
        /// </summary>
        public virtual string Skip { get; internal set; }
        /// <summary>
        ///   May be used to limit the number of results to the most recent N usageDetails.
        /// </summary>
        public virtual string Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub list")
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--skip {value}", Skip)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Eventhub.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   A boolean value that indicates whether capture description is enabled.
        /// </summary>
        public virtual bool? EnableCapture { get; internal set; }
        /// <summary>
        ///   Number of days to retain events for this Event Hub, value should be 1 to 7 days and depends on Namespace sku. if Namespace sku is Basic than value should be one and is Manadatory parameter. Namespace sku is standard value should be 1 to 7 days, default is 7 days and is optional parameter.
        /// </summary>
        public virtual int? MessageRetention { get; internal set; }
        /// <summary>
        ///   Number of partitions created for the Event Hub. By default, allowed values are 2-32. Lower value of 1 is supported with Kafka enabled namespaces. In presence of a custom quota, the upper limit will match the upper limit of the quota.
        /// </summary>
        public virtual int? PartitionCount { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether to Skip Empty.
        /// </summary>
        public virtual bool? SkipEmptyArchives { get; internal set; }
        /// <summary>
        ///   Status of Eventhub.
        /// </summary>
        public virtual EventhubsEventhubStatus Status { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Eventhub.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds.
        /// </summary>
        public virtual string CaptureInterval { get; internal set; }
        /// <summary>
        ///   Defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes.
        /// </summary>
        public virtual string CaptureSizeLimit { get; internal set; }
        /// <summary>
        ///   Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order.
        /// </summary>
        public virtual string ArchiveNameFormat { get; internal set; }
        /// <summary>
        ///   Blob container Name.
        /// </summary>
        public virtual string BlobContainer { get; internal set; }
        /// <summary>
        ///   Name for capture destination.
        /// </summary>
        public virtual string DestinationName { get; internal set; }
        /// <summary>
        ///   Name (if within same resource group and not of type Classic Storage) or ARM id of the storage account to be used to create the blobs.
        /// </summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub update")
              .Add("--enable-capture", EnableCapture)
              .Add("--message-retention {value}", MessageRetention)
              .Add("--partition-count {value}", PartitionCount)
              .Add("--skip-empty-archives", SkipEmptyArchives)
              .Add("--status {value}", Status)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--capture-interval {value}", CaptureInterval)
              .Add("--capture-size-limit {value}", CaptureSizeLimit)
              .Add("--archive-name-format {value}", ArchiveNameFormat)
              .Add("--blob-container {value}", BlobContainer)
              .Add("--destination-name {value}", DestinationName)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasBreakPairSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasBreakPairSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias break-pair")
              .Add("--alias {value}", Alias)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias delete")
              .Add("--alias {value}", Alias)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasExistsSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasExistsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo Recovery Configs - Alias to check availability.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias exists")
              .Add("--alias {value}", Alias)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasFailOverSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasFailOverSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias fail-over")
              .Add("--alias {value}", Alias)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias list")
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasSetSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name (if within the same resource group) or ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing.
        /// </summary>
        public virtual string PartnerNamespace { get; internal set; }
        /// <summary>
        ///   Alternate Name for the Alias, when the Namespace name and Alias name are same.
        /// </summary>
        public virtual string AlternateName { get; internal set; }
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias set")
              .Add("--partner-namespace {value}", PartnerNamespace)
              .Add("--alternate-name {value}", AlternateName)
              .Add("--alias {value}", Alias)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias show")
              .Add("--alias {value}", Alias)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Capacity for Sku.
        /// </summary>
        public virtual string Capacity { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.
        /// </summary>
        public virtual bool? EnableAutoInflate { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether Kafka is enabled for eventhub namespace.
        /// </summary>
        public virtual bool? EnableKafka { get; internal set; }
        /// <summary>
        ///   Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units. ( 0 if AutoInflateEnabled = true).
        /// </summary>
        public virtual string MaximumThroughputUnits { get; internal set; }
        /// <summary>
        ///   Namespace SKU.
        /// </summary>
        public virtual EventhubsNamespaceSku Sku { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   Default Action for Network Rule Set.
        /// </summary>
        public virtual EventhubsNamespaceDefaultAction DefaultAction { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--capacity {value}", Capacity)
              .Add("--enable-auto-inflate", EnableAutoInflate)
              .Add("--enable-kafka", EnableKafka)
              .Add("--location {value}", Location)
              .Add("--maximum-throughput-units {value}", MaximumThroughputUnits)
              .Add("--sku {value}", Sku)
              .Add("--tags {value}", Tags)
              .Add("--default-action {value}", DefaultAction)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace delete")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceExistsSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceExistsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name to check the namespace name availability.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace exists")
              .Add("--name {value}", Name)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Capacity for Sku.
        /// </summary>
        public virtual string Capacity { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.
        /// </summary>
        public virtual bool? EnableAutoInflate { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether Kafka is enabled for eventhub namespace.
        /// </summary>
        public virtual bool? EnableKafka { get; internal set; }
        /// <summary>
        ///   Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units. ( 0 if AutoInflateEnabled = true).
        /// </summary>
        public virtual string MaximumThroughputUnits { get; internal set; }
        /// <summary>
        ///   Namespace SKU.
        /// </summary>
        public virtual EventhubsNamespaceSku Sku { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Default Action for Network Rule Set.
        /// </summary>
        public virtual EventhubsNamespaceDefaultAction DefaultAction { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace update")
              .Add("--capacity {value}", Capacity)
              .Add("--enable-auto-inflate", EnableAutoInflate)
              .Add("--enable-kafka", EnableKafka)
              .Add("--maximum-throughput-units {value}", MaximumThroughputUnits)
              .Add("--sku {value}", Sku)
              .Add("--tags {value}", Tags)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--default-action {value}", DefaultAction)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   Name of EventHub AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Space-separated list of Authorization rule rights.
        /// </summary>
        public virtual IReadOnlyList<EventhubsEventhubAuthorizationRuleRights> Rights => RightsInternal.AsReadOnly();
        internal List<EventhubsEventhubAuthorizationRuleRights> RightsInternal { get; set; } = new List<EventhubsEventhubAuthorizationRuleRights>();
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule create")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--rights {value}", Rights, separator: ' ')
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of EventHub AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule delete")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule list")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of EventHub AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule show")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Space-separated list of Authorization rule rights.
        /// </summary>
        public virtual IReadOnlyList<EventhubsEventhubAuthorizationRuleRights> Rights => RightsInternal.AsReadOnly();
        internal List<EventhubsEventhubAuthorizationRuleRights> RightsInternal { get; set; } = new List<EventhubsEventhubAuthorizationRuleRights>();
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of EventHub AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule update")
              .Add("--rights {value}", Rights, separator: ' ')
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubConsumerGroupCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   Name of ConsumerGroup.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Usermetadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
        /// </summary>
        public virtual string UserMetadata { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub consumer-group create")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--user-metadata {value}", UserMetadata)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubConsumerGroupDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of ConsumerGroup.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub consumer-group delete")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubConsumerGroupListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
        /// </summary>
        public virtual string Skip { get; internal set; }
        /// <summary>
        ///   May be used to limit the number of results to the most recent N usageDetails.
        /// </summary>
        public virtual string Top { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub consumer-group list")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--skip {value}", Skip)
              .Add("--top {value}", Top)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubConsumerGroupShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of ConsumerGroup.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub consumer-group show")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubConsumerGroupUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Usermetadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
        /// </summary>
        public virtual string UserMetadata { get; internal set; }
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of ConsumerGroup.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub consumer-group update")
              .Add("--user-metadata {value}", UserMetadata)
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias authorization-rule list")
              .Add("--alias {value}", Alias)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias authorization-rule show")
              .Add("--alias {value}", Alias)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Space-separated list of Authorization rule rights.
        /// </summary>
        public virtual IReadOnlyList<EventhubsEventhubAuthorizationRuleRights> Rights => RightsInternal.AsReadOnly();
        internal List<EventhubsEventhubAuthorizationRuleRights> RightsInternal { get; set; } = new List<EventhubsEventhubAuthorizationRuleRights>();
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule create")
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--rights {value}", Rights, separator: ' ')
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule delete")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule list")
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleShowSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Space-separated list of Authorization rule rights.
        /// </summary>
        public virtual IReadOnlyList<EventhubsEventhubAuthorizationRuleRights> Rights => RightsInternal.AsReadOnly();
        internal List<EventhubsEventhubAuthorizationRuleRights> RightsInternal { get; set; } = new List<EventhubsEventhubAuthorizationRuleRights>();
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.
        /// </summary>
        public virtual string Add { get; internal set; }
        /// <summary>
        ///   When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.
        /// </summary>
        public virtual string ForceString { get; internal set; }
        /// <summary>
        ///   Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.
        /// </summary>
        public virtual string Remove { get; internal set; }
        /// <summary>
        ///   Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.
        /// </summary>
        public virtual string Set { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule update")
              .Add("--rights {value}", Rights, separator: ' ')
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--add {value}", Add)
              .Add("--force-string {value}", ForceString)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceNetworkRuleAddSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceNetworkRuleAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of the Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Action of the IP rule.
        /// </summary>
        public virtual EventhubsNamespaceNetworkRuleAddAction Action { get; internal set; }
        /// <summary>
        ///   IPv4 address or CIDR range - 10.6.0.0/24.
        /// </summary>
        public virtual string IpAddress { get; internal set; }
        /// <summary>
        ///   A boolean value that indicates whether to ignore missing vnet Service Endpoint.
        /// </summary>
        public virtual bool? IgnoreMissingEndpoint { get; internal set; }
        /// <summary>
        ///   Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.
        /// </summary>
        public virtual string Subnet { get; internal set; }
        /// <summary>
        ///   Name of the Virtual Network.
        /// </summary>
        public virtual string VnetName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace network-rule add")
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--action {value}", Action)
              .Add("--ip-address {value}", IpAddress)
              .Add("--ignore-missing-endpoint", IgnoreMissingEndpoint)
              .Add("--subnet {value}", Subnet)
              .Add("--vnet-name {value}", VnetName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceNetworkRuleListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceNetworkRuleListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of the Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace network-rule list")
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceNetworkRuleRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceNetworkRuleRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of the Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   IPv4 address or CIDR range - 10.6.0.0/24.
        /// </summary>
        public virtual string IpAddress { get; internal set; }
        /// <summary>
        ///   Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.
        /// </summary>
        public virtual string Subnet { get; internal set; }
        /// <summary>
        ///   Name of the Virtual Network.
        /// </summary>
        public virtual string VnetName { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace network-rule remove")
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--ip-address {value}", IpAddress)
              .Add("--subnet {value}", Subnet)
              .Add("--vnet-name {value}", VnetName)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleKeysListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleKeysListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   Name of EventHub AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule keys list")
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Specifies Primary or Secondary key needs to be reset.
        /// </summary>
        public virtual EventhubsEventhubAuthorizationRuleKeysKey Key { get; internal set; }
        /// <summary>
        ///   Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType.
        /// </summary>
        public virtual string KeyValue { get; internal set; }
        /// <summary>
        ///   Name of EventHub.
        /// </summary>
        public virtual string EventhubName { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of EventHub AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs eventhub authorization-rule keys renew")
              .Add("--key {value}", Key)
              .Add("--key-value {value}", KeyValue)
              .Add("--eventhub-name {value}", EventhubName)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs georecovery-alias authorization-rule keys list")
              .Add("--alias {value}", Alias)
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleKeysListSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleKeysListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule keys list")
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureEventhubs executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureEventhubsTasks.AzureEventhubsPath;
        public override Action<OutputType, string> CustomLogger => AzureEventhubsTasks.AzureEventhubsLogger;
        /// <summary>
        ///   Specifies Primary or Secondary key needs to be reset.
        /// </summary>
        public virtual EventhubsEventhubAuthorizationRuleKeysKey Key { get; internal set; }
        /// <summary>
        ///   Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType.
        /// </summary>
        public virtual string KeyValue { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of Namespace AuthorizationRule.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of Namespace.
        /// </summary>
        public virtual string NamespaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("eventhubs namespace authorization-rule keys renew")
              .Add("--key {value}", Key)
              .Add("--key-value {value}", KeyValue)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--namespace-name {value}", NamespaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureEventhubsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings SetDebug(this AzureEventhubsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings ResetDebug(this AzureEventhubsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings SetHelp(this AzureEventhubsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings ResetHelp(this AzureEventhubsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings SetOutput(this AzureEventhubsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings ResetOutput(this AzureEventhubsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings SetQuery(this AzureEventhubsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings ResetQuery(this AzureEventhubsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings SetVerbose(this AzureEventhubsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsSettings ResetVerbose(this AzureEventhubsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetName(this AzureEventhubsEventhubCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetName(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetNamespaceName(this AzureEventhubsEventhubCreateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetNamespaceName(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetResourceGroup(this AzureEventhubsEventhubCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetResourceGroup(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region EnableCapture
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetEnableCapture(this AzureEventhubsEventhubCreateSettings toolSettings, bool? enableCapture)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = enableCapture;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetEnableCapture(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings EnableEnableCapture(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings DisableEnableCapture(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsEventhubCreateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ToggleEnableCapture(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = !toolSettings.EnableCapture;
            return toolSettings;
        }
        #endregion
        #region MessageRetention
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.MessageRetention"/></em></p>
        ///   <p>Number of days to retain events for this Event Hub, value should be 1 to 7 days and depends on Namespace sku. if Namespace sku is Basic than value should be one and is Manadatory parameter. Namespace sku is standard value should be 1 to 7 days, default is 7 days and is optional parameter.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetMessageRetention(this AzureEventhubsEventhubCreateSettings toolSettings, int? messageRetention)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MessageRetention = messageRetention;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.MessageRetention"/></em></p>
        ///   <p>Number of days to retain events for this Event Hub, value should be 1 to 7 days and depends on Namespace sku. if Namespace sku is Basic than value should be one and is Manadatory parameter. Namespace sku is standard value should be 1 to 7 days, default is 7 days and is optional parameter.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetMessageRetention(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MessageRetention = null;
            return toolSettings;
        }
        #endregion
        #region PartitionCount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.PartitionCount"/></em></p>
        ///   <p>Number of partitions created for the Event Hub. By default, allowed values are 2-32. Lower value of 1 is supported with Kafka enabled namespaces. In presence of a custom quota, the upper limit will match the upper limit of the quota.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetPartitionCount(this AzureEventhubsEventhubCreateSettings toolSettings, int? partitionCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionCount = partitionCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.PartitionCount"/></em></p>
        ///   <p>Number of partitions created for the Event Hub. By default, allowed values are 2-32. Lower value of 1 is supported with Kafka enabled namespaces. In presence of a custom quota, the upper limit will match the upper limit of the quota.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetPartitionCount(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionCount = null;
            return toolSettings;
        }
        #endregion
        #region SkipEmptyArchives
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetSkipEmptyArchives(this AzureEventhubsEventhubCreateSettings toolSettings, bool? skipEmptyArchives)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = skipEmptyArchives;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetSkipEmptyArchives(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings EnableSkipEmptyArchives(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings DisableSkipEmptyArchives(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsEventhubCreateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ToggleSkipEmptyArchives(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = !toolSettings.SkipEmptyArchives;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Status"/></em></p>
        ///   <p>Status of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetStatus(this AzureEventhubsEventhubCreateSettings toolSettings, EventhubsEventhubStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Status"/></em></p>
        ///   <p>Status of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetStatus(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region CaptureInterval
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.CaptureInterval"/></em></p>
        ///   <p>Allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetCaptureInterval(this AzureEventhubsEventhubCreateSettings toolSettings, string captureInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureInterval = captureInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.CaptureInterval"/></em></p>
        ///   <p>Allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetCaptureInterval(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureInterval = null;
            return toolSettings;
        }
        #endregion
        #region CaptureSizeLimit
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.CaptureSizeLimit"/></em></p>
        ///   <p>Defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetCaptureSizeLimit(this AzureEventhubsEventhubCreateSettings toolSettings, string captureSizeLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureSizeLimit = captureSizeLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.CaptureSizeLimit"/></em></p>
        ///   <p>Defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetCaptureSizeLimit(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureSizeLimit = null;
            return toolSettings;
        }
        #endregion
        #region ArchiveNameFormat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.ArchiveNameFormat"/></em></p>
        ///   <p>Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetArchiveNameFormat(this AzureEventhubsEventhubCreateSettings toolSettings, string archiveNameFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArchiveNameFormat = archiveNameFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.ArchiveNameFormat"/></em></p>
        ///   <p>Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetArchiveNameFormat(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArchiveNameFormat = null;
            return toolSettings;
        }
        #endregion
        #region BlobContainer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.BlobContainer"/></em></p>
        ///   <p>Blob container Name.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetBlobContainer(this AzureEventhubsEventhubCreateSettings toolSettings, string blobContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobContainer = blobContainer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.BlobContainer"/></em></p>
        ///   <p>Blob container Name.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetBlobContainer(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobContainer = null;
            return toolSettings;
        }
        #endregion
        #region DestinationName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.DestinationName"/></em></p>
        ///   <p>Name for capture destination.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetDestinationName(this AzureEventhubsEventhubCreateSettings toolSettings, string destinationName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationName = destinationName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.DestinationName"/></em></p>
        ///   <p>Name for capture destination.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetDestinationName(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationName = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.StorageAccount"/></em></p>
        ///   <p>Name (if within same resource group and not of type Classic Storage) or ARM id of the storage account to be used to create the blobs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetStorageAccount(this AzureEventhubsEventhubCreateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.StorageAccount"/></em></p>
        ///   <p>Name (if within same resource group and not of type Classic Storage) or ARM id of the storage account to be used to create the blobs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetStorageAccount(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetSubscription(this AzureEventhubsEventhubCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetSubscription(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetDebug(this AzureEventhubsEventhubCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetDebug(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetHelp(this AzureEventhubsEventhubCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetHelp(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetOutput(this AzureEventhubsEventhubCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetOutput(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetQuery(this AzureEventhubsEventhubCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetQuery(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings SetVerbose(this AzureEventhubsEventhubCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubCreateSettings ResetVerbose(this AzureEventhubsEventhubCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubDeleteSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetIds(this AzureEventhubsEventhubDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetIds(this AzureEventhubsEventhubDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings AddIds(this AzureEventhubsEventhubDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings AddIds(this AzureEventhubsEventhubDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ClearIds(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings RemoveIds(this AzureEventhubsEventhubDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings RemoveIds(this AzureEventhubsEventhubDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetName(this AzureEventhubsEventhubDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetName(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetNamespaceName(this AzureEventhubsEventhubDeleteSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetNamespaceName(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetResourceGroup(this AzureEventhubsEventhubDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetResourceGroup(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetSubscription(this AzureEventhubsEventhubDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetSubscription(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetDebug(this AzureEventhubsEventhubDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetDebug(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetHelp(this AzureEventhubsEventhubDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetHelp(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetOutput(this AzureEventhubsEventhubDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetOutput(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetQuery(this AzureEventhubsEventhubDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetQuery(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings SetVerbose(this AzureEventhubsEventhubDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubDeleteSettings ResetVerbose(this AzureEventhubsEventhubDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubListSettingsExtensions
    {
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetNamespaceName(this AzureEventhubsEventhubListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetNamespaceName(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetResourceGroup(this AzureEventhubsEventhubListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetResourceGroup(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Skip
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Skip"/></em></p>
        ///   <p>Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetSkip(this AzureEventhubsEventhubListSettings toolSettings, string skip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = skip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Skip"/></em></p>
        ///   <p>Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetSkip(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Top"/></em></p>
        ///   <p>May be used to limit the number of results to the most recent N usageDetails.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetTop(this AzureEventhubsEventhubListSettings toolSettings, string top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Top"/></em></p>
        ///   <p>May be used to limit the number of results to the most recent N usageDetails.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetTop(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetSubscription(this AzureEventhubsEventhubListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetSubscription(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetDebug(this AzureEventhubsEventhubListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetDebug(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetHelp(this AzureEventhubsEventhubListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetHelp(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetOutput(this AzureEventhubsEventhubListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetOutput(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetQuery(this AzureEventhubsEventhubListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetQuery(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings SetVerbose(this AzureEventhubsEventhubListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubListSettings ResetVerbose(this AzureEventhubsEventhubListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetIds(this AzureEventhubsEventhubShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetIds(this AzureEventhubsEventhubShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings AddIds(this AzureEventhubsEventhubShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings AddIds(this AzureEventhubsEventhubShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ClearIds(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings RemoveIds(this AzureEventhubsEventhubShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings RemoveIds(this AzureEventhubsEventhubShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetName(this AzureEventhubsEventhubShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetName(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetNamespaceName(this AzureEventhubsEventhubShowSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetNamespaceName(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetResourceGroup(this AzureEventhubsEventhubShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetResourceGroup(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetSubscription(this AzureEventhubsEventhubShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetSubscription(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetDebug(this AzureEventhubsEventhubShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetDebug(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetHelp(this AzureEventhubsEventhubShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetHelp(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetOutput(this AzureEventhubsEventhubShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetOutput(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetQuery(this AzureEventhubsEventhubShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetQuery(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings SetVerbose(this AzureEventhubsEventhubShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubShowSettings ResetVerbose(this AzureEventhubsEventhubShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubUpdateSettingsExtensions
    {
        #region EnableCapture
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetEnableCapture(this AzureEventhubsEventhubUpdateSettings toolSettings, bool? enableCapture)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = enableCapture;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetEnableCapture(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings EnableEnableCapture(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings DisableEnableCapture(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsEventhubUpdateSettings.EnableCapture"/></em></p>
        ///   <p>A boolean value that indicates whether capture description is enabled.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ToggleEnableCapture(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableCapture = !toolSettings.EnableCapture;
            return toolSettings;
        }
        #endregion
        #region MessageRetention
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.MessageRetention"/></em></p>
        ///   <p>Number of days to retain events for this Event Hub, value should be 1 to 7 days and depends on Namespace sku. if Namespace sku is Basic than value should be one and is Manadatory parameter. Namespace sku is standard value should be 1 to 7 days, default is 7 days and is optional parameter.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetMessageRetention(this AzureEventhubsEventhubUpdateSettings toolSettings, int? messageRetention)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MessageRetention = messageRetention;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.MessageRetention"/></em></p>
        ///   <p>Number of days to retain events for this Event Hub, value should be 1 to 7 days and depends on Namespace sku. if Namespace sku is Basic than value should be one and is Manadatory parameter. Namespace sku is standard value should be 1 to 7 days, default is 7 days and is optional parameter.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetMessageRetention(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MessageRetention = null;
            return toolSettings;
        }
        #endregion
        #region PartitionCount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.PartitionCount"/></em></p>
        ///   <p>Number of partitions created for the Event Hub. By default, allowed values are 2-32. Lower value of 1 is supported with Kafka enabled namespaces. In presence of a custom quota, the upper limit will match the upper limit of the quota.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetPartitionCount(this AzureEventhubsEventhubUpdateSettings toolSettings, int? partitionCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionCount = partitionCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.PartitionCount"/></em></p>
        ///   <p>Number of partitions created for the Event Hub. By default, allowed values are 2-32. Lower value of 1 is supported with Kafka enabled namespaces. In presence of a custom quota, the upper limit will match the upper limit of the quota.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetPartitionCount(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionCount = null;
            return toolSettings;
        }
        #endregion
        #region SkipEmptyArchives
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetSkipEmptyArchives(this AzureEventhubsEventhubUpdateSettings toolSettings, bool? skipEmptyArchives)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = skipEmptyArchives;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetSkipEmptyArchives(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings EnableSkipEmptyArchives(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings DisableSkipEmptyArchives(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsEventhubUpdateSettings.SkipEmptyArchives"/></em></p>
        ///   <p>A boolean value that indicates whether to Skip Empty.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ToggleSkipEmptyArchives(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipEmptyArchives = !toolSettings.SkipEmptyArchives;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Status"/></em></p>
        ///   <p>Status of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetStatus(this AzureEventhubsEventhubUpdateSettings toolSettings, EventhubsEventhubStatus status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Status"/></em></p>
        ///   <p>Status of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetStatus(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetIds(this AzureEventhubsEventhubUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetIds(this AzureEventhubsEventhubUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings AddIds(this AzureEventhubsEventhubUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings AddIds(this AzureEventhubsEventhubUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ClearIds(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings RemoveIds(this AzureEventhubsEventhubUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings RemoveIds(this AzureEventhubsEventhubUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetName(this AzureEventhubsEventhubUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Name"/></em></p>
        ///   <p>Name of Eventhub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetName(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetNamespaceName(this AzureEventhubsEventhubUpdateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetNamespaceName(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetResourceGroup(this AzureEventhubsEventhubUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetResourceGroup(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetSubscription(this AzureEventhubsEventhubUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetSubscription(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region CaptureInterval
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.CaptureInterval"/></em></p>
        ///   <p>Allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetCaptureInterval(this AzureEventhubsEventhubUpdateSettings toolSettings, string captureInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureInterval = captureInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.CaptureInterval"/></em></p>
        ///   <p>Allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetCaptureInterval(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureInterval = null;
            return toolSettings;
        }
        #endregion
        #region CaptureSizeLimit
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.CaptureSizeLimit"/></em></p>
        ///   <p>Defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetCaptureSizeLimit(this AzureEventhubsEventhubUpdateSettings toolSettings, string captureSizeLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureSizeLimit = captureSizeLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.CaptureSizeLimit"/></em></p>
        ///   <p>Defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetCaptureSizeLimit(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaptureSizeLimit = null;
            return toolSettings;
        }
        #endregion
        #region ArchiveNameFormat
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.ArchiveNameFormat"/></em></p>
        ///   <p>Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetArchiveNameFormat(this AzureEventhubsEventhubUpdateSettings toolSettings, string archiveNameFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArchiveNameFormat = archiveNameFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.ArchiveNameFormat"/></em></p>
        ///   <p>Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetArchiveNameFormat(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArchiveNameFormat = null;
            return toolSettings;
        }
        #endregion
        #region BlobContainer
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.BlobContainer"/></em></p>
        ///   <p>Blob container Name.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetBlobContainer(this AzureEventhubsEventhubUpdateSettings toolSettings, string blobContainer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobContainer = blobContainer;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.BlobContainer"/></em></p>
        ///   <p>Blob container Name.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetBlobContainer(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlobContainer = null;
            return toolSettings;
        }
        #endregion
        #region DestinationName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.DestinationName"/></em></p>
        ///   <p>Name for capture destination.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetDestinationName(this AzureEventhubsEventhubUpdateSettings toolSettings, string destinationName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationName = destinationName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.DestinationName"/></em></p>
        ///   <p>Name for capture destination.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetDestinationName(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestinationName = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.StorageAccount"/></em></p>
        ///   <p>Name (if within same resource group and not of type Classic Storage) or ARM id of the storage account to be used to create the blobs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetStorageAccount(this AzureEventhubsEventhubUpdateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.StorageAccount"/></em></p>
        ///   <p>Name (if within same resource group and not of type Classic Storage) or ARM id of the storage account to be used to create the blobs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetStorageAccount(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetAdd(this AzureEventhubsEventhubUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetAdd(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetForceString(this AzureEventhubsEventhubUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetForceString(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetRemove(this AzureEventhubsEventhubUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetRemove(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetSet(this AzureEventhubsEventhubUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetSet(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetDebug(this AzureEventhubsEventhubUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetDebug(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetHelp(this AzureEventhubsEventhubUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetHelp(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetOutput(this AzureEventhubsEventhubUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetOutput(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetQuery(this AzureEventhubsEventhubUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetQuery(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings SetVerbose(this AzureEventhubsEventhubUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubUpdateSettings ResetVerbose(this AzureEventhubsEventhubUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasBreakPairSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasBreakPairSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetAlias(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetAlias(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings AddIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings AddIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ClearIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings RemoveIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings RemoveIds(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetSubscription(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetDebug(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetDebug(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetHelp(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetHelp(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetOutput(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetOutput(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetQuery(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetQuery(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings SetVerbose(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasBreakPairSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasBreakPairSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasBreakPairSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasDeleteSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetAlias(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetAlias(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings AddIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings AddIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ClearIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings RemoveIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings RemoveIds(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetSubscription(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetDebug(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetDebug(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetHelp(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetHelp(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetOutput(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetOutput(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetQuery(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetQuery(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings SetVerbose(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasDeleteSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasExistsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasExistsSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Alias"/></em></p>
        ///   <p>Name of Geo Recovery Configs - Alias to check availability.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetAlias(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Alias"/></em></p>
        ///   <p>Name of Geo Recovery Configs - Alias to check availability.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetAlias(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetSubscription(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetDebug(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetDebug(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetHelp(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetHelp(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetOutput(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetOutput(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetQuery(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetQuery(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings SetVerbose(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasExistsSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasFailOverSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasFailOverSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetAlias(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetAlias(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings AddIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings AddIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ClearIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings RemoveIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings RemoveIds(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetSubscription(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetDebug(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetDebug(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetHelp(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetHelp(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetOutput(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetOutput(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetQuery(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetQuery(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings SetVerbose(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasFailOverSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasFailOverSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasFailOverSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasListSettingsExtensions
    {
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetSubscription(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetDebug(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetDebug(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetHelp(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetHelp(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetOutput(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetOutput(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetQuery(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetQuery(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings SetVerbose(this AzureEventhubsGeorecoveryAliasListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasListSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasSetSettingsExtensions
    {
        #region PartnerNamespace
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.PartnerNamespace"/></em></p>
        ///   <p>Name (if within the same resource group) or ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetPartnerNamespace(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string partnerNamespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerNamespace = partnerNamespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.PartnerNamespace"/></em></p>
        ///   <p>Name (if within the same resource group) or ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetPartnerNamespace(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerNamespace = null;
            return toolSettings;
        }
        #endregion
        #region AlternateName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.AlternateName"/></em></p>
        ///   <p>Alternate Name for the Alias, when the Namespace name and Alias name are same.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetAlternateName(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string alternateName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternateName = alternateName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.AlternateName"/></em></p>
        ///   <p>Alternate Name for the Alias, when the Namespace name and Alias name are same.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetAlternateName(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AlternateName = null;
            return toolSettings;
        }
        #endregion
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetAlias(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetAlias(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings AddIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings AddIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ClearIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings RemoveIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings RemoveIds(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetSubscription(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetDebug(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetDebug(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetHelp(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetHelp(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetOutput(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetOutput(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetQuery(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetQuery(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings SetVerbose(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasSetSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasSetSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasShowSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetAlias(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetAlias(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings AddIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings AddIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ClearIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings RemoveIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings RemoveIds(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetSubscription(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetDebug(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetDebug(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetHelp(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetHelp(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetOutput(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetOutput(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetQuery(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetQuery(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings SetVerbose(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasShowSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetName(this AzureEventhubsNamespaceCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetName(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetResourceGroup(this AzureEventhubsNamespaceCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetResourceGroup(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Capacity
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Capacity"/></em></p>
        ///   <p>Capacity for Sku.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetCapacity(this AzureEventhubsNamespaceCreateSettings toolSettings, string capacity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capacity = capacity;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Capacity"/></em></p>
        ///   <p>Capacity for Sku.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetCapacity(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capacity = null;
            return toolSettings;
        }
        #endregion
        #region EnableAutoInflate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetEnableAutoInflate(this AzureEventhubsNamespaceCreateSettings toolSettings, bool? enableAutoInflate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = enableAutoInflate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetEnableAutoInflate(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings EnableEnableAutoInflate(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings DisableEnableAutoInflate(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsNamespaceCreateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ToggleEnableAutoInflate(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = !toolSettings.EnableAutoInflate;
            return toolSettings;
        }
        #endregion
        #region EnableKafka
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetEnableKafka(this AzureEventhubsNamespaceCreateSettings toolSettings, bool? enableKafka)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = enableKafka;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetEnableKafka(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings EnableEnableKafka(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings DisableEnableKafka(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsNamespaceCreateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ToggleEnableKafka(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = !toolSettings.EnableKafka;
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetLocation(this AzureEventhubsNamespaceCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Location"/></em></p>
        ///   <p>Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetLocation(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region MaximumThroughputUnits
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.MaximumThroughputUnits"/></em></p>
        ///   <p>Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units. ( 0 if AutoInflateEnabled = true).</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetMaximumThroughputUnits(this AzureEventhubsNamespaceCreateSettings toolSettings, string maximumThroughputUnits)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumThroughputUnits = maximumThroughputUnits;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.MaximumThroughputUnits"/></em></p>
        ///   <p>Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units. ( 0 if AutoInflateEnabled = true).</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetMaximumThroughputUnits(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumThroughputUnits = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Sku"/></em></p>
        ///   <p>Namespace SKU.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetSku(this AzureEventhubsNamespaceCreateSettings toolSettings, EventhubsNamespaceSku sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Sku"/></em></p>
        ///   <p>Namespace SKU.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetSku(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetTags(this AzureEventhubsNamespaceCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetTags(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAction
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.DefaultAction"/></em></p>
        ///   <p>Default Action for Network Rule Set.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetDefaultAction(this AzureEventhubsNamespaceCreateSettings toolSettings, EventhubsNamespaceDefaultAction defaultAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = defaultAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.DefaultAction"/></em></p>
        ///   <p>Default Action for Network Rule Set.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetDefaultAction(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetSubscription(this AzureEventhubsNamespaceCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetSubscription(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetDebug(this AzureEventhubsNamespaceCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetDebug(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetHelp(this AzureEventhubsNamespaceCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetHelp(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetOutput(this AzureEventhubsNamespaceCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetOutput(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetQuery(this AzureEventhubsNamespaceCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetQuery(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings SetVerbose(this AzureEventhubsNamespaceCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceCreateSettings ResetVerbose(this AzureEventhubsNamespaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceDeleteSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetIds(this AzureEventhubsNamespaceDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetIds(this AzureEventhubsNamespaceDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings AddIds(this AzureEventhubsNamespaceDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings AddIds(this AzureEventhubsNamespaceDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ClearIds(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings RemoveIds(this AzureEventhubsNamespaceDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings RemoveIds(this AzureEventhubsNamespaceDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetName(this AzureEventhubsNamespaceDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetName(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetResourceGroup(this AzureEventhubsNamespaceDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetResourceGroup(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetSubscription(this AzureEventhubsNamespaceDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetSubscription(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetDebug(this AzureEventhubsNamespaceDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetDebug(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetHelp(this AzureEventhubsNamespaceDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetHelp(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetOutput(this AzureEventhubsNamespaceDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetOutput(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetQuery(this AzureEventhubsNamespaceDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetQuery(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings SetVerbose(this AzureEventhubsNamespaceDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceDeleteSettings ResetVerbose(this AzureEventhubsNamespaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceExistsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceExistsSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Name"/></em></p>
        ///   <p>Name to check the namespace name availability.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetName(this AzureEventhubsNamespaceExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Name"/></em></p>
        ///   <p>Name to check the namespace name availability.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetName(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetSubscription(this AzureEventhubsNamespaceExistsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetSubscription(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetDebug(this AzureEventhubsNamespaceExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetDebug(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetHelp(this AzureEventhubsNamespaceExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetHelp(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetOutput(this AzureEventhubsNamespaceExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetOutput(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetQuery(this AzureEventhubsNamespaceExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetQuery(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings SetVerbose(this AzureEventhubsNamespaceExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceExistsSettings ResetVerbose(this AzureEventhubsNamespaceExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetResourceGroup(this AzureEventhubsNamespaceListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetResourceGroup(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetSubscription(this AzureEventhubsNamespaceListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetSubscription(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetDebug(this AzureEventhubsNamespaceListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetDebug(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetHelp(this AzureEventhubsNamespaceListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetHelp(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetOutput(this AzureEventhubsNamespaceListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetOutput(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetQuery(this AzureEventhubsNamespaceListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetQuery(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings SetVerbose(this AzureEventhubsNamespaceListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceListSettings ResetVerbose(this AzureEventhubsNamespaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetIds(this AzureEventhubsNamespaceShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetIds(this AzureEventhubsNamespaceShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings AddIds(this AzureEventhubsNamespaceShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings AddIds(this AzureEventhubsNamespaceShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ClearIds(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings RemoveIds(this AzureEventhubsNamespaceShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings RemoveIds(this AzureEventhubsNamespaceShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetName(this AzureEventhubsNamespaceShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetName(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetResourceGroup(this AzureEventhubsNamespaceShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetResourceGroup(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetSubscription(this AzureEventhubsNamespaceShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetSubscription(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetDebug(this AzureEventhubsNamespaceShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetDebug(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetHelp(this AzureEventhubsNamespaceShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetHelp(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetOutput(this AzureEventhubsNamespaceShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetOutput(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetQuery(this AzureEventhubsNamespaceShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetQuery(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings SetVerbose(this AzureEventhubsNamespaceShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceShowSettings ResetVerbose(this AzureEventhubsNamespaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceUpdateSettingsExtensions
    {
        #region Capacity
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Capacity"/></em></p>
        ///   <p>Capacity for Sku.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetCapacity(this AzureEventhubsNamespaceUpdateSettings toolSettings, string capacity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capacity = capacity;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Capacity"/></em></p>
        ///   <p>Capacity for Sku.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetCapacity(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capacity = null;
            return toolSettings;
        }
        #endregion
        #region EnableAutoInflate
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetEnableAutoInflate(this AzureEventhubsNamespaceUpdateSettings toolSettings, bool? enableAutoInflate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = enableAutoInflate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetEnableAutoInflate(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings EnableEnableAutoInflate(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings DisableEnableAutoInflate(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsNamespaceUpdateSettings.EnableAutoInflate"/></em></p>
        ///   <p>A boolean value that indicates whether AutoInflate is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ToggleEnableAutoInflate(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutoInflate = !toolSettings.EnableAutoInflate;
            return toolSettings;
        }
        #endregion
        #region EnableKafka
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetEnableKafka(this AzureEventhubsNamespaceUpdateSettings toolSettings, bool? enableKafka)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = enableKafka;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetEnableKafka(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings EnableEnableKafka(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings DisableEnableKafka(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsNamespaceUpdateSettings.EnableKafka"/></em></p>
        ///   <p>A boolean value that indicates whether Kafka is enabled for eventhub namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ToggleEnableKafka(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableKafka = !toolSettings.EnableKafka;
            return toolSettings;
        }
        #endregion
        #region MaximumThroughputUnits
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.MaximumThroughputUnits"/></em></p>
        ///   <p>Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units. ( 0 if AutoInflateEnabled = true).</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetMaximumThroughputUnits(this AzureEventhubsNamespaceUpdateSettings toolSettings, string maximumThroughputUnits)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumThroughputUnits = maximumThroughputUnits;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.MaximumThroughputUnits"/></em></p>
        ///   <p>Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units. ( 0 if AutoInflateEnabled = true).</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetMaximumThroughputUnits(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaximumThroughputUnits = null;
            return toolSettings;
        }
        #endregion
        #region Sku
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Sku"/></em></p>
        ///   <p>Namespace SKU.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetSku(this AzureEventhubsNamespaceUpdateSettings toolSettings, EventhubsNamespaceSku sku)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = sku;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Sku"/></em></p>
        ///   <p>Namespace SKU.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetSku(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Sku = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetTags(this AzureEventhubsNamespaceUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetTags(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetIds(this AzureEventhubsNamespaceUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetIds(this AzureEventhubsNamespaceUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings AddIds(this AzureEventhubsNamespaceUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings AddIds(this AzureEventhubsNamespaceUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ClearIds(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings RemoveIds(this AzureEventhubsNamespaceUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings RemoveIds(this AzureEventhubsNamespaceUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetName(this AzureEventhubsNamespaceUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Name"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetName(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetResourceGroup(this AzureEventhubsNamespaceUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetResourceGroup(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetSubscription(this AzureEventhubsNamespaceUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetSubscription(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAction
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.DefaultAction"/></em></p>
        ///   <p>Default Action for Network Rule Set.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetDefaultAction(this AzureEventhubsNamespaceUpdateSettings toolSettings, EventhubsNamespaceDefaultAction defaultAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = defaultAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.DefaultAction"/></em></p>
        ///   <p>Default Action for Network Rule Set.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetDefaultAction(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAction = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetAdd(this AzureEventhubsNamespaceUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetAdd(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetForceString(this AzureEventhubsNamespaceUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetForceString(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetRemove(this AzureEventhubsNamespaceUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetRemove(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetSet(this AzureEventhubsNamespaceUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetSet(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetDebug(this AzureEventhubsNamespaceUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetDebug(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetHelp(this AzureEventhubsNamespaceUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetHelp(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetOutput(this AzureEventhubsNamespaceUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetOutput(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetQuery(this AzureEventhubsNamespaceUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetQuery(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings SetVerbose(this AzureEventhubsNamespaceUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceUpdateSettings ResetVerbose(this AzureEventhubsNamespaceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleCreateSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetName(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetName(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Rights
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings AddRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings AddRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ClearRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings RemoveRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings RemoveRights(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleCreateSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleDeleteSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ClearIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetName(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetName(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleDeleteSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleListSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleListSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleShowSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ClearIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetName(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetName(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleShowSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleUpdateSettingsExtensions
    {
        #region Rights
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings AddRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings AddRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ClearRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings RemoveRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings RemoveRights(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ClearIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetName(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetName(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetAdd(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetAdd(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetForceString(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetForceString(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetRemove(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetRemove(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetSet(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetSet(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleUpdateSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubConsumerGroupCreateSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetEventhubName(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetEventhubName(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetName(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetName(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetNamespaceName(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetNamespaceName(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetResourceGroup(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetResourceGroup(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region UserMetadata
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.UserMetadata"/></em></p>
        ///   <p>Usermetadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetUserMetadata(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string userMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserMetadata = userMetadata;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.UserMetadata"/></em></p>
        ///   <p>Usermetadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetUserMetadata(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserMetadata = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetSubscription(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetSubscription(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetDebug(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetDebug(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetHelp(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetHelp(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetOutput(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetOutput(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetQuery(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetQuery(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings SetVerbose(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupCreateSettings ResetVerbose(this AzureEventhubsEventhubConsumerGroupCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubConsumerGroupDeleteSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetEventhubName(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetEventhubName(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings AddIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings AddIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ClearIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings RemoveIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings RemoveIds(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetName(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetName(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetNamespaceName(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetNamespaceName(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetResourceGroup(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetResourceGroup(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetSubscription(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetSubscription(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetDebug(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetDebug(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetHelp(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetHelp(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetOutput(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetOutput(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetQuery(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetQuery(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings SetVerbose(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupDeleteSettings ResetVerbose(this AzureEventhubsEventhubConsumerGroupDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubConsumerGroupListSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetEventhubName(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetEventhubName(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetNamespaceName(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetNamespaceName(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetResourceGroup(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetResourceGroup(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Skip
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Skip"/></em></p>
        ///   <p>Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetSkip(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string skip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = skip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Skip"/></em></p>
        ///   <p>Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetSkip(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Skip = null;
            return toolSettings;
        }
        #endregion
        #region Top
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Top"/></em></p>
        ///   <p>May be used to limit the number of results to the most recent N usageDetails.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetTop(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string top)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = top;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Top"/></em></p>
        ///   <p>May be used to limit the number of results to the most recent N usageDetails.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetTop(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Top = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetSubscription(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetSubscription(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetDebug(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetDebug(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetHelp(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetHelp(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetOutput(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetOutput(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetQuery(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetQuery(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings SetVerbose(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupListSettings ResetVerbose(this AzureEventhubsEventhubConsumerGroupListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubConsumerGroupShowSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetEventhubName(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetEventhubName(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings AddIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings AddIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ClearIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings RemoveIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings RemoveIds(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetName(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetName(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetNamespaceName(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetNamespaceName(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetResourceGroup(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetResourceGroup(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetSubscription(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetSubscription(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetDebug(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetDebug(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetHelp(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetHelp(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetOutput(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetOutput(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetQuery(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetQuery(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings SetVerbose(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupShowSettings ResetVerbose(this AzureEventhubsEventhubConsumerGroupShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubConsumerGroupUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubConsumerGroupUpdateSettingsExtensions
    {
        #region UserMetadata
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.UserMetadata"/></em></p>
        ///   <p>Usermetadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetUserMetadata(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string userMetadata)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserMetadata = userMetadata;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.UserMetadata"/></em></p>
        ///   <p>Usermetadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetUserMetadata(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UserMetadata = null;
            return toolSettings;
        }
        #endregion
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetEventhubName(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetEventhubName(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings AddIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings AddIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ClearIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings RemoveIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings RemoveIds(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetName(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Name"/></em></p>
        ///   <p>Name of ConsumerGroup.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetName(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetNamespaceName(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetNamespaceName(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetResourceGroup(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetResourceGroup(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetSubscription(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetSubscription(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetAdd(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetAdd(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetForceString(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetForceString(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetRemove(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetRemove(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetSet(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetSet(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetDebug(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetDebug(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetHelp(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetHelp(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetOutput(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetOutput(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetQuery(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetQuery(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings SetVerbose(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubConsumerGroupUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubConsumerGroupUpdateSettings ResetVerbose(this AzureEventhubsEventhubConsumerGroupUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetAlias(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetAlias(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetSubscription(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetDebug(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetDebug(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetHelp(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetHelp(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetOutput(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetOutput(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetQuery(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetQuery(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings SetVerbose(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetAlias(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetAlias(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings AddIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings AddIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ClearIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings RemoveIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings RemoveIds(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetSubscription(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetDebug(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetDebug(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetHelp(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetHelp(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetOutput(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetOutput(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetQuery(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetQuery(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings SetVerbose(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetName(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetName(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Rights
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings AddRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings AddRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ClearRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings RemoveRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings RemoveRights(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleCreateSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleDeleteSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ClearIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetName(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetName(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleDeleteSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleListSettingsExtensions
    {
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleListSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ClearIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetName(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetName(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleShowSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleUpdateSettingsExtensions
    {
        #region Rights
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/> to a new list</em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal = rights.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings AddRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings AddRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.AddRange(rights);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ClearRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RightsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings RemoveRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, params EventhubsEventhubAuthorizationRuleRights[] rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Rights"/></em></p>
        ///   <p>Space-separated list of Authorization rule rights.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings RemoveRights(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, IEnumerable<EventhubsEventhubAuthorizationRuleRights> rights)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<EventhubsEventhubAuthorizationRuleRights>(rights);
            toolSettings.RightsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ClearIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetName(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetName(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetAdd(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Add"/></em></p>
        ///   <p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetAdd(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region ForceString
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetForceString(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string forceString)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = forceString;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.ForceString"/></em></p>
        ///   <p>When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetForceString(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceString = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetRemove(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Remove"/></em></p>
        ///   <p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetRemove(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetSet(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Set"/></em></p>
        ///   <p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetSet(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleUpdateSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceNetworkRuleAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceNetworkRuleAddSettingsExtensions
    {
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.NamespaceName"/></em></p>
        ///   <p>Name of the Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetNamespaceName(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.NamespaceName"/></em></p>
        ///   <p>Name of the Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetNamespaceName(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetResourceGroup(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetResourceGroup(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Action
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Action"/></em></p>
        ///   <p>Action of the IP rule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetAction(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, EventhubsNamespaceNetworkRuleAddAction action)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Action = action;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Action"/></em></p>
        ///   <p>Action of the IP rule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetAction(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Action = null;
            return toolSettings;
        }
        #endregion
        #region IpAddress
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range - 10.6.0.0/24.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetIpAddress(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string ipAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = ipAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range - 10.6.0.0/24.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetIpAddress(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = null;
            return toolSettings;
        }
        #endregion
        #region IgnoreMissingEndpoint
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></em></p>
        ///   <p>A boolean value that indicates whether to ignore missing vnet Service Endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetIgnoreMissingEndpoint(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, bool? ignoreMissingEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = ignoreMissingEndpoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></em></p>
        ///   <p>A boolean value that indicates whether to ignore missing vnet Service Endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetIgnoreMissingEndpoint(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></em></p>
        ///   <p>A boolean value that indicates whether to ignore missing vnet Service Endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings EnableIgnoreMissingEndpoint(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></em></p>
        ///   <p>A boolean value that indicates whether to ignore missing vnet Service Endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings DisableIgnoreMissingEndpoint(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.IgnoreMissingEndpoint"/></em></p>
        ///   <p>A boolean value that indicates whether to ignore missing vnet Service Endpoint.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ToggleIgnoreMissingEndpoint(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = !toolSettings.IgnoreMissingEndpoint;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetSubnet(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetSubnet(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.VnetName"/></em></p>
        ///   <p>Name of the Virtual Network.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetVnetName(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.VnetName"/></em></p>
        ///   <p>Name of the Virtual Network.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetVnetName(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetSubscription(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetSubscription(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetDebug(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetDebug(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetHelp(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetHelp(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetOutput(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetOutput(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetQuery(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetQuery(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings SetVerbose(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleAddSettings ResetVerbose(this AzureEventhubsNamespaceNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceNetworkRuleListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceNetworkRuleListSettingsExtensions
    {
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of the Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetNamespaceName(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.NamespaceName"/></em></p>
        ///   <p>Name of the Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetNamespaceName(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetResourceGroup(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetResourceGroup(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetSubscription(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetSubscription(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetDebug(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetDebug(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetHelp(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetHelp(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetOutput(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetOutput(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetQuery(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetQuery(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings SetVerbose(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleListSettings ResetVerbose(this AzureEventhubsNamespaceNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceNetworkRuleRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceNetworkRuleRemoveSettingsExtensions
    {
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.NamespaceName"/></em></p>
        ///   <p>Name of the Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetNamespaceName(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.NamespaceName"/></em></p>
        ///   <p>Name of the Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetNamespaceName(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetResourceGroup(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetResourceGroup(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region IpAddress
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range - 10.6.0.0/24.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetIpAddress(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string ipAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = ipAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.IpAddress"/></em></p>
        ///   <p>IPv4 address or CIDR range - 10.6.0.0/24.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetIpAddress(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpAddress = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetSubnet(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subnet"/></em></p>
        ///   <p>Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetSubnet(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.VnetName"/></em></p>
        ///   <p>Name of the Virtual Network.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetVnetName(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.VnetName"/></em></p>
        ///   <p>Name of the Virtual Network.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetVnetName(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetSubscription(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetSubscription(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetDebug(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetDebug(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetHelp(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetHelp(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetOutput(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetOutput(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetQuery(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetQuery(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings SetVerbose(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceNetworkRuleRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceNetworkRuleRemoveSettings ResetVerbose(this AzureEventhubsNamespaceNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleKeysListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleKeysListSettingsExtensions
    {
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetName(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetName(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysListSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsEventhubAuthorizationRuleKeysRenewSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsEventhubAuthorizationRuleKeysRenewSettingsExtensions
    {
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Key"/></em></p>
        ///   <p>Specifies Primary or Secondary key needs to be reset.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetKey(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, EventhubsEventhubAuthorizationRuleKeysKey key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Key"/></em></p>
        ///   <p>Specifies Primary or Secondary key needs to be reset.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetKey(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region KeyValue
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.KeyValue"/></em></p>
        ///   <p>Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetKeyValue(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string keyValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValue = keyValue;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.KeyValue"/></em></p>
        ///   <p>Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetKeyValue(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValue = null;
            return toolSettings;
        }
        #endregion
        #region EventhubName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetEventhubName(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string eventhubName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = eventhubName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.EventhubName"/></em></p>
        ///   <p>Name of EventHub.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetEventhubName(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EventhubName = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings AddIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ClearIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings RemoveIds(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetName(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Name"/></em></p>
        ///   <p>Name of EventHub AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetName(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetNamespaceName(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetResourceGroup(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetSubscription(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetSubscription(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetDebug(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetDebug(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetHelp(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetHelp(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetOutput(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetOutput(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetQuery(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetQuery(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings SetVerbose(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings ResetVerbose(this AzureEventhubsEventhubAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetAlias(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Alias"/></em></p>
        ///   <p>Name of Geo-Disaster Recovery Configuration Alias.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetAlias(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetNamespaceName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetNamespaceName(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetResourceGroup(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetResourceGroup(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetSubscription(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetSubscription(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetDebug(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetDebug(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetHelp(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetHelp(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetOutput(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetOutput(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetQuery(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetQuery(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings SetVerbose(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings ResetVerbose(this AzureEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleKeysListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleKeysListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetName(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetName(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysListSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettingsExtensions
    {
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Key"/></em></p>
        ///   <p>Specifies Primary or Secondary key needs to be reset.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetKey(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, EventhubsEventhubAuthorizationRuleKeysKey key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Key"/></em></p>
        ///   <p>Specifies Primary or Secondary key needs to be reset.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetKey(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region KeyValue
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.KeyValue"/></em></p>
        ///   <p>Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetKeyValue(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string keyValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValue = keyValue;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.KeyValue"/></em></p>
        ///   <p>Optional, if the key value provided, is set for KeyType or autogenerated Key value set for keyType.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetKeyValue(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValue = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings AddIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ClearIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings RemoveIds(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetName(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Name"/></em></p>
        ///   <p>Name of Namespace AuthorizationRule.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetName(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NamespaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string namespaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = namespaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.NamespaceName"/></em></p>
        ///   <p>Name of Namespace.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetNamespaceName(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetResourceGroup(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetSubscription(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetSubscription(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetDebug(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetDebug(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetHelp(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetHelp(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetOutput(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetOutput(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetQuery(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetQuery(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings SetVerbose(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings ResetVerbose(this AzureEventhubsNamespaceAuthorizationRuleKeysRenewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region EventhubsEventhubStatus
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EventhubsEventhubStatus>))]
    public partial class EventhubsEventhubStatus : Enumeration
    {
        public static EventhubsEventhubStatus active = new EventhubsEventhubStatus { Value = "active" };
        public static EventhubsEventhubStatus disabled = new EventhubsEventhubStatus { Value = "disabled" };
        public static EventhubsEventhubStatus receivedisabled = new EventhubsEventhubStatus { Value = "receivedisabled" };
        public static EventhubsEventhubStatus senddisabled = new EventhubsEventhubStatus { Value = "senddisabled" };
    }
    #endregion
    #region EventhubsNamespaceSku
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EventhubsNamespaceSku>))]
    public partial class EventhubsNamespaceSku : Enumeration
    {
        public static EventhubsNamespaceSku basic = new EventhubsNamespaceSku { Value = "basic" };
        public static EventhubsNamespaceSku standard = new EventhubsNamespaceSku { Value = "standard" };
    }
    #endregion
    #region EventhubsNamespaceDefaultAction
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EventhubsNamespaceDefaultAction>))]
    public partial class EventhubsNamespaceDefaultAction : Enumeration
    {
        public static EventhubsNamespaceDefaultAction allow = new EventhubsNamespaceDefaultAction { Value = "allow" };
        public static EventhubsNamespaceDefaultAction deny = new EventhubsNamespaceDefaultAction { Value = "deny" };
    }
    #endregion
    #region EventhubsEventhubAuthorizationRuleRights
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EventhubsEventhubAuthorizationRuleRights>))]
    public partial class EventhubsEventhubAuthorizationRuleRights : Enumeration
    {
        public static EventhubsEventhubAuthorizationRuleRights listen = new EventhubsEventhubAuthorizationRuleRights { Value = "listen" };
        public static EventhubsEventhubAuthorizationRuleRights manage = new EventhubsEventhubAuthorizationRuleRights { Value = "manage" };
        public static EventhubsEventhubAuthorizationRuleRights send = new EventhubsEventhubAuthorizationRuleRights { Value = "send" };
    }
    #endregion
    #region EventhubsNamespaceNetworkRuleAddAction
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EventhubsNamespaceNetworkRuleAddAction>))]
    public partial class EventhubsNamespaceNetworkRuleAddAction : Enumeration
    {
        public static EventhubsNamespaceNetworkRuleAddAction allow = new EventhubsNamespaceNetworkRuleAddAction { Value = "allow" };
    }
    #endregion
    #region EventhubsEventhubAuthorizationRuleKeysKey
    /// <summary>
    ///   Used within <see cref="AzureEventhubsTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EventhubsEventhubAuthorizationRuleKeysKey>))]
    public partial class EventhubsEventhubAuthorizationRuleKeysKey : Enumeration
    {
        public static EventhubsEventhubAuthorizationRuleKeysKey primarykey = new EventhubsEventhubAuthorizationRuleKeysKey { Value = "primarykey" };
        public static EventhubsEventhubAuthorizationRuleKeysKey secondarykey = new EventhubsEventhubAuthorizationRuleKeysKey { Value = "secondarykey" };
    }
    #endregion
}
