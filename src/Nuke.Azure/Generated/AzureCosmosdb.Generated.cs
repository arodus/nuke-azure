// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureCosmosdb.json
// Generated with Nuke.CodeGeneration version 0.20.1 (OSX,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTasks
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public static string AzureCosmosdbPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("AZURECOSMOSDB_EXE") ??
            ToolPathResolver.GetPathExecutable("az");
        public static Action<OutputType, string> AzureCosmosdbLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   Manage Azure Cosmos DB database accounts.
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdb(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(AzureCosmosdbPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, AzureCosmosdbLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCheckNameExists(AzureCosmosdbCheckNameExistsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCheckNameExistsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCheckNameExists(Configure<AzureCosmosdbCheckNameExistsSettings> configurator)
        {
            return AzureCosmosdbCheckNameExists(configurator(new AzureCosmosdbCheckNameExistsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Query"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCheckNameExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCheckNameExistsSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCheckNameExists(CombinatorialConfigure<AzureCosmosdbCheckNameExistsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCheckNameExists, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCreate(AzureCosmosdbCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--capabilities</c> via <see cref="AzureCosmosdbCreateSettings.Capabilities"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCreateSettings.Debug"/></li>
        ///     <li><c>--default-consistency-level</c> via <see cref="AzureCosmosdbCreateSettings.DefaultConsistencyLevel"/></li>
        ///     <li><c>--enable-automatic-failover</c> via <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></li>
        ///     <li><c>--enable-multiple-write-locations</c> via <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></li>
        ///     <li><c>--enable-virtual-network</c> via <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCreateSettings.Help"/></li>
        ///     <li><c>--ip-range-filter</c> via <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></li>
        ///     <li><c>--kind</c> via <see cref="AzureCosmosdbCreateSettings.Kind"/></li>
        ///     <li><c>--locations</c> via <see cref="AzureCosmosdbCreateSettings.Locations"/></li>
        ///     <li><c>--max-interval</c> via <see cref="AzureCosmosdbCreateSettings.MaxInterval"/></li>
        ///     <li><c>--max-staleness-prefix</c> via <see cref="AzureCosmosdbCreateSettings.MaxStalenessPrefix"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureCosmosdbCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCreateSettings.Verbose"/></li>
        ///     <li><c>--virtual-network-rules</c> via <see cref="AzureCosmosdbCreateSettings.VirtualNetworkRules"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCreate(Configure<AzureCosmosdbCreateSettings> configurator)
        {
            return AzureCosmosdbCreate(configurator(new AzureCosmosdbCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--capabilities</c> via <see cref="AzureCosmosdbCreateSettings.Capabilities"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCreateSettings.Debug"/></li>
        ///     <li><c>--default-consistency-level</c> via <see cref="AzureCosmosdbCreateSettings.DefaultConsistencyLevel"/></li>
        ///     <li><c>--enable-automatic-failover</c> via <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></li>
        ///     <li><c>--enable-multiple-write-locations</c> via <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></li>
        ///     <li><c>--enable-virtual-network</c> via <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCreateSettings.Help"/></li>
        ///     <li><c>--ip-range-filter</c> via <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></li>
        ///     <li><c>--kind</c> via <see cref="AzureCosmosdbCreateSettings.Kind"/></li>
        ///     <li><c>--locations</c> via <see cref="AzureCosmosdbCreateSettings.Locations"/></li>
        ///     <li><c>--max-interval</c> via <see cref="AzureCosmosdbCreateSettings.MaxInterval"/></li>
        ///     <li><c>--max-staleness-prefix</c> via <see cref="AzureCosmosdbCreateSettings.MaxStalenessPrefix"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCreateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureCosmosdbCreateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCreateSettings.Verbose"/></li>
        ///     <li><c>--virtual-network-rules</c> via <see cref="AzureCosmosdbCreateSettings.VirtualNetworkRules"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCreate(CombinatorialConfigure<AzureCosmosdbCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbDelete(AzureCosmosdbDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbDelete(Configure<AzureCosmosdbDeleteSettings> configurator)
        {
            return AzureCosmosdbDelete(configurator(new AzureCosmosdbDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDeleteSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbDeleteSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbDelete(CombinatorialConfigure<AzureCosmosdbDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbFailoverPriorityChange(AzureCosmosdbFailoverPriorityChangeSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbFailoverPriorityChangeSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Debug"/></li>
        ///     <li><c>--failover-policies</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbFailoverPriorityChange(Configure<AzureCosmosdbFailoverPriorityChangeSettings> configurator)
        {
            return AzureCosmosdbFailoverPriorityChange(configurator(new AzureCosmosdbFailoverPriorityChangeSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Debug"/></li>
        ///     <li><c>--failover-policies</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbFailoverPriorityChangeSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbFailoverPriorityChange(CombinatorialConfigure<AzureCosmosdbFailoverPriorityChangeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbFailoverPriorityChange, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbList(AzureCosmosdbListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbList(Configure<AzureCosmosdbListSettings> configurator)
        {
            return AzureCosmosdbList(configurator(new AzureCosmosdbListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbList(CombinatorialConfigure<AzureCosmosdbListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbListConnectionStrings(AzureCosmosdbListConnectionStringsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbListConnectionStringsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbListConnectionStrings(Configure<AzureCosmosdbListConnectionStringsSettings> configurator)
        {
            return AzureCosmosdbListConnectionStrings(configurator(new AzureCosmosdbListConnectionStringsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListConnectionStringsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbListConnectionStringsSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbListConnectionStrings(CombinatorialConfigure<AzureCosmosdbListConnectionStringsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbListConnectionStrings, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbListKeys(AzureCosmosdbListKeysSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbListKeysSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListKeysSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbListKeysSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbListKeysSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbListKeys(Configure<AzureCosmosdbListKeysSettings> configurator)
        {
            return AzureCosmosdbListKeys(configurator(new AzureCosmosdbListKeysSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListKeysSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbListKeysSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbListKeysSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbListKeysSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbListKeys(CombinatorialConfigure<AzureCosmosdbListKeysSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbListKeys, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbListReadOnlyKeys(AzureCosmosdbListReadOnlyKeysSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbListReadOnlyKeysSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbListReadOnlyKeys(Configure<AzureCosmosdbListReadOnlyKeysSettings> configurator)
        {
            return AzureCosmosdbListReadOnlyKeys(configurator(new AzureCosmosdbListReadOnlyKeysSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbListReadOnlyKeysSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbListReadOnlyKeysSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbListReadOnlyKeys(CombinatorialConfigure<AzureCosmosdbListReadOnlyKeysSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbListReadOnlyKeys, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbRegenerateKey(AzureCosmosdbRegenerateKeySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbRegenerateKeySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></li>
        ///     <li><c>--key-kind</c> via <see cref="AzureCosmosdbRegenerateKeySettings.KeyKind"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbRegenerateKeySettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbRegenerateKey(Configure<AzureCosmosdbRegenerateKeySettings> configurator)
        {
            return AzureCosmosdbRegenerateKey(configurator(new AzureCosmosdbRegenerateKeySettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></li>
        ///     <li><c>--key-kind</c> via <see cref="AzureCosmosdbRegenerateKeySettings.KeyKind"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbRegenerateKeySettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbRegenerateKeySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbRegenerateKeySettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbRegenerateKey(CombinatorialConfigure<AzureCosmosdbRegenerateKeySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbRegenerateKey, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbShow(AzureCosmosdbShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbShow(Configure<AzureCosmosdbShowSettings> configurator)
        {
            return AzureCosmosdbShow(configurator(new AzureCosmosdbShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbShowSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbShowSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbShow(CombinatorialConfigure<AzureCosmosdbShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbUpdate(AzureCosmosdbUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--capabilities</c> via <see cref="AzureCosmosdbUpdateSettings.Capabilities"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbUpdateSettings.Debug"/></li>
        ///     <li><c>--default-consistency-level</c> via <see cref="AzureCosmosdbUpdateSettings.DefaultConsistencyLevel"/></li>
        ///     <li><c>--enable-automatic-failover</c> via <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></li>
        ///     <li><c>--enable-multiple-write-locations</c> via <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></li>
        ///     <li><c>--enable-virtual-network</c> via <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbUpdateSettings.Ids"/></li>
        ///     <li><c>--ip-range-filter</c> via <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></li>
        ///     <li><c>--locations</c> via <see cref="AzureCosmosdbUpdateSettings.Locations"/></li>
        ///     <li><c>--max-interval</c> via <see cref="AzureCosmosdbUpdateSettings.MaxInterval"/></li>
        ///     <li><c>--max-staleness-prefix</c> via <see cref="AzureCosmosdbUpdateSettings.MaxStalenessPrefix"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureCosmosdbUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbUpdateSettings.Verbose"/></li>
        ///     <li><c>--virtual-network-rules</c> via <see cref="AzureCosmosdbUpdateSettings.VirtualNetworkRules"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbUpdate(Configure<AzureCosmosdbUpdateSettings> configurator)
        {
            return AzureCosmosdbUpdate(configurator(new AzureCosmosdbUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--capabilities</c> via <see cref="AzureCosmosdbUpdateSettings.Capabilities"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbUpdateSettings.Debug"/></li>
        ///     <li><c>--default-consistency-level</c> via <see cref="AzureCosmosdbUpdateSettings.DefaultConsistencyLevel"/></li>
        ///     <li><c>--enable-automatic-failover</c> via <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></li>
        ///     <li><c>--enable-multiple-write-locations</c> via <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></li>
        ///     <li><c>--enable-virtual-network</c> via <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbUpdateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbUpdateSettings.Ids"/></li>
        ///     <li><c>--ip-range-filter</c> via <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></li>
        ///     <li><c>--locations</c> via <see cref="AzureCosmosdbUpdateSettings.Locations"/></li>
        ///     <li><c>--max-interval</c> via <see cref="AzureCosmosdbUpdateSettings.MaxInterval"/></li>
        ///     <li><c>--max-staleness-prefix</c> via <see cref="AzureCosmosdbUpdateSettings.MaxStalenessPrefix"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbUpdateSettings.Subscription"/></li>
        ///     <li><c>--tags</c> via <see cref="AzureCosmosdbUpdateSettings.Tags"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbUpdateSettings.Verbose"/></li>
        ///     <li><c>--virtual-network-rules</c> via <see cref="AzureCosmosdbUpdateSettings.VirtualNetworkRules"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbUpdate(CombinatorialConfigure<AzureCosmosdbUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionCreate(AzureCosmosdbCollectionCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCollectionCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Debug"/></li>
        ///     <li><c>--default-ttl</c> via <see cref="AzureCosmosdbCollectionCreateSettings.DefaultTtl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Help"/></li>
        ///     <li><c>--indexing-policy</c> via <see cref="AzureCosmosdbCollectionCreateSettings.IndexingPolicy"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Output"/></li>
        ///     <li><c>--partition-key-path</c> via <see cref="AzureCosmosdbCollectionCreateSettings.PartitionKeyPath"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Throughput"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionCreateSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionCreate(Configure<AzureCosmosdbCollectionCreateSettings> configurator)
        {
            return AzureCosmosdbCollectionCreate(configurator(new AzureCosmosdbCollectionCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Debug"/></li>
        ///     <li><c>--default-ttl</c> via <see cref="AzureCosmosdbCollectionCreateSettings.DefaultTtl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Help"/></li>
        ///     <li><c>--indexing-policy</c> via <see cref="AzureCosmosdbCollectionCreateSettings.IndexingPolicy"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Output"/></li>
        ///     <li><c>--partition-key-path</c> via <see cref="AzureCosmosdbCollectionCreateSettings.PartitionKeyPath"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionCreateSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Throughput"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionCreateSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCollectionCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCollectionCreate(CombinatorialConfigure<AzureCosmosdbCollectionCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCollectionCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionDelete(AzureCosmosdbCollectionDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCollectionDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionDelete(Configure<AzureCosmosdbCollectionDeleteSettings> configurator)
        {
            return AzureCosmosdbCollectionDelete(configurator(new AzureCosmosdbCollectionDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCollectionDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCollectionDelete(CombinatorialConfigure<AzureCosmosdbCollectionDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCollectionDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionExists(AzureCosmosdbCollectionExistsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCollectionExistsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionExistsSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionExists(Configure<AzureCosmosdbCollectionExistsSettings> configurator)
        {
            return AzureCosmosdbCollectionExists(configurator(new AzureCosmosdbCollectionExistsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionExistsSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionExistsSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCollectionExistsSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCollectionExists(CombinatorialConfigure<AzureCosmosdbCollectionExistsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCollectionExists, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionList(AzureCosmosdbCollectionListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCollectionListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionListSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionListSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionListSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionListSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionListSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionListSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionListSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionList(Configure<AzureCosmosdbCollectionListSettings> configurator)
        {
            return AzureCosmosdbCollectionList(configurator(new AzureCosmosdbCollectionListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionListSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionListSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionListSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionListSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionListSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionListSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionListSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCollectionListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCollectionList(CombinatorialConfigure<AzureCosmosdbCollectionListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCollectionList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionShow(AzureCosmosdbCollectionShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCollectionShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionShowSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionShowSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionShowSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionShowSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionShowSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionShowSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionShowSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionShowSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionShow(Configure<AzureCosmosdbCollectionShowSettings> configurator)
        {
            return AzureCosmosdbCollectionShow(configurator(new AzureCosmosdbCollectionShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionShowSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionShowSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionShowSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionShowSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionShowSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionShowSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionShowSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionShowSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCollectionShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCollectionShow(CombinatorialConfigure<AzureCosmosdbCollectionShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCollectionShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionUpdate(AzureCosmosdbCollectionUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCollectionUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Debug"/></li>
        ///     <li><c>--default-ttl</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.DefaultTtl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Help"/></li>
        ///     <li><c>--indexing-policy</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.IndexingPolicy"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Throughput"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCollectionUpdate(Configure<AzureCosmosdbCollectionUpdateSettings> configurator)
        {
            return AzureCosmosdbCollectionUpdate(configurator(new AzureCosmosdbCollectionUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--collection-name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.CollectionName"/></li>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Debug"/></li>
        ///     <li><c>--default-ttl</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.DefaultTtl"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Help"/></li>
        ///     <li><c>--indexing-policy</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.IndexingPolicy"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Throughput"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCollectionUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCollectionUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCollectionUpdate(CombinatorialConfigure<AzureCosmosdbCollectionUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCollectionUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbNetworkRuleAdd(AzureCosmosdbNetworkRuleAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbNetworkRuleAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></li>
        ///     <li><c>--ignore-missing-vnet-service-endpoint</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Verbose"/></li>
        ///     <li><c>--virtual-network</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.VirtualNetwork"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbNetworkRuleAdd(Configure<AzureCosmosdbNetworkRuleAddSettings> configurator)
        {
            return AzureCosmosdbNetworkRuleAdd(configurator(new AzureCosmosdbNetworkRuleAddSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></li>
        ///     <li><c>--ignore-missing-vnet-service-endpoint</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.Verbose"/></li>
        ///     <li><c>--virtual-network</c> via <see cref="AzureCosmosdbNetworkRuleAddSettings.VirtualNetwork"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbNetworkRuleAddSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbNetworkRuleAdd(CombinatorialConfigure<AzureCosmosdbNetworkRuleAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbNetworkRuleAdd, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbNetworkRuleList(AzureCosmosdbNetworkRuleListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbNetworkRuleListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbNetworkRuleList(Configure<AzureCosmosdbNetworkRuleListSettings> configurator)
        {
            return AzureCosmosdbNetworkRuleList(configurator(new AzureCosmosdbNetworkRuleListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbNetworkRuleListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbNetworkRuleListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbNetworkRuleList(CombinatorialConfigure<AzureCosmosdbNetworkRuleListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbNetworkRuleList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbNetworkRuleRemove(AzureCosmosdbNetworkRuleRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbNetworkRuleRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Verbose"/></li>
        ///     <li><c>--virtual-network</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.VirtualNetwork"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbNetworkRuleRemove(Configure<AzureCosmosdbNetworkRuleRemoveSettings> configurator)
        {
            return AzureCosmosdbNetworkRuleRemove(configurator(new AzureCosmosdbNetworkRuleRemoveSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.ResourceGroup"/></li>
        ///     <li><c>--subnet</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subnet"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Verbose"/></li>
        ///     <li><c>--virtual-network</c> via <see cref="AzureCosmosdbNetworkRuleRemoveSettings.VirtualNetwork"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbNetworkRuleRemoveSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbNetworkRuleRemove(CombinatorialConfigure<AzureCosmosdbNetworkRuleRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbNetworkRuleRemove, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableCreate(AzureCosmosdbTableCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbTableCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbTableCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableCreate(Configure<AzureCosmosdbTableCreateSettings> configurator)
        {
            return AzureCosmosdbTableCreate(configurator(new AzureCosmosdbTableCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbTableCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbTableCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbTableCreate(CombinatorialConfigure<AzureCosmosdbTableCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbTableCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableDelete(AzureCosmosdbTableDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbTableDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableDelete(Configure<AzureCosmosdbTableDeleteSettings> configurator)
        {
            return AzureCosmosdbTableDelete(configurator(new AzureCosmosdbTableDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbTableDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbTableDelete(CombinatorialConfigure<AzureCosmosdbTableDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbTableDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableList(AzureCosmosdbTableListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbTableListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableList(Configure<AzureCosmosdbTableListSettings> configurator)
        {
            return AzureCosmosdbTableList(configurator(new AzureCosmosdbTableListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbTableListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbTableList(CombinatorialConfigure<AzureCosmosdbTableListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbTableList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableShow(AzureCosmosdbTableShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbTableShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableShow(Configure<AzureCosmosdbTableShowSettings> configurator)
        {
            return AzureCosmosdbTableShow(configurator(new AzureCosmosdbTableShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbTableShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbTableShow(CombinatorialConfigure<AzureCosmosdbTableShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbTableShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodb(AzureCosmosdbMongodbSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodb(Configure<AzureCosmosdbMongodbSettings> configurator)
        {
            return AzureCosmosdbMongodb(configurator(new AzureCosmosdbMongodbSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodb(CombinatorialConfigure<AzureCosmosdbMongodbSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodb, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandra(AzureCosmosdbCassandraSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandra(Configure<AzureCosmosdbCassandraSettings> configurator)
        {
            return AzureCosmosdbCassandra(configurator(new AzureCosmosdbCassandraSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandra(CombinatorialConfigure<AzureCosmosdbCassandraSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandra, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlin(AzureCosmosdbGremlinSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlin(Configure<AzureCosmosdbGremlinSettings> configurator)
        {
            return AzureCosmosdbGremlin(configurator(new AzureCosmosdbGremlinSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlin(CombinatorialConfigure<AzureCosmosdbGremlinSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlin, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseCreate(AzureCosmosdbDatabaseCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbDatabaseCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseCreate(Configure<AzureCosmosdbDatabaseCreateSettings> configurator)
        {
            return AzureCosmosdbDatabaseCreate(configurator(new AzureCosmosdbDatabaseCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbDatabaseCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbDatabaseCreate(CombinatorialConfigure<AzureCosmosdbDatabaseCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbDatabaseCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseDelete(AzureCosmosdbDatabaseDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbDatabaseDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseDelete(Configure<AzureCosmosdbDatabaseDeleteSettings> configurator)
        {
            return AzureCosmosdbDatabaseDelete(configurator(new AzureCosmosdbDatabaseDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbDatabaseDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbDatabaseDelete(CombinatorialConfigure<AzureCosmosdbDatabaseDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbDatabaseDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseExists(AzureCosmosdbDatabaseExistsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbDatabaseExistsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseExists(Configure<AzureCosmosdbDatabaseExistsSettings> configurator)
        {
            return AzureCosmosdbDatabaseExists(configurator(new AzureCosmosdbDatabaseExistsSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseExistsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbDatabaseExistsSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbDatabaseExists(CombinatorialConfigure<AzureCosmosdbDatabaseExistsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbDatabaseExists, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseList(AzureCosmosdbDatabaseListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbDatabaseListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseListSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseListSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseListSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseListSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseList(Configure<AzureCosmosdbDatabaseListSettings> configurator)
        {
            return AzureCosmosdbDatabaseList(configurator(new AzureCosmosdbDatabaseListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseListSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseListSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseListSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseListSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbDatabaseListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbDatabaseList(CombinatorialConfigure<AzureCosmosdbDatabaseListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbDatabaseList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseShow(AzureCosmosdbDatabaseShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbDatabaseShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseShowSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseShowSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseShowSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbDatabaseShow(Configure<AzureCosmosdbDatabaseShowSettings> configurator)
        {
            return AzureCosmosdbDatabaseShow(configurator(new AzureCosmosdbDatabaseShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--db-name</c> via <see cref="AzureCosmosdbDatabaseShowSettings.DbName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Help"/></li>
        ///     <li><c>--key</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Key"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group-name</c> via <see cref="AzureCosmosdbDatabaseShowSettings.ResourceGroupName"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--url-connection</c> via <see cref="AzureCosmosdbDatabaseShowSettings.UrlConnection"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbDatabaseShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbDatabaseShow(CombinatorialConfigure<AzureCosmosdbDatabaseShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbDatabaseShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSql(AzureCosmosdbSqlSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSql(Configure<AzureCosmosdbSqlSettings> configurator)
        {
            return AzureCosmosdbSql(configurator(new AzureCosmosdbSqlSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlSettings.Query"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSql(CombinatorialConfigure<AzureCosmosdbSqlSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSql, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbKeysList(AzureCosmosdbKeysListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbKeysListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbKeysListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbKeysListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbKeysListSettings.Subscription"/></li>
        ///     <li><c>--type</c> via <see cref="AzureCosmosdbKeysListSettings.Type"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbKeysList(Configure<AzureCosmosdbKeysListSettings> configurator)
        {
            return AzureCosmosdbKeysList(configurator(new AzureCosmosdbKeysListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbKeysListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbKeysListSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbKeysListSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbKeysListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbKeysListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbKeysListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbKeysListSettings.Subscription"/></li>
        ///     <li><c>--type</c> via <see cref="AzureCosmosdbKeysListSettings.Type"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbKeysListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbKeysListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbKeysList(CombinatorialConfigure<AzureCosmosdbKeysListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbKeysList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbKeysRegenerate(AzureCosmosdbKeysRegenerateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbKeysRegenerateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></li>
        ///     <li><c>--key-kind</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.KeyKind"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbKeysRegenerate(Configure<AzureCosmosdbKeysRegenerateSettings> configurator)
        {
            return AzureCosmosdbKeysRegenerate(configurator(new AzureCosmosdbKeysRegenerateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Help"/></li>
        ///     <li><c>--ids</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></li>
        ///     <li><c>--key-kind</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.KeyKind"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbKeysRegenerateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbKeysRegenerateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbKeysRegenerate(CombinatorialConfigure<AzureCosmosdbKeysRegenerateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbKeysRegenerate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphCreate(AzureCosmosdbGremlinGraphCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Output"/></li>
        ///     <li><c>--partition-key-path</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.PartitionKeyPath"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Throughput"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphCreate(Configure<AzureCosmosdbGremlinGraphCreateSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphCreate(configurator(new AzureCosmosdbGremlinGraphCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Output"/></li>
        ///     <li><c>--partition-key-path</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.PartitionKeyPath"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Throughput"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphCreate(CombinatorialConfigure<AzureCosmosdbGremlinGraphCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphDelete(AzureCosmosdbGremlinGraphDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphDelete(Configure<AzureCosmosdbGremlinGraphDeleteSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphDelete(configurator(new AzureCosmosdbGremlinGraphDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphDelete(CombinatorialConfigure<AzureCosmosdbGremlinGraphDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphList(AzureCosmosdbGremlinGraphListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphList(Configure<AzureCosmosdbGremlinGraphListSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphList(configurator(new AzureCosmosdbGremlinGraphListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphList(CombinatorialConfigure<AzureCosmosdbGremlinGraphListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphShow(AzureCosmosdbGremlinGraphShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphShow(Configure<AzureCosmosdbGremlinGraphShowSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphShow(configurator(new AzureCosmosdbGremlinGraphShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphShow(CombinatorialConfigure<AzureCosmosdbGremlinGraphShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphUpdate(AzureCosmosdbGremlinGraphUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Subscription"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphUpdate(Configure<AzureCosmosdbGremlinGraphUpdateSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphUpdate(configurator(new AzureCosmosdbGremlinGraphUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Subscription"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphUpdate(CombinatorialConfigure<AzureCosmosdbGremlinGraphUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseCreate(AzureCosmosdbGremlinDatabaseCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinDatabaseCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseCreate(Configure<AzureCosmosdbGremlinDatabaseCreateSettings> configurator)
        {
            return AzureCosmosdbGremlinDatabaseCreate(configurator(new AzureCosmosdbGremlinDatabaseCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinDatabaseCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinDatabaseCreate(CombinatorialConfigure<AzureCosmosdbGremlinDatabaseCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinDatabaseCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseDelete(AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinDatabaseDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseDelete(Configure<AzureCosmosdbGremlinDatabaseDeleteSettings> configurator)
        {
            return AzureCosmosdbGremlinDatabaseDelete(configurator(new AzureCosmosdbGremlinDatabaseDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinDatabaseDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinDatabaseDelete(CombinatorialConfigure<AzureCosmosdbGremlinDatabaseDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinDatabaseDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseList(AzureCosmosdbGremlinDatabaseListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinDatabaseListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseList(Configure<AzureCosmosdbGremlinDatabaseListSettings> configurator)
        {
            return AzureCosmosdbGremlinDatabaseList(configurator(new AzureCosmosdbGremlinDatabaseListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinDatabaseListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinDatabaseList(CombinatorialConfigure<AzureCosmosdbGremlinDatabaseListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinDatabaseList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseShow(AzureCosmosdbGremlinDatabaseShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinDatabaseShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseShow(Configure<AzureCosmosdbGremlinDatabaseShowSettings> configurator)
        {
            return AzureCosmosdbGremlinDatabaseShow(configurator(new AzureCosmosdbGremlinDatabaseShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinDatabaseShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinDatabaseShow(CombinatorialConfigure<AzureCosmosdbGremlinDatabaseShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinDatabaseShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionCreate(AzureCosmosdbMongodbCollectionCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--shard</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Shard"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionCreate(Configure<AzureCosmosdbMongodbCollectionCreateSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionCreate(configurator(new AzureCosmosdbMongodbCollectionCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--shard</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Shard"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionCreate(CombinatorialConfigure<AzureCosmosdbMongodbCollectionCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionDelete(AzureCosmosdbMongodbCollectionDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionDelete(Configure<AzureCosmosdbMongodbCollectionDeleteSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionDelete(configurator(new AzureCosmosdbMongodbCollectionDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionDelete(CombinatorialConfigure<AzureCosmosdbMongodbCollectionDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionList(AzureCosmosdbMongodbCollectionListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionList(Configure<AzureCosmosdbMongodbCollectionListSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionList(configurator(new AzureCosmosdbMongodbCollectionListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionList(CombinatorialConfigure<AzureCosmosdbMongodbCollectionListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionShow(AzureCosmosdbMongodbCollectionShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionShow(Configure<AzureCosmosdbMongodbCollectionShowSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionShow(configurator(new AzureCosmosdbMongodbCollectionShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionShow(CombinatorialConfigure<AzureCosmosdbMongodbCollectionShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionUpdate(AzureCosmosdbMongodbCollectionUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionUpdate(Configure<AzureCosmosdbMongodbCollectionUpdateSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionUpdate(configurator(new AzureCosmosdbMongodbCollectionUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionUpdate(CombinatorialConfigure<AzureCosmosdbMongodbCollectionUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseCreate(AzureCosmosdbMongodbDatabaseCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbDatabaseCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseCreate(Configure<AzureCosmosdbMongodbDatabaseCreateSettings> configurator)
        {
            return AzureCosmosdbMongodbDatabaseCreate(configurator(new AzureCosmosdbMongodbDatabaseCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbDatabaseCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbDatabaseCreate(CombinatorialConfigure<AzureCosmosdbMongodbDatabaseCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbDatabaseCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseDelete(AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbDatabaseDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseDelete(Configure<AzureCosmosdbMongodbDatabaseDeleteSettings> configurator)
        {
            return AzureCosmosdbMongodbDatabaseDelete(configurator(new AzureCosmosdbMongodbDatabaseDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbDatabaseDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbDatabaseDelete(CombinatorialConfigure<AzureCosmosdbMongodbDatabaseDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbDatabaseDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseList(AzureCosmosdbMongodbDatabaseListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbDatabaseListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseList(Configure<AzureCosmosdbMongodbDatabaseListSettings> configurator)
        {
            return AzureCosmosdbMongodbDatabaseList(configurator(new AzureCosmosdbMongodbDatabaseListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbDatabaseListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbDatabaseList(CombinatorialConfigure<AzureCosmosdbMongodbDatabaseListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbDatabaseList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseShow(AzureCosmosdbMongodbDatabaseShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbDatabaseShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseShow(Configure<AzureCosmosdbMongodbDatabaseShowSettings> configurator)
        {
            return AzureCosmosdbMongodbDatabaseShow(configurator(new AzureCosmosdbMongodbDatabaseShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbDatabaseShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbDatabaseShow(CombinatorialConfigure<AzureCosmosdbMongodbDatabaseShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbDatabaseShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableThroughputShow(AzureCosmosdbTableThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbTableThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableThroughputShow(Configure<AzureCosmosdbTableThroughputShowSettings> configurator)
        {
            return AzureCosmosdbTableThroughputShow(configurator(new AzureCosmosdbTableThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbTableThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbTableThroughputShow(CombinatorialConfigure<AzureCosmosdbTableThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbTableThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableThroughputUpdate(AzureCosmosdbTableThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbTableThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbTableThroughputUpdate(Configure<AzureCosmosdbTableThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbTableThroughputUpdate(configurator(new AzureCosmosdbTableThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbTableThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbTableThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbTableThroughputUpdate(CombinatorialConfigure<AzureCosmosdbTableThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbTableThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableCreate(AzureCosmosdbCassandraTableCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--schema</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Schema"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Throughput"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableCreate(Configure<AzureCosmosdbCassandraTableCreateSettings> configurator)
        {
            return AzureCosmosdbCassandraTableCreate(configurator(new AzureCosmosdbCassandraTableCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--schema</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Schema"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Throughput"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableCreate(CombinatorialConfigure<AzureCosmosdbCassandraTableCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableDelete(AzureCosmosdbCassandraTableDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableDelete(Configure<AzureCosmosdbCassandraTableDeleteSettings> configurator)
        {
            return AzureCosmosdbCassandraTableDelete(configurator(new AzureCosmosdbCassandraTableDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableDelete(CombinatorialConfigure<AzureCosmosdbCassandraTableDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableList(AzureCosmosdbCassandraTableListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableListSettings.KeyspaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableList(Configure<AzureCosmosdbCassandraTableListSettings> configurator)
        {
            return AzureCosmosdbCassandraTableList(configurator(new AzureCosmosdbCassandraTableListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableListSettings.KeyspaceName"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableList(CombinatorialConfigure<AzureCosmosdbCassandraTableListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableShow(AzureCosmosdbCassandraTableShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableShow(Configure<AzureCosmosdbCassandraTableShowSettings> configurator)
        {
            return AzureCosmosdbCassandraTableShow(configurator(new AzureCosmosdbCassandraTableShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableShow(CombinatorialConfigure<AzureCosmosdbCassandraTableShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableUpdate(AzureCosmosdbCassandraTableUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--schema</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Schema"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Subscription"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableUpdate(Configure<AzureCosmosdbCassandraTableUpdateSettings> configurator)
        {
            return AzureCosmosdbCassandraTableUpdate(configurator(new AzureCosmosdbCassandraTableUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--schema</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Schema"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Subscription"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableUpdate(CombinatorialConfigure<AzureCosmosdbCassandraTableUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceCreate(AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraKeyspaceCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceCreate(Configure<AzureCosmosdbCassandraKeyspaceCreateSettings> configurator)
        {
            return AzureCosmosdbCassandraKeyspaceCreate(configurator(new AzureCosmosdbCassandraKeyspaceCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraKeyspaceCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraKeyspaceCreate(CombinatorialConfigure<AzureCosmosdbCassandraKeyspaceCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraKeyspaceCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceDelete(AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraKeyspaceDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceDelete(Configure<AzureCosmosdbCassandraKeyspaceDeleteSettings> configurator)
        {
            return AzureCosmosdbCassandraKeyspaceDelete(configurator(new AzureCosmosdbCassandraKeyspaceDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraKeyspaceDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraKeyspaceDelete(CombinatorialConfigure<AzureCosmosdbCassandraKeyspaceDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraKeyspaceDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceList(AzureCosmosdbCassandraKeyspaceListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraKeyspaceListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceList(Configure<AzureCosmosdbCassandraKeyspaceListSettings> configurator)
        {
            return AzureCosmosdbCassandraKeyspaceList(configurator(new AzureCosmosdbCassandraKeyspaceListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraKeyspaceListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraKeyspaceList(CombinatorialConfigure<AzureCosmosdbCassandraKeyspaceListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraKeyspaceList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceShow(AzureCosmosdbCassandraKeyspaceShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraKeyspaceShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceShow(Configure<AzureCosmosdbCassandraKeyspaceShowSettings> configurator)
        {
            return AzureCosmosdbCassandraKeyspaceShow(configurator(new AzureCosmosdbCassandraKeyspaceShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraKeyspaceShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraKeyspaceShow(CombinatorialConfigure<AzureCosmosdbCassandraKeyspaceShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraKeyspaceShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseCreate(AzureCosmosdbSqlDatabaseCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlDatabaseCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseCreate(Configure<AzureCosmosdbSqlDatabaseCreateSettings> configurator)
        {
            return AzureCosmosdbSqlDatabaseCreate(configurator(new AzureCosmosdbSqlDatabaseCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlDatabaseCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlDatabaseCreate(CombinatorialConfigure<AzureCosmosdbSqlDatabaseCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlDatabaseCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseDelete(AzureCosmosdbSqlDatabaseDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlDatabaseDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseDelete(Configure<AzureCosmosdbSqlDatabaseDeleteSettings> configurator)
        {
            return AzureCosmosdbSqlDatabaseDelete(configurator(new AzureCosmosdbSqlDatabaseDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlDatabaseDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlDatabaseDelete(CombinatorialConfigure<AzureCosmosdbSqlDatabaseDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlDatabaseDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseList(AzureCosmosdbSqlDatabaseListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlDatabaseListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseList(Configure<AzureCosmosdbSqlDatabaseListSettings> configurator)
        {
            return AzureCosmosdbSqlDatabaseList(configurator(new AzureCosmosdbSqlDatabaseListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlDatabaseListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlDatabaseList(CombinatorialConfigure<AzureCosmosdbSqlDatabaseListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlDatabaseList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseShow(AzureCosmosdbSqlDatabaseShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlDatabaseShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseShow(Configure<AzureCosmosdbSqlDatabaseShowSettings> configurator)
        {
            return AzureCosmosdbSqlDatabaseShow(configurator(new AzureCosmosdbSqlDatabaseShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlDatabaseShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlDatabaseShow(CombinatorialConfigure<AzureCosmosdbSqlDatabaseShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlDatabaseShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerCreate(AzureCosmosdbSqlContainerCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Output"/></li>
        ///     <li><c>--partition-key-path</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.PartitionKeyPath"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Throughput"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerCreate(Configure<AzureCosmosdbSqlContainerCreateSettings> configurator)
        {
            return AzureCosmosdbSqlContainerCreate(configurator(new AzureCosmosdbSqlContainerCreateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Output"/></li>
        ///     <li><c>--partition-key-path</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.PartitionKeyPath"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Throughput"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerCreateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerCreateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerCreate(CombinatorialConfigure<AzureCosmosdbSqlContainerCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerCreate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerDelete(AzureCosmosdbSqlContainerDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerDelete(Configure<AzureCosmosdbSqlContainerDeleteSettings> configurator)
        {
            return AzureCosmosdbSqlContainerDelete(configurator(new AzureCosmosdbSqlContainerDeleteSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerDeleteSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerDeleteSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerDelete(CombinatorialConfigure<AzureCosmosdbSqlContainerDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerDelete, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerList(AzureCosmosdbSqlContainerListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerListSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerListSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerList(Configure<AzureCosmosdbSqlContainerListSettings> configurator)
        {
            return AzureCosmosdbSqlContainerList(configurator(new AzureCosmosdbSqlContainerListSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerListSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerListSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Help"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerListSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerListSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerList(CombinatorialConfigure<AzureCosmosdbSqlContainerListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerList, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerShow(AzureCosmosdbSqlContainerShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerShow(Configure<AzureCosmosdbSqlContainerShowSettings> configurator)
        {
            return AzureCosmosdbSqlContainerShow(configurator(new AzureCosmosdbSqlContainerShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerShow(CombinatorialConfigure<AzureCosmosdbSqlContainerShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerUpdate(AzureCosmosdbSqlContainerUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Subscription"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerUpdate(Configure<AzureCosmosdbSqlContainerUpdateSettings> configurator)
        {
            return AzureCosmosdbSqlContainerUpdate(configurator(new AzureCosmosdbSqlContainerUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Help"/></li>
        ///     <li><c>--idx</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Idx"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Subscription"/></li>
        ///     <li><c>--ttl</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Ttl"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerUpdate(CombinatorialConfigure<AzureCosmosdbSqlContainerUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseThroughputShow(AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinDatabaseThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseThroughputShow(Configure<AzureCosmosdbGremlinDatabaseThroughputShowSettings> configurator)
        {
            return AzureCosmosdbGremlinDatabaseThroughputShow(configurator(new AzureCosmosdbGremlinDatabaseThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinDatabaseThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinDatabaseThroughputShow(CombinatorialConfigure<AzureCosmosdbGremlinDatabaseThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinDatabaseThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseThroughputUpdate(AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinDatabaseThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinDatabaseThroughputUpdate(Configure<AzureCosmosdbGremlinDatabaseThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbGremlinDatabaseThroughputUpdate(configurator(new AzureCosmosdbGremlinDatabaseThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinDatabaseThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinDatabaseThroughputUpdate(CombinatorialConfigure<AzureCosmosdbGremlinDatabaseThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinDatabaseThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphThroughputShow(AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphThroughputShow(Configure<AzureCosmosdbGremlinGraphThroughputShowSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphThroughputShow(configurator(new AzureCosmosdbGremlinGraphThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphThroughputShow(CombinatorialConfigure<AzureCosmosdbGremlinGraphThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphThroughputUpdate(AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbGremlinGraphThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbGremlinGraphThroughputUpdate(Configure<AzureCosmosdbGremlinGraphThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbGremlinGraphThroughputUpdate(configurator(new AzureCosmosdbGremlinGraphThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbGremlinGraphThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbGremlinGraphThroughputUpdate(CombinatorialConfigure<AzureCosmosdbGremlinGraphThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbGremlinGraphThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseThroughputShow(AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbDatabaseThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseThroughputShow(Configure<AzureCosmosdbMongodbDatabaseThroughputShowSettings> configurator)
        {
            return AzureCosmosdbMongodbDatabaseThroughputShow(configurator(new AzureCosmosdbMongodbDatabaseThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbDatabaseThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbDatabaseThroughputShow(CombinatorialConfigure<AzureCosmosdbMongodbDatabaseThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbDatabaseThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseThroughputUpdate(AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbDatabaseThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbDatabaseThroughputUpdate(Configure<AzureCosmosdbMongodbDatabaseThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbMongodbDatabaseThroughputUpdate(configurator(new AzureCosmosdbMongodbDatabaseThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbDatabaseThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbDatabaseThroughputUpdate(CombinatorialConfigure<AzureCosmosdbMongodbDatabaseThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbDatabaseThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionThroughputShow(AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionThroughputShow(Configure<AzureCosmosdbMongodbCollectionThroughputShowSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionThroughputShow(configurator(new AzureCosmosdbMongodbCollectionThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionThroughputShow(CombinatorialConfigure<AzureCosmosdbMongodbCollectionThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionThroughputUpdate(AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbMongodbCollectionThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbMongodbCollectionThroughputUpdate(Configure<AzureCosmosdbMongodbCollectionThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbMongodbCollectionThroughputUpdate(configurator(new AzureCosmosdbMongodbCollectionThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbMongodbCollectionThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbMongodbCollectionThroughputUpdate(CombinatorialConfigure<AzureCosmosdbMongodbCollectionThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbMongodbCollectionThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceThroughputShow(AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraKeyspaceThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceThroughputShow(Configure<AzureCosmosdbCassandraKeyspaceThroughputShowSettings> configurator)
        {
            return AzureCosmosdbCassandraKeyspaceThroughputShow(configurator(new AzureCosmosdbCassandraKeyspaceThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraKeyspaceThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraKeyspaceThroughputShow(CombinatorialConfigure<AzureCosmosdbCassandraKeyspaceThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraKeyspaceThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceThroughputUpdate(AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraKeyspaceThroughputUpdate(Configure<AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbCassandraKeyspaceThroughputUpdate(configurator(new AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraKeyspaceThroughputUpdate(CombinatorialConfigure<AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraKeyspaceThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableThroughputShow(AzureCosmosdbCassandraTableThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableThroughputShow(Configure<AzureCosmosdbCassandraTableThroughputShowSettings> configurator)
        {
            return AzureCosmosdbCassandraTableThroughputShow(configurator(new AzureCosmosdbCassandraTableThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableThroughputShow(CombinatorialConfigure<AzureCosmosdbCassandraTableThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableThroughputUpdate(AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbCassandraTableThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbCassandraTableThroughputUpdate(Configure<AzureCosmosdbCassandraTableThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbCassandraTableThroughputUpdate(configurator(new AzureCosmosdbCassandraTableThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--keyspace-name</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.KeyspaceName"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbCassandraTableThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbCassandraTableThroughputUpdate(CombinatorialConfigure<AzureCosmosdbCassandraTableThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbCassandraTableThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseThroughputShow(AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlDatabaseThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseThroughputShow(Configure<AzureCosmosdbSqlDatabaseThroughputShowSettings> configurator)
        {
            return AzureCosmosdbSqlDatabaseThroughputShow(configurator(new AzureCosmosdbSqlDatabaseThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlDatabaseThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlDatabaseThroughputShow(CombinatorialConfigure<AzureCosmosdbSqlDatabaseThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlDatabaseThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseThroughputUpdate(AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlDatabaseThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlDatabaseThroughputUpdate(Configure<AzureCosmosdbSqlDatabaseThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbSqlDatabaseThroughputUpdate(configurator(new AzureCosmosdbSqlDatabaseThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlDatabaseThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlDatabaseThroughputUpdate(CombinatorialConfigure<AzureCosmosdbSqlDatabaseThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlDatabaseThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerThroughputShow(AzureCosmosdbSqlContainerThroughputShowSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerThroughputShowSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerThroughputShow(Configure<AzureCosmosdbSqlContainerThroughputShowSettings> configurator)
        {
            return AzureCosmosdbSqlContainerThroughputShow(configurator(new AzureCosmosdbSqlContainerThroughputShowSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Subscription"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerThroughputShowSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerThroughputShow(CombinatorialConfigure<AzureCosmosdbSqlContainerThroughputShowSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerThroughputShow, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerThroughputUpdate(AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new AzureCosmosdbSqlContainerThroughputUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> AzureCosmosdbSqlContainerThroughputUpdate(Configure<AzureCosmosdbSqlContainerThroughputUpdateSettings> configurator)
        {
            return AzureCosmosdbSqlContainerThroughputUpdate(configurator(new AzureCosmosdbSqlContainerThroughputUpdateSettings()));
        }
        /// <summary>
        ///   <p>Manage Azure Cosmos DB database accounts.</p>
        ///   <p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--account-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.AccountName"/></li>
        ///     <li><c>--database-name</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.DatabaseName"/></li>
        ///     <li><c>--debug</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Debug"/></li>
        ///     <li><c>--help</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Help"/></li>
        ///     <li><c>--name</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Name"/></li>
        ///     <li><c>--output</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Output"/></li>
        ///     <li><c>--query</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Query"/></li>
        ///     <li><c>--resource-group</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.ResourceGroup"/></li>
        ///     <li><c>--subscription</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Subscription"/></li>
        ///     <li><c>--throughput</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Throughput"/></li>
        ///     <li><c>--verbose</c> via <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(AzureCosmosdbSqlContainerThroughputUpdateSettings Settings, IReadOnlyCollection<Output> Output)> AzureCosmosdbSqlContainerThroughputUpdate(CombinatorialConfigure<AzureCosmosdbSqlContainerThroughputUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(AzureCosmosdbSqlContainerThroughputUpdate, AzureCosmosdbLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region AzureCosmosdbCheckNameExistsSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCheckNameExistsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb check-name-exists")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Set custom capabilities on the Cosmos DB database account.
        /// </summary>
        public virtual string Capabilities { get; internal set; }
        /// <summary>
        ///   Default consistency level of the Cosmos DB database account.
        /// </summary>
        public virtual CosmosdbDefaultConsistencyLevel DefaultConsistencyLevel { get; internal set; }
        /// <summary>
        ///   Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        /// </summary>
        public virtual bool? EnableAutomaticFailover { get; internal set; }
        /// <summary>
        ///   Enable Multiple Write Locations.
        /// </summary>
        public virtual bool? EnableMultipleWriteLocations { get; internal set; }
        /// <summary>
        ///   Enables virtual network on the Cosmos DB database account.
        /// </summary>
        public virtual bool? EnableVirtualNetwork { get; internal set; }
        /// <summary>
        ///   Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.
        /// </summary>
        public virtual IReadOnlyList<string> IpRangeFilter => IpRangeFilterInternal.AsReadOnly();
        internal List<string> IpRangeFilterInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The type of Cosmos DB database account to create.
        /// </summary>
        public virtual CosmosdbCreateKind Kind { get; internal set; }
        /// <summary>
        ///   Add a location to the Cosmos DB database account.
        /// </summary>
        public virtual string Locations { get; internal set; }
        /// <summary>
        ///   When used with Bounded Staleness consistency, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 1 - 100.
        /// </summary>
        public virtual string MaxInterval { get; internal set; }
        /// <summary>
        ///   When used with Bounded Staleness consistency, this value represents the number of stale requests tolerated. Accepted range for this value is 1 - 2,147,483,647.
        /// </summary>
        public virtual string MaxStalenessPrefix { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   ACL's for virtual network.
        /// </summary>
        public virtual string VirtualNetworkRules { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--capabilities {value}", Capabilities)
              .Add("--default-consistency-level {value}", DefaultConsistencyLevel)
              .Add("--enable-automatic-failover", EnableAutomaticFailover)
              .Add("--enable-multiple-write-locations", EnableMultipleWriteLocations)
              .Add("--enable-virtual-network", EnableVirtualNetwork)
              .Add("--ip-range-filter {value}", IpRangeFilter, separator: ',')
              .Add("--kind {value}", Kind)
              .Add("--locations {value}", Locations)
              .Add("--max-interval {value}", MaxInterval)
              .Add("--max-staleness-prefix {value}", MaxStalenessPrefix)
              .Add("--tags {value}", Tags)
              .Add("--virtual-network-rules {value}", VirtualNetworkRules)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb delete")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbFailoverPriorityChangeSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbFailoverPriorityChangeSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.
        /// </summary>
        public virtual IReadOnlyList<string> FailoverPolicies => FailoverPoliciesInternal.AsReadOnly();
        internal List<string> FailoverPoliciesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb failover-priority-change")
              .Add("--failover-policies {value}", FailoverPolicies, separator: ' ')
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbListConnectionStringsSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbListConnectionStringsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb list-connection-strings")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbListKeysSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbListKeysSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb list-keys")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbListReadOnlyKeysSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbListReadOnlyKeysSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb list-read-only-keys")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbRegenerateKeySettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbRegenerateKeySettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   The access key to regenerate.
        /// </summary>
        public virtual CosmosdbKeyKind KeyKind { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb regenerate-key")
              .Add("--key-kind {value}", KeyKind)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb show")
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Set custom capabilities on the Cosmos DB database account.
        /// </summary>
        public virtual string Capabilities { get; internal set; }
        /// <summary>
        ///   Default consistency level of the Cosmos DB database account.
        /// </summary>
        public virtual CosmosdbDefaultConsistencyLevel DefaultConsistencyLevel { get; internal set; }
        /// <summary>
        ///   Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        /// </summary>
        public virtual bool? EnableAutomaticFailover { get; internal set; }
        /// <summary>
        ///   Enable Multiple Write Locations.
        /// </summary>
        public virtual bool? EnableMultipleWriteLocations { get; internal set; }
        /// <summary>
        ///   Enables virtual network on the Cosmos DB database account.
        /// </summary>
        public virtual bool? EnableVirtualNetwork { get; internal set; }
        /// <summary>
        ///   Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.
        /// </summary>
        public virtual IReadOnlyList<string> IpRangeFilter => IpRangeFilterInternal.AsReadOnly();
        internal List<string> IpRangeFilterInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a location to the Cosmos DB database account.
        /// </summary>
        public virtual string Locations { get; internal set; }
        /// <summary>
        ///   When used with Bounded Staleness consistency, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 1 - 100.
        /// </summary>
        public virtual string MaxInterval { get; internal set; }
        /// <summary>
        ///   When used with Bounded Staleness consistency, this value represents the number of stale requests tolerated. Accepted range for this value is 1 - 2,147,483,647.
        /// </summary>
        public virtual string MaxStalenessPrefix { get; internal set; }
        /// <summary>
        ///   Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.
        /// </summary>
        public virtual string Tags { get; internal set; }
        /// <summary>
        ///   ACL's for virtual network.
        /// </summary>
        public virtual string VirtualNetworkRules { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb update")
              .Add("--capabilities {value}", Capabilities)
              .Add("--default-consistency-level {value}", DefaultConsistencyLevel)
              .Add("--enable-automatic-failover", EnableAutomaticFailover)
              .Add("--enable-multiple-write-locations", EnableMultipleWriteLocations)
              .Add("--enable-virtual-network", EnableVirtualNetwork)
              .Add("--ip-range-filter {value}", IpRangeFilter, separator: ',')
              .Add("--locations {value}", Locations)
              .Add("--max-interval {value}", MaxInterval)
              .Add("--max-staleness-prefix {value}", MaxStalenessPrefix)
              .Add("--tags {value}", Tags)
              .Add("--virtual-network-rules {value}", VirtualNetworkRules)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCollectionCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCollectionCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Collection Name.
        /// </summary>
        public virtual string CollectionName { get; internal set; }
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Default TTL. Provide 0 to disable.
        /// </summary>
        public virtual string DefaultTtl { get; internal set; }
        /// <summary>
        ///   Indexing Policy, you can enter it as a string or as a file, e.g., --indexing-policy @policy-file.json).
        /// </summary>
        public virtual string IndexingPolicy { get; internal set; }
        /// <summary>
        ///   Partition Key Path, e.g., '/properties/name'.
        /// </summary>
        public virtual string PartitionKeyPath { get; internal set; }
        /// <summary>
        ///   Offer Throughput (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb collection create")
              .Add("--collection-name {value}", CollectionName)
              .Add("--db-name {value}", DbName)
              .Add("--default-ttl {value}", DefaultTtl)
              .Add("--indexing-policy {value}", IndexingPolicy)
              .Add("--partition-key-path {value}", PartitionKeyPath)
              .Add("--throughput {value}", Throughput)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCollectionDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCollectionDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Collection Name.
        /// </summary>
        public virtual string CollectionName { get; internal set; }
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb collection delete")
              .Add("--collection-name {value}", CollectionName)
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCollectionExistsSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCollectionExistsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Collection Name.
        /// </summary>
        public virtual string CollectionName { get; internal set; }
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb collection exists")
              .Add("--collection-name {value}", CollectionName)
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCollectionListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCollectionListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb collection list")
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCollectionShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCollectionShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Collection Name.
        /// </summary>
        public virtual string CollectionName { get; internal set; }
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb collection show")
              .Add("--collection-name {value}", CollectionName)
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCollectionUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCollectionUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Collection Name.
        /// </summary>
        public virtual string CollectionName { get; internal set; }
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Default TTL. Provide 0 to disable.
        /// </summary>
        public virtual string DefaultTtl { get; internal set; }
        /// <summary>
        ///   Indexing Policy, you can enter it as a string or as a file, e.g., --indexing-policy @policy-file.json).
        /// </summary>
        public virtual string IndexingPolicy { get; internal set; }
        /// <summary>
        ///   Offer Throughput (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb collection update")
              .Add("--collection-name {value}", CollectionName)
              .Add("--db-name {value}", DbName)
              .Add("--default-ttl {value}", DefaultTtl)
              .Add("--indexing-policy {value}", IndexingPolicy)
              .Add("--throughput {value}", Throughput)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbNetworkRuleAddSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbNetworkRuleAddSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Name or ID of the subnet.
        /// </summary>
        public virtual string Subnet { get; internal set; }
        /// <summary>
        ///   Create firewall rule before the virtual network has vnet service endpoint enabled.
        /// </summary>
        public virtual bool? IgnoreMissingVnetServiceEndpoint { get; internal set; }
        /// <summary>
        ///   The name of the VNET, which must be provided in conjunction with the name of the subnet.
        /// </summary>
        public virtual string VirtualNetwork { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb network-rule add")
              .Add("--subnet {value}", Subnet)
              .Add("--ignore-missing-vnet-service-endpoint", IgnoreMissingVnetServiceEndpoint)
              .Add("--virtual-network {value}", VirtualNetwork)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbNetworkRuleListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbNetworkRuleListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb network-rule list")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbNetworkRuleRemoveSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbNetworkRuleRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Name or ID of the subnet.
        /// </summary>
        public virtual string Subnet { get; internal set; }
        /// <summary>
        ///   The name of the VNET, which must be provided in conjunction with the name of the subnet.
        /// </summary>
        public virtual string VirtualNetwork { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb network-rule remove")
              .Add("--subnet {value}", Subnet)
              .Add("--virtual-network {value}", VirtualNetwork)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbTableCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbTableCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of Table (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb table create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbTableDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbTableDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb table delete")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbTableListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbTableListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb table list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbTableShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbTableShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb table show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbDatabaseCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbDatabaseCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Offer Throughput (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb database create")
              .Add("--db-name {value}", DbName)
              .Add("--throughput {value}", Throughput)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbDatabaseDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbDatabaseDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb database delete")
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbDatabaseExistsSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbDatabaseExistsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb database exists")
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbDatabaseListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbDatabaseListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb database list")
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbDatabaseShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbDatabaseShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Database Name.
        /// </summary>
        public virtual string DbName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.
        /// </summary>
        public virtual string Key { get; internal set; }
        /// <summary>
        ///   Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of the resource group. Must be used in conjunction with cosmosdb account name.
        /// </summary>
        public virtual string ResourceGroupName { get; internal set; }
        /// <summary>
        ///   Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.
        /// </summary>
        public virtual string UrlConnection { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb database show")
              .Add("--db-name {value}", DbName)
              .Add("--key {value}", Key)
              .Add("--name {value}", Name)
              .Add("--resource-group-name {value}", ResourceGroupName)
              .Add("--url-connection {value}", UrlConnection)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql")
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbKeysListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbKeysListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The type of account key.
        /// </summary>
        public virtual CosmosdbKeysListType Type { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb keys list")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--type {value}", Type)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbKeysRegenerateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbKeysRegenerateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   The access key to regenerate.
        /// </summary>
        public virtual CosmosdbKeyKind KeyKind { get; internal set; }
        /// <summary>
        ///   One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.
        /// </summary>
        public virtual IReadOnlyList<string> Ids => IdsInternal.AsReadOnly();
        internal List<string> IdsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Name of the Cosmos DB database account.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb keys regenerate")
              .Add("--key-kind {value}", KeyKind)
              .Add("--ids {value}", Ids, separator: ' ')
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Graph name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".
        /// </summary>
        public virtual string Idx { get; internal set; }
        /// <summary>
        ///   Partition Key Path, e.g., '/address/zipcode'.
        /// </summary>
        public virtual string PartitionKeyPath { get; internal set; }
        /// <summary>
        ///   The throughput of Gremlin graph (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.
        /// </summary>
        public virtual string Ttl { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph create")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--idx {value}", Idx)
              .Add("--partition-key-path {value}", PartitionKeyPath)
              .Add("--throughput {value}", Throughput)
              .Add("--ttl {value}", Ttl)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Graph name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph delete")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph list")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Graph name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph show")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Graph name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".
        /// </summary>
        public virtual string Idx { get; internal set; }
        /// <summary>
        ///   Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.
        /// </summary>
        public virtual string Ttl { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph update")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--idx {value}", Idx)
              .Add("--ttl {value}", Ttl)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinDatabaseCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput Gremlin database (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin database create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinDatabaseDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin database delete")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinDatabaseListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin database list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinDatabaseShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin database show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Collection name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Sharding key path.
        /// </summary>
        public virtual string Shard { get; internal set; }
        /// <summary>
        ///   Indexes, you can enter it as a string or as a file, e.g., --idx @indexes-file.json or --idx "[{"key": {"keys": ["_ts"]},"options": {"expireAfterSeconds": 1000}}, {"key": {"keys": ["user_id", "user_address"]}, "options": {"unique": "true"}}]".
        /// </summary>
        public virtual string Idx { get; internal set; }
        /// <summary>
        ///   The throughput of MongoDB collection (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection create")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--shard {value}", Shard)
              .Add("--idx {value}", Idx)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Collection name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection delete")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection list")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Collection name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection show")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Collection name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indexes, you can enter it as a string or as a file, e.g., --idx @indexes-file.json or --idx "[{"key": {"keys": ["_ts"]},"options": {"expireAfterSeconds": 1000}}, {"key": {"keys": ["user_id", "user_address"]}, "options": {"unique": "true"}}]".
        /// </summary>
        public virtual string Idx { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection update")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--idx {value}", Idx)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbDatabaseCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of MongoDB database (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb database create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbDatabaseDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb database delete")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbDatabaseListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb database list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbDatabaseShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb database show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbTableThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbTableThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb table throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbTableThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbTableThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of Table (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb table throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Schema, you can enter it as a string or as a file, e.g., --schema @schema-file.json or --schema "{"columns": [{"name": "columnA","type": "uuid"}, {"name": "columnB","type": "Ascii"}],"partitionKeys": [{"name": "columnA"}]}".
        /// </summary>
        public virtual string Schema { get; internal set; }
        /// <summary>
        ///   The throughput of Cassandra table (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.
        /// </summary>
        public virtual string Ttl { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table create")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--schema {value}", Schema)
              .Add("--throughput {value}", Throughput)
              .Add("--ttl {value}", Ttl)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table delete")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table list")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table show")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Schema, you can enter it as a string or as a file, e.g., --schema @schema-file.json or --schema "{"columns": [{"name": "columnA","type": "uuid"}, {"name": "columnB","type": "Ascii"}],"partitionKeys": [{"name": "columnA"}]}".
        /// </summary>
        public virtual string Schema { get; internal set; }
        /// <summary>
        ///   Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.
        /// </summary>
        public virtual string Ttl { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table update")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--schema {value}", Schema)
              .Add("--ttl {value}", Ttl)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraKeyspaceCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of Cassandra keyspace (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra keyspace create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraKeyspaceDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra keyspace delete")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraKeyspaceListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra keyspace list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraKeyspaceShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra keyspace show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlDatabaseCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of SQL database (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql database create")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlDatabaseDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql database delete")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlDatabaseListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql database list")
              .Add("--account-name {value}", AccountName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlDatabaseShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql database show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerCreateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerCreateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Container name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".
        /// </summary>
        public virtual string Idx { get; internal set; }
        /// <summary>
        ///   Partition Key Path, e.g., '/address/zipcode'.
        /// </summary>
        public virtual string PartitionKeyPath { get; internal set; }
        /// <summary>
        ///   The throughput of SQL container (RU/s). Default value is 400.
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.
        /// </summary>
        public virtual string Ttl { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container create")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--idx {value}", Idx)
              .Add("--partition-key-path {value}", PartitionKeyPath)
              .Add("--throughput {value}", Throughput)
              .Add("--ttl {value}", Ttl)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerDeleteSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Container name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container delete")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerListSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container list")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Container name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container show")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Container name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".
        /// </summary>
        public virtual string Idx { get; internal set; }
        /// <summary>
        ///   Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.
        /// </summary>
        public virtual string Ttl { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container update")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--idx {value}", Idx)
              .Add("--ttl {value}", Ttl)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinDatabaseThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin database throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinDatabaseThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of Gremlin database (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin database throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Grapth name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbGremlinGraphThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbGremlinGraphThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Grapth name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput Gremlin graph (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb gremlin graph throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbDatabaseThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb database throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbDatabaseThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of MongoDB database (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb database throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Collection name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbMongodbCollectionThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Collection name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of MongoDB collection (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb mongodb collection throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraKeyspaceThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra keyspace throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of Cassandra keyspace (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra keyspace throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCassandraTableThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbCassandraTableThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Keyspace name.
        /// </summary>
        public virtual string KeyspaceName { get; internal set; }
        /// <summary>
        ///   Table name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of Cassandra table (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb cassandra table throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--keyspace-name {value}", KeyspaceName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlDatabaseThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql database throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlDatabaseThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of SQL database (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql database throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerThroughputShowSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerThroughputShowSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Container name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container throughput show")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbSqlContainerThroughputUpdateSettings
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureCosmosdbSqlContainerThroughputUpdateSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the AzureCosmosdb executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? AzureCosmosdbTasks.AzureCosmosdbPath;
        public override Action<OutputType, string> CustomLogger => AzureCosmosdbTasks.AzureCosmosdbLogger;
        /// <summary>
        ///   Cosmosdb account name.
        /// </summary>
        public virtual string AccountName { get; internal set; }
        /// <summary>
        ///   Database name.
        /// </summary>
        public virtual string DatabaseName { get; internal set; }
        /// <summary>
        ///   Container name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.
        /// </summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary>
        ///   The throughput of SQL container (RU/s).
        /// </summary>
        public virtual string Throughput { get; internal set; }
        /// <summary>
        ///   Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.
        /// </summary>
        public virtual string Subscription { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity to show all debug logs.
        /// </summary>
        public virtual string Debug { get; internal set; }
        /// <summary>
        ///   Show this help message and exit.
        /// </summary>
        public virtual string Help { get; internal set; }
        /// <summary>
        ///   Output format.
        /// </summary>
        public virtual AzureOutput Output { get; internal set; }
        /// <summary>
        ///   JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.
        /// </summary>
        public virtual string Query { get; internal set; }
        /// <summary>
        ///   Increase logging verbosity. Use --debug for full debug logs.
        /// </summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cosmosdb sql container throughput update")
              .Add("--account-name {value}", AccountName)
              .Add("--database-name {value}", DatabaseName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--throughput {value}", Throughput)
              .Add("--subscription {value}", Subscription)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureCosmosdbCheckNameExistsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCheckNameExistsSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetIds(this AzureCosmosdbCheckNameExistsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetIds(this AzureCosmosdbCheckNameExistsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings AddIds(this AzureCosmosdbCheckNameExistsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings AddIds(this AzureCosmosdbCheckNameExistsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ClearIds(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings RemoveIds(this AzureCosmosdbCheckNameExistsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbCheckNameExistsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings RemoveIds(this AzureCosmosdbCheckNameExistsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetName(this AzureCosmosdbCheckNameExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetName(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetSubscription(this AzureCosmosdbCheckNameExistsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetSubscription(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetDebug(this AzureCosmosdbCheckNameExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetDebug(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetHelp(this AzureCosmosdbCheckNameExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetHelp(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetOutput(this AzureCosmosdbCheckNameExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetOutput(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetQuery(this AzureCosmosdbCheckNameExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetQuery(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCheckNameExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings SetVerbose(this AzureCosmosdbCheckNameExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCheckNameExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCheckNameExistsSettings ResetVerbose(this AzureCosmosdbCheckNameExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCreateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetName(this AzureCosmosdbCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetName(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetResourceGroup(this AzureCosmosdbCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetResourceGroup(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Capabilities
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Capabilities"/></em></p>
        ///   <p>Set custom capabilities on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetCapabilities(this AzureCosmosdbCreateSettings toolSettings, string capabilities)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capabilities = capabilities;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Capabilities"/></em></p>
        ///   <p>Set custom capabilities on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetCapabilities(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capabilities = null;
            return toolSettings;
        }
        #endregion
        #region DefaultConsistencyLevel
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.DefaultConsistencyLevel"/></em></p>
        ///   <p>Default consistency level of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetDefaultConsistencyLevel(this AzureCosmosdbCreateSettings toolSettings, CosmosdbDefaultConsistencyLevel defaultConsistencyLevel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultConsistencyLevel = defaultConsistencyLevel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.DefaultConsistencyLevel"/></em></p>
        ///   <p>Default consistency level of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetDefaultConsistencyLevel(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultConsistencyLevel = null;
            return toolSettings;
        }
        #endregion
        #region EnableAutomaticFailover
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetEnableAutomaticFailover(this AzureCosmosdbCreateSettings toolSettings, bool? enableAutomaticFailover)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = enableAutomaticFailover;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetEnableAutomaticFailover(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings EnableEnableAutomaticFailover(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings DisableEnableAutomaticFailover(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbCreateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ToggleEnableAutomaticFailover(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = !toolSettings.EnableAutomaticFailover;
            return toolSettings;
        }
        #endregion
        #region EnableMultipleWriteLocations
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetEnableMultipleWriteLocations(this AzureCosmosdbCreateSettings toolSettings, bool? enableMultipleWriteLocations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = enableMultipleWriteLocations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetEnableMultipleWriteLocations(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings EnableEnableMultipleWriteLocations(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings DisableEnableMultipleWriteLocations(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbCreateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ToggleEnableMultipleWriteLocations(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = !toolSettings.EnableMultipleWriteLocations;
            return toolSettings;
        }
        #endregion
        #region EnableVirtualNetwork
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetEnableVirtualNetwork(this AzureCosmosdbCreateSettings toolSettings, bool? enableVirtualNetwork)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = enableVirtualNetwork;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetEnableVirtualNetwork(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings EnableEnableVirtualNetwork(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings DisableEnableVirtualNetwork(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbCreateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ToggleEnableVirtualNetwork(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = !toolSettings.EnableVirtualNetwork;
            return toolSettings;
        }
        #endregion
        #region IpRangeFilter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/> to a new list</em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings, params string[] ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal = ipRangeFilter.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/> to a new list</em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings, IEnumerable<string> ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal = ipRangeFilter.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings AddIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings, params string[] ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal.AddRange(ipRangeFilter);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings AddIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings, IEnumerable<string> ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal.AddRange(ipRangeFilter);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ClearIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings RemoveIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings, params string[] ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ipRangeFilter);
            toolSettings.IpRangeFilterInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbCreateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings RemoveIpRangeFilter(this AzureCosmosdbCreateSettings toolSettings, IEnumerable<string> ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ipRangeFilter);
            toolSettings.IpRangeFilterInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Kind
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Kind"/></em></p>
        ///   <p>The type of Cosmos DB database account to create.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetKind(this AzureCosmosdbCreateSettings toolSettings, CosmosdbCreateKind kind)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kind = kind;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Kind"/></em></p>
        ///   <p>The type of Cosmos DB database account to create.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetKind(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kind = null;
            return toolSettings;
        }
        #endregion
        #region Locations
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Locations"/></em></p>
        ///   <p>Add a location to the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetLocations(this AzureCosmosdbCreateSettings toolSettings, string locations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Locations = locations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Locations"/></em></p>
        ///   <p>Add a location to the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetLocations(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Locations = null;
            return toolSettings;
        }
        #endregion
        #region MaxInterval
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.MaxInterval"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 1 - 100.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetMaxInterval(this AzureCosmosdbCreateSettings toolSettings, string maxInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxInterval = maxInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.MaxInterval"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 1 - 100.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetMaxInterval(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxInterval = null;
            return toolSettings;
        }
        #endregion
        #region MaxStalenessPrefix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.MaxStalenessPrefix"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the number of stale requests tolerated. Accepted range for this value is 1 - 2,147,483,647.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetMaxStalenessPrefix(this AzureCosmosdbCreateSettings toolSettings, string maxStalenessPrefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxStalenessPrefix = maxStalenessPrefix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.MaxStalenessPrefix"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the number of stale requests tolerated. Accepted range for this value is 1 - 2,147,483,647.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetMaxStalenessPrefix(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxStalenessPrefix = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetTags(this AzureCosmosdbCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetTags(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region VirtualNetworkRules
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.VirtualNetworkRules"/></em></p>
        ///   <p>ACL's for virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetVirtualNetworkRules(this AzureCosmosdbCreateSettings toolSettings, string virtualNetworkRules)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetworkRules = virtualNetworkRules;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.VirtualNetworkRules"/></em></p>
        ///   <p>ACL's for virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetVirtualNetworkRules(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetworkRules = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetSubscription(this AzureCosmosdbCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetSubscription(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetDebug(this AzureCosmosdbCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetDebug(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetHelp(this AzureCosmosdbCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetHelp(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetOutput(this AzureCosmosdbCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetOutput(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetQuery(this AzureCosmosdbCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetQuery(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings SetVerbose(this AzureCosmosdbCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCreateSettings ResetVerbose(this AzureCosmosdbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbDeleteSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetIds(this AzureCosmosdbDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetIds(this AzureCosmosdbDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings AddIds(this AzureCosmosdbDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings AddIds(this AzureCosmosdbDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ClearIds(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings RemoveIds(this AzureCosmosdbDeleteSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbDeleteSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings RemoveIds(this AzureCosmosdbDeleteSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetName(this AzureCosmosdbDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetName(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetResourceGroup(this AzureCosmosdbDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetResourceGroup(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetSubscription(this AzureCosmosdbDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetSubscription(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetDebug(this AzureCosmosdbDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetDebug(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetHelp(this AzureCosmosdbDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetHelp(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetOutput(this AzureCosmosdbDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetOutput(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetQuery(this AzureCosmosdbDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetQuery(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings SetVerbose(this AzureCosmosdbDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDeleteSettings ResetVerbose(this AzureCosmosdbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbFailoverPriorityChangeSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbFailoverPriorityChangeSettingsExtensions
    {
        #region FailoverPolicies
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/> to a new list</em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, params string[] failoverPolicies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailoverPoliciesInternal = failoverPolicies.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/> to a new list</em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, IEnumerable<string> failoverPolicies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailoverPoliciesInternal = failoverPolicies.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings AddFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, params string[] failoverPolicies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailoverPoliciesInternal.AddRange(failoverPolicies);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings AddFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, IEnumerable<string> failoverPolicies)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailoverPoliciesInternal.AddRange(failoverPolicies);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ClearFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FailoverPoliciesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings RemoveFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, params string[] failoverPolicies)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(failoverPolicies);
            toolSettings.FailoverPoliciesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbFailoverPriorityChangeSettings.FailoverPolicies"/></em></p>
        ///   <p>Space-separated failover policies in 'regionName=failoverPriority' format. E.g eastus=0 westus=1.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings RemoveFailoverPolicies(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, IEnumerable<string> failoverPolicies)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(failoverPolicies);
            toolSettings.FailoverPoliciesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings AddIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings AddIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ClearIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings RemoveIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings RemoveIds(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetName(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetName(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetResourceGroup(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetResourceGroup(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetSubscription(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetSubscription(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetDebug(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetDebug(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetHelp(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetHelp(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetOutput(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetOutput(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetQuery(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetQuery(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings SetVerbose(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbFailoverPriorityChangeSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbFailoverPriorityChangeSettings ResetVerbose(this AzureCosmosdbFailoverPriorityChangeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetResourceGroup(this AzureCosmosdbListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetResourceGroup(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetSubscription(this AzureCosmosdbListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetSubscription(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetDebug(this AzureCosmosdbListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetDebug(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetHelp(this AzureCosmosdbListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetHelp(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetOutput(this AzureCosmosdbListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetOutput(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetQuery(this AzureCosmosdbListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetQuery(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings SetVerbose(this AzureCosmosdbListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListSettings ResetVerbose(this AzureCosmosdbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbListConnectionStringsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbListConnectionStringsSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetIds(this AzureCosmosdbListConnectionStringsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetIds(this AzureCosmosdbListConnectionStringsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings AddIds(this AzureCosmosdbListConnectionStringsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings AddIds(this AzureCosmosdbListConnectionStringsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ClearIds(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings RemoveIds(this AzureCosmosdbListConnectionStringsSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbListConnectionStringsSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings RemoveIds(this AzureCosmosdbListConnectionStringsSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetName(this AzureCosmosdbListConnectionStringsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetName(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetResourceGroup(this AzureCosmosdbListConnectionStringsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetResourceGroup(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetSubscription(this AzureCosmosdbListConnectionStringsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetSubscription(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetDebug(this AzureCosmosdbListConnectionStringsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetDebug(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetHelp(this AzureCosmosdbListConnectionStringsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetHelp(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetOutput(this AzureCosmosdbListConnectionStringsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetOutput(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetQuery(this AzureCosmosdbListConnectionStringsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetQuery(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListConnectionStringsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings SetVerbose(this AzureCosmosdbListConnectionStringsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListConnectionStringsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListConnectionStringsSettings ResetVerbose(this AzureCosmosdbListConnectionStringsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbListKeysSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbListKeysSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetIds(this AzureCosmosdbListKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetIds(this AzureCosmosdbListKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbListKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings AddIds(this AzureCosmosdbListKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbListKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings AddIds(this AzureCosmosdbListKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbListKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ClearIds(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbListKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings RemoveIds(this AzureCosmosdbListKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbListKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings RemoveIds(this AzureCosmosdbListKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetName(this AzureCosmosdbListKeysSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetName(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetResourceGroup(this AzureCosmosdbListKeysSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetResourceGroup(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetSubscription(this AzureCosmosdbListKeysSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetSubscription(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetDebug(this AzureCosmosdbListKeysSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetDebug(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetHelp(this AzureCosmosdbListKeysSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetHelp(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetOutput(this AzureCosmosdbListKeysSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetOutput(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetQuery(this AzureCosmosdbListKeysSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetQuery(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings SetVerbose(this AzureCosmosdbListKeysSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListKeysSettings ResetVerbose(this AzureCosmosdbListKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbListReadOnlyKeysSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbListReadOnlyKeysSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings AddIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings AddIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ClearIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings RemoveIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbListReadOnlyKeysSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings RemoveIds(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetName(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetName(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetResourceGroup(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetResourceGroup(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetSubscription(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetSubscription(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetDebug(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetDebug(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetHelp(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetHelp(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetOutput(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetOutput(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetQuery(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetQuery(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings SetVerbose(this AzureCosmosdbListReadOnlyKeysSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbListReadOnlyKeysSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbListReadOnlyKeysSettings ResetVerbose(this AzureCosmosdbListReadOnlyKeysSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbRegenerateKeySettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbRegenerateKeySettingsExtensions
    {
        #region KeyKind
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.KeyKind"/></em></p>
        ///   <p>The access key to regenerate.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetKeyKind(this AzureCosmosdbRegenerateKeySettings toolSettings, CosmosdbKeyKind keyKind)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyKind = keyKind;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.KeyKind"/></em></p>
        ///   <p>The access key to regenerate.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetKeyKind(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyKind = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetIds(this AzureCosmosdbRegenerateKeySettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetIds(this AzureCosmosdbRegenerateKeySettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings AddIds(this AzureCosmosdbRegenerateKeySettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings AddIds(this AzureCosmosdbRegenerateKeySettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ClearIds(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings RemoveIds(this AzureCosmosdbRegenerateKeySettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbRegenerateKeySettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings RemoveIds(this AzureCosmosdbRegenerateKeySettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetName(this AzureCosmosdbRegenerateKeySettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetName(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetResourceGroup(this AzureCosmosdbRegenerateKeySettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetResourceGroup(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetSubscription(this AzureCosmosdbRegenerateKeySettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetSubscription(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetDebug(this AzureCosmosdbRegenerateKeySettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetDebug(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetHelp(this AzureCosmosdbRegenerateKeySettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetHelp(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetOutput(this AzureCosmosdbRegenerateKeySettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetOutput(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetQuery(this AzureCosmosdbRegenerateKeySettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetQuery(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbRegenerateKeySettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings SetVerbose(this AzureCosmosdbRegenerateKeySettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbRegenerateKeySettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbRegenerateKeySettings ResetVerbose(this AzureCosmosdbRegenerateKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbShowSettingsExtensions
    {
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetIds(this AzureCosmosdbShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetIds(this AzureCosmosdbShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings AddIds(this AzureCosmosdbShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings AddIds(this AzureCosmosdbShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ClearIds(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings RemoveIds(this AzureCosmosdbShowSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbShowSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings RemoveIds(this AzureCosmosdbShowSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetName(this AzureCosmosdbShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetName(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetResourceGroup(this AzureCosmosdbShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetResourceGroup(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetSubscription(this AzureCosmosdbShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetSubscription(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetDebug(this AzureCosmosdbShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetDebug(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetHelp(this AzureCosmosdbShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetHelp(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetOutput(this AzureCosmosdbShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetOutput(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetQuery(this AzureCosmosdbShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetQuery(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings SetVerbose(this AzureCosmosdbShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbShowSettings ResetVerbose(this AzureCosmosdbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbUpdateSettingsExtensions
    {
        #region Capabilities
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Capabilities"/></em></p>
        ///   <p>Set custom capabilities on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetCapabilities(this AzureCosmosdbUpdateSettings toolSettings, string capabilities)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capabilities = capabilities;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Capabilities"/></em></p>
        ///   <p>Set custom capabilities on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetCapabilities(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Capabilities = null;
            return toolSettings;
        }
        #endregion
        #region DefaultConsistencyLevel
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.DefaultConsistencyLevel"/></em></p>
        ///   <p>Default consistency level of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetDefaultConsistencyLevel(this AzureCosmosdbUpdateSettings toolSettings, CosmosdbDefaultConsistencyLevel defaultConsistencyLevel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultConsistencyLevel = defaultConsistencyLevel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.DefaultConsistencyLevel"/></em></p>
        ///   <p>Default consistency level of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetDefaultConsistencyLevel(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultConsistencyLevel = null;
            return toolSettings;
        }
        #endregion
        #region EnableAutomaticFailover
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetEnableAutomaticFailover(this AzureCosmosdbUpdateSettings toolSettings, bool? enableAutomaticFailover)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = enableAutomaticFailover;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetEnableAutomaticFailover(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings EnableEnableAutomaticFailover(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings DisableEnableAutomaticFailover(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbUpdateSettings.EnableAutomaticFailover"/></em></p>
        ///   <p>Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ToggleEnableAutomaticFailover(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableAutomaticFailover = !toolSettings.EnableAutomaticFailover;
            return toolSettings;
        }
        #endregion
        #region EnableMultipleWriteLocations
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetEnableMultipleWriteLocations(this AzureCosmosdbUpdateSettings toolSettings, bool? enableMultipleWriteLocations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = enableMultipleWriteLocations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetEnableMultipleWriteLocations(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings EnableEnableMultipleWriteLocations(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings DisableEnableMultipleWriteLocations(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbUpdateSettings.EnableMultipleWriteLocations"/></em></p>
        ///   <p>Enable Multiple Write Locations.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ToggleEnableMultipleWriteLocations(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableMultipleWriteLocations = !toolSettings.EnableMultipleWriteLocations;
            return toolSettings;
        }
        #endregion
        #region EnableVirtualNetwork
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetEnableVirtualNetwork(this AzureCosmosdbUpdateSettings toolSettings, bool? enableVirtualNetwork)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = enableVirtualNetwork;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetEnableVirtualNetwork(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings EnableEnableVirtualNetwork(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings DisableEnableVirtualNetwork(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbUpdateSettings.EnableVirtualNetwork"/></em></p>
        ///   <p>Enables virtual network on the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ToggleEnableVirtualNetwork(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnableVirtualNetwork = !toolSettings.EnableVirtualNetwork;
            return toolSettings;
        }
        #endregion
        #region IpRangeFilter
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/> to a new list</em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings, params string[] ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal = ipRangeFilter.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/> to a new list</em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings, IEnumerable<string> ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal = ipRangeFilter.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings AddIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings, params string[] ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal.AddRange(ipRangeFilter);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings AddIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings, IEnumerable<string> ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal.AddRange(ipRangeFilter);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ClearIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeFilterInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings RemoveIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings, params string[] ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ipRangeFilter);
            toolSettings.IpRangeFilterInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbUpdateSettings.IpRangeFilter"/></em></p>
        ///   <p>Firewall support. Specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma-separated and must not contain any spaces.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings RemoveIpRangeFilter(this AzureCosmosdbUpdateSettings toolSettings, IEnumerable<string> ipRangeFilter)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ipRangeFilter);
            toolSettings.IpRangeFilterInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Locations
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Locations"/></em></p>
        ///   <p>Add a location to the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetLocations(this AzureCosmosdbUpdateSettings toolSettings, string locations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Locations = locations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Locations"/></em></p>
        ///   <p>Add a location to the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetLocations(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Locations = null;
            return toolSettings;
        }
        #endregion
        #region MaxInterval
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.MaxInterval"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 1 - 100.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetMaxInterval(this AzureCosmosdbUpdateSettings toolSettings, string maxInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxInterval = maxInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.MaxInterval"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 1 - 100.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetMaxInterval(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxInterval = null;
            return toolSettings;
        }
        #endregion
        #region MaxStalenessPrefix
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.MaxStalenessPrefix"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the number of stale requests tolerated. Accepted range for this value is 1 - 2,147,483,647.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetMaxStalenessPrefix(this AzureCosmosdbUpdateSettings toolSettings, string maxStalenessPrefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxStalenessPrefix = maxStalenessPrefix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.MaxStalenessPrefix"/></em></p>
        ///   <p>When used with Bounded Staleness consistency, this value represents the number of stale requests tolerated. Accepted range for this value is 1 - 2,147,483,647.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetMaxStalenessPrefix(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxStalenessPrefix = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetTags(this AzureCosmosdbUpdateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Tags"/></em></p>
        ///   <p>Space-separated tags in 'key[=value]' format. Use "" to clear existing tags.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetTags(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region VirtualNetworkRules
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.VirtualNetworkRules"/></em></p>
        ///   <p>ACL's for virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetVirtualNetworkRules(this AzureCosmosdbUpdateSettings toolSettings, string virtualNetworkRules)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetworkRules = virtualNetworkRules;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.VirtualNetworkRules"/></em></p>
        ///   <p>ACL's for virtual network.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetVirtualNetworkRules(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetworkRules = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetIds(this AzureCosmosdbUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetIds(this AzureCosmosdbUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings AddIds(this AzureCosmosdbUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings AddIds(this AzureCosmosdbUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ClearIds(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings RemoveIds(this AzureCosmosdbUpdateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbUpdateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings RemoveIds(this AzureCosmosdbUpdateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetName(this AzureCosmosdbUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetName(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetResourceGroup(this AzureCosmosdbUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetResourceGroup(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetSubscription(this AzureCosmosdbUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetSubscription(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetDebug(this AzureCosmosdbUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetDebug(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetHelp(this AzureCosmosdbUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetHelp(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetOutput(this AzureCosmosdbUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetOutput(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetQuery(this AzureCosmosdbUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetQuery(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings SetVerbose(this AzureCosmosdbUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbUpdateSettings ResetVerbose(this AzureCosmosdbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCollectionCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCollectionCreateSettingsExtensions
    {
        #region CollectionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetCollectionName(this AzureCosmosdbCollectionCreateSettings toolSettings, string collectionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = collectionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetCollectionName(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = null;
            return toolSettings;
        }
        #endregion
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetDbName(this AzureCosmosdbCollectionCreateSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetDbName(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region DefaultTtl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.DefaultTtl"/></em></p>
        ///   <p>Default TTL. Provide 0 to disable.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetDefaultTtl(this AzureCosmosdbCollectionCreateSettings toolSettings, string defaultTtl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultTtl = defaultTtl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.DefaultTtl"/></em></p>
        ///   <p>Default TTL. Provide 0 to disable.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetDefaultTtl(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultTtl = null;
            return toolSettings;
        }
        #endregion
        #region IndexingPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.IndexingPolicy"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --indexing-policy @policy-file.json).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetIndexingPolicy(this AzureCosmosdbCollectionCreateSettings toolSettings, string indexingPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IndexingPolicy = indexingPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.IndexingPolicy"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --indexing-policy @policy-file.json).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetIndexingPolicy(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IndexingPolicy = null;
            return toolSettings;
        }
        #endregion
        #region PartitionKeyPath
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.PartitionKeyPath"/></em></p>
        ///   <p>Partition Key Path, e.g., '/properties/name'.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetPartitionKeyPath(this AzureCosmosdbCollectionCreateSettings toolSettings, string partitionKeyPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKeyPath = partitionKeyPath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.PartitionKeyPath"/></em></p>
        ///   <p>Partition Key Path, e.g., '/properties/name'.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetPartitionKeyPath(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKeyPath = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Throughput"/></em></p>
        ///   <p>Offer Throughput (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetThroughput(this AzureCosmosdbCollectionCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Throughput"/></em></p>
        ///   <p>Offer Throughput (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetThroughput(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetKey(this AzureCosmosdbCollectionCreateSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetKey(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetName(this AzureCosmosdbCollectionCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetName(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetResourceGroupName(this AzureCosmosdbCollectionCreateSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetResourceGroupName(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetUrlConnection(this AzureCosmosdbCollectionCreateSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetUrlConnection(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetSubscription(this AzureCosmosdbCollectionCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetSubscription(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetDebug(this AzureCosmosdbCollectionCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetDebug(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetHelp(this AzureCosmosdbCollectionCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetHelp(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetOutput(this AzureCosmosdbCollectionCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetOutput(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetQuery(this AzureCosmosdbCollectionCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetQuery(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings SetVerbose(this AzureCosmosdbCollectionCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionCreateSettings ResetVerbose(this AzureCosmosdbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCollectionDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCollectionDeleteSettingsExtensions
    {
        #region CollectionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetCollectionName(this AzureCosmosdbCollectionDeleteSettings toolSettings, string collectionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = collectionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetCollectionName(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = null;
            return toolSettings;
        }
        #endregion
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetDbName(this AzureCosmosdbCollectionDeleteSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetDbName(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetKey(this AzureCosmosdbCollectionDeleteSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetKey(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetName(this AzureCosmosdbCollectionDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetName(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetResourceGroupName(this AzureCosmosdbCollectionDeleteSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetResourceGroupName(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetUrlConnection(this AzureCosmosdbCollectionDeleteSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetUrlConnection(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetSubscription(this AzureCosmosdbCollectionDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetSubscription(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetDebug(this AzureCosmosdbCollectionDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetDebug(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetHelp(this AzureCosmosdbCollectionDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetHelp(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetOutput(this AzureCosmosdbCollectionDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetOutput(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetQuery(this AzureCosmosdbCollectionDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetQuery(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings SetVerbose(this AzureCosmosdbCollectionDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionDeleteSettings ResetVerbose(this AzureCosmosdbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCollectionExistsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCollectionExistsSettingsExtensions
    {
        #region CollectionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetCollectionName(this AzureCosmosdbCollectionExistsSettings toolSettings, string collectionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = collectionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetCollectionName(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = null;
            return toolSettings;
        }
        #endregion
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetDbName(this AzureCosmosdbCollectionExistsSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetDbName(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetKey(this AzureCosmosdbCollectionExistsSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetKey(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetName(this AzureCosmosdbCollectionExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetName(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetResourceGroupName(this AzureCosmosdbCollectionExistsSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetResourceGroupName(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetUrlConnection(this AzureCosmosdbCollectionExistsSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetUrlConnection(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetSubscription(this AzureCosmosdbCollectionExistsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetSubscription(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetDebug(this AzureCosmosdbCollectionExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetDebug(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetHelp(this AzureCosmosdbCollectionExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetHelp(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetOutput(this AzureCosmosdbCollectionExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetOutput(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetQuery(this AzureCosmosdbCollectionExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetQuery(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings SetVerbose(this AzureCosmosdbCollectionExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionExistsSettings ResetVerbose(this AzureCosmosdbCollectionExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCollectionListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCollectionListSettingsExtensions
    {
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetDbName(this AzureCosmosdbCollectionListSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetDbName(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetKey(this AzureCosmosdbCollectionListSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetKey(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetName(this AzureCosmosdbCollectionListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetName(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetResourceGroupName(this AzureCosmosdbCollectionListSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetResourceGroupName(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetUrlConnection(this AzureCosmosdbCollectionListSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetUrlConnection(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetSubscription(this AzureCosmosdbCollectionListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetSubscription(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetDebug(this AzureCosmosdbCollectionListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetDebug(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetHelp(this AzureCosmosdbCollectionListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetHelp(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetOutput(this AzureCosmosdbCollectionListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetOutput(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetQuery(this AzureCosmosdbCollectionListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetQuery(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings SetVerbose(this AzureCosmosdbCollectionListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionListSettings ResetVerbose(this AzureCosmosdbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCollectionShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCollectionShowSettingsExtensions
    {
        #region CollectionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetCollectionName(this AzureCosmosdbCollectionShowSettings toolSettings, string collectionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = collectionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetCollectionName(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = null;
            return toolSettings;
        }
        #endregion
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetDbName(this AzureCosmosdbCollectionShowSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetDbName(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetKey(this AzureCosmosdbCollectionShowSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetKey(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetName(this AzureCosmosdbCollectionShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetName(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetResourceGroupName(this AzureCosmosdbCollectionShowSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetResourceGroupName(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetUrlConnection(this AzureCosmosdbCollectionShowSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetUrlConnection(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetSubscription(this AzureCosmosdbCollectionShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetSubscription(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetDebug(this AzureCosmosdbCollectionShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetDebug(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetHelp(this AzureCosmosdbCollectionShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetHelp(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetOutput(this AzureCosmosdbCollectionShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetOutput(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetQuery(this AzureCosmosdbCollectionShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetQuery(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings SetVerbose(this AzureCosmosdbCollectionShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionShowSettings ResetVerbose(this AzureCosmosdbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCollectionUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCollectionUpdateSettingsExtensions
    {
        #region CollectionName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetCollectionName(this AzureCosmosdbCollectionUpdateSettings toolSettings, string collectionName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = collectionName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.CollectionName"/></em></p>
        ///   <p>Collection Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetCollectionName(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CollectionName = null;
            return toolSettings;
        }
        #endregion
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetDbName(this AzureCosmosdbCollectionUpdateSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetDbName(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region DefaultTtl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.DefaultTtl"/></em></p>
        ///   <p>Default TTL. Provide 0 to disable.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetDefaultTtl(this AzureCosmosdbCollectionUpdateSettings toolSettings, string defaultTtl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultTtl = defaultTtl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.DefaultTtl"/></em></p>
        ///   <p>Default TTL. Provide 0 to disable.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetDefaultTtl(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultTtl = null;
            return toolSettings;
        }
        #endregion
        #region IndexingPolicy
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.IndexingPolicy"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --indexing-policy @policy-file.json).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetIndexingPolicy(this AzureCosmosdbCollectionUpdateSettings toolSettings, string indexingPolicy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IndexingPolicy = indexingPolicy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.IndexingPolicy"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --indexing-policy @policy-file.json).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetIndexingPolicy(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IndexingPolicy = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Throughput"/></em></p>
        ///   <p>Offer Throughput (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetThroughput(this AzureCosmosdbCollectionUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Throughput"/></em></p>
        ///   <p>Offer Throughput (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetThroughput(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetKey(this AzureCosmosdbCollectionUpdateSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetKey(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetName(this AzureCosmosdbCollectionUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetName(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetResourceGroupName(this AzureCosmosdbCollectionUpdateSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetResourceGroupName(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetUrlConnection(this AzureCosmosdbCollectionUpdateSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetUrlConnection(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetSubscription(this AzureCosmosdbCollectionUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetSubscription(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetDebug(this AzureCosmosdbCollectionUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetDebug(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetHelp(this AzureCosmosdbCollectionUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetHelp(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetOutput(this AzureCosmosdbCollectionUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetOutput(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetQuery(this AzureCosmosdbCollectionUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetQuery(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCollectionUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings SetVerbose(this AzureCosmosdbCollectionUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCollectionUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCollectionUpdateSettings ResetVerbose(this AzureCosmosdbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbNetworkRuleAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbNetworkRuleAddSettingsExtensions
    {
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Subnet"/></em></p>
        ///   <p>Name or ID of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetSubnet(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Subnet"/></em></p>
        ///   <p>Name or ID of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetSubnet(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region IgnoreMissingVnetServiceEndpoint
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></em></p>
        ///   <p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetIgnoreMissingVnetServiceEndpoint(this AzureCosmosdbNetworkRuleAddSettings toolSettings, bool? ignoreMissingVnetServiceEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></em></p>
        ///   <p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetIgnoreMissingVnetServiceEndpoint(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingVnetServiceEndpoint = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></em></p>
        ///   <p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings EnableIgnoreMissingVnetServiceEndpoint(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingVnetServiceEndpoint = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></em></p>
        ///   <p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings DisableIgnoreMissingVnetServiceEndpoint(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingVnetServiceEndpoint = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="AzureCosmosdbNetworkRuleAddSettings.IgnoreMissingVnetServiceEndpoint"/></em></p>
        ///   <p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ToggleIgnoreMissingVnetServiceEndpoint(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingVnetServiceEndpoint = !toolSettings.IgnoreMissingVnetServiceEndpoint;
            return toolSettings;
        }
        #endregion
        #region VirtualNetwork
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.VirtualNetwork"/></em></p>
        ///   <p>The name of the VNET, which must be provided in conjunction with the name of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetVirtualNetwork(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string virtualNetwork)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetwork = virtualNetwork;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.VirtualNetwork"/></em></p>
        ///   <p>The name of the VNET, which must be provided in conjunction with the name of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetVirtualNetwork(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetwork = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings AddIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings AddIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ClearIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings RemoveIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbNetworkRuleAddSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings RemoveIds(this AzureCosmosdbNetworkRuleAddSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetName(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetName(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetResourceGroup(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetResourceGroup(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetSubscription(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetSubscription(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetDebug(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetDebug(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetHelp(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetHelp(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetOutput(this AzureCosmosdbNetworkRuleAddSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetOutput(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetQuery(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetQuery(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings SetVerbose(this AzureCosmosdbNetworkRuleAddSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleAddSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleAddSettings ResetVerbose(this AzureCosmosdbNetworkRuleAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbNetworkRuleListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbNetworkRuleListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetName(this AzureCosmosdbNetworkRuleListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetName(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetResourceGroup(this AzureCosmosdbNetworkRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetResourceGroup(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetSubscription(this AzureCosmosdbNetworkRuleListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetSubscription(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetDebug(this AzureCosmosdbNetworkRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetDebug(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetHelp(this AzureCosmosdbNetworkRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetHelp(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetOutput(this AzureCosmosdbNetworkRuleListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetOutput(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetQuery(this AzureCosmosdbNetworkRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetQuery(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings SetVerbose(this AzureCosmosdbNetworkRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleListSettings ResetVerbose(this AzureCosmosdbNetworkRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbNetworkRuleRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbNetworkRuleRemoveSettingsExtensions
    {
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subnet"/></em></p>
        ///   <p>Name or ID of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetSubnet(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subnet"/></em></p>
        ///   <p>Name or ID of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetSubnet(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region VirtualNetwork
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.VirtualNetwork"/></em></p>
        ///   <p>The name of the VNET, which must be provided in conjunction with the name of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetVirtualNetwork(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string virtualNetwork)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetwork = virtualNetwork;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.VirtualNetwork"/></em></p>
        ///   <p>The name of the VNET, which must be provided in conjunction with the name of the subnet.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetVirtualNetwork(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VirtualNetwork = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings AddIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings AddIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ClearIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings RemoveIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings RemoveIds(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetName(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetName(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetResourceGroup(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetResourceGroup(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetSubscription(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetSubscription(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetDebug(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetDebug(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetHelp(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetHelp(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetOutput(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetOutput(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetQuery(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetQuery(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings SetVerbose(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbNetworkRuleRemoveSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbNetworkRuleRemoveSettings ResetVerbose(this AzureCosmosdbNetworkRuleRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbTableCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTableCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetAccountName(this AzureCosmosdbTableCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetAccountName(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetName(this AzureCosmosdbTableCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetName(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetResourceGroup(this AzureCosmosdbTableCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetResourceGroup(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Table (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetThroughput(this AzureCosmosdbTableCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Table (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetThroughput(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetSubscription(this AzureCosmosdbTableCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetSubscription(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetDebug(this AzureCosmosdbTableCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetDebug(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetHelp(this AzureCosmosdbTableCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetHelp(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetOutput(this AzureCosmosdbTableCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetOutput(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetQuery(this AzureCosmosdbTableCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetQuery(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings SetVerbose(this AzureCosmosdbTableCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableCreateSettings ResetVerbose(this AzureCosmosdbTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbTableDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTableDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetAccountName(this AzureCosmosdbTableDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetAccountName(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetName(this AzureCosmosdbTableDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetName(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetResourceGroup(this AzureCosmosdbTableDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetResourceGroup(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetSubscription(this AzureCosmosdbTableDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetSubscription(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetDebug(this AzureCosmosdbTableDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetDebug(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetHelp(this AzureCosmosdbTableDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetHelp(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetOutput(this AzureCosmosdbTableDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetOutput(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetQuery(this AzureCosmosdbTableDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetQuery(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings SetVerbose(this AzureCosmosdbTableDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableDeleteSettings ResetVerbose(this AzureCosmosdbTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbTableListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTableListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetAccountName(this AzureCosmosdbTableListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetAccountName(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetResourceGroup(this AzureCosmosdbTableListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetResourceGroup(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetSubscription(this AzureCosmosdbTableListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetSubscription(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetDebug(this AzureCosmosdbTableListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetDebug(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetHelp(this AzureCosmosdbTableListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetHelp(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetOutput(this AzureCosmosdbTableListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetOutput(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetQuery(this AzureCosmosdbTableListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetQuery(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings SetVerbose(this AzureCosmosdbTableListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableListSettings ResetVerbose(this AzureCosmosdbTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbTableShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTableShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetAccountName(this AzureCosmosdbTableShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetAccountName(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetName(this AzureCosmosdbTableShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetName(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetResourceGroup(this AzureCosmosdbTableShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetResourceGroup(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetSubscription(this AzureCosmosdbTableShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetSubscription(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetDebug(this AzureCosmosdbTableShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetDebug(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetHelp(this AzureCosmosdbTableShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetHelp(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetOutput(this AzureCosmosdbTableShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetOutput(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetQuery(this AzureCosmosdbTableShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetQuery(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings SetVerbose(this AzureCosmosdbTableShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableShowSettings ResetVerbose(this AzureCosmosdbTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings SetDebug(this AzureCosmosdbMongodbSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings ResetDebug(this AzureCosmosdbMongodbSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings SetHelp(this AzureCosmosdbMongodbSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings ResetHelp(this AzureCosmosdbMongodbSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings SetOutput(this AzureCosmosdbMongodbSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings ResetOutput(this AzureCosmosdbMongodbSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings SetQuery(this AzureCosmosdbMongodbSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings ResetQuery(this AzureCosmosdbMongodbSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings SetVerbose(this AzureCosmosdbMongodbSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbSettings ResetVerbose(this AzureCosmosdbMongodbSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings SetDebug(this AzureCosmosdbCassandraSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings ResetDebug(this AzureCosmosdbCassandraSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings SetHelp(this AzureCosmosdbCassandraSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings ResetHelp(this AzureCosmosdbCassandraSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings SetOutput(this AzureCosmosdbCassandraSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings ResetOutput(this AzureCosmosdbCassandraSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings SetQuery(this AzureCosmosdbCassandraSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings ResetQuery(this AzureCosmosdbCassandraSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings SetVerbose(this AzureCosmosdbCassandraSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraSettings ResetVerbose(this AzureCosmosdbCassandraSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings SetDebug(this AzureCosmosdbGremlinSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings ResetDebug(this AzureCosmosdbGremlinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings SetHelp(this AzureCosmosdbGremlinSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings ResetHelp(this AzureCosmosdbGremlinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings SetOutput(this AzureCosmosdbGremlinSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings ResetOutput(this AzureCosmosdbGremlinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings SetQuery(this AzureCosmosdbGremlinSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings ResetQuery(this AzureCosmosdbGremlinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings SetVerbose(this AzureCosmosdbGremlinSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinSettings ResetVerbose(this AzureCosmosdbGremlinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbDatabaseCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbDatabaseCreateSettingsExtensions
    {
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetDbName(this AzureCosmosdbDatabaseCreateSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetDbName(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>Offer Throughput (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetThroughput(this AzureCosmosdbDatabaseCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>Offer Throughput (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetThroughput(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetKey(this AzureCosmosdbDatabaseCreateSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetKey(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetName(this AzureCosmosdbDatabaseCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetName(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetResourceGroupName(this AzureCosmosdbDatabaseCreateSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetResourceGroupName(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetUrlConnection(this AzureCosmosdbDatabaseCreateSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetUrlConnection(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetSubscription(this AzureCosmosdbDatabaseCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetSubscription(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetDebug(this AzureCosmosdbDatabaseCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetDebug(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetHelp(this AzureCosmosdbDatabaseCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetHelp(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetOutput(this AzureCosmosdbDatabaseCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetOutput(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetQuery(this AzureCosmosdbDatabaseCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetQuery(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings SetVerbose(this AzureCosmosdbDatabaseCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseCreateSettings ResetVerbose(this AzureCosmosdbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbDatabaseDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbDatabaseDeleteSettingsExtensions
    {
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetDbName(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetDbName(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetKey(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetKey(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetName(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetName(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetResourceGroupName(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetResourceGroupName(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetUrlConnection(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetUrlConnection(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetSubscription(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetSubscription(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetDebug(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetDebug(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetHelp(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetHelp(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetOutput(this AzureCosmosdbDatabaseDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetOutput(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetQuery(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetQuery(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings SetVerbose(this AzureCosmosdbDatabaseDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseDeleteSettings ResetVerbose(this AzureCosmosdbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbDatabaseExistsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbDatabaseExistsSettingsExtensions
    {
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetDbName(this AzureCosmosdbDatabaseExistsSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetDbName(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetKey(this AzureCosmosdbDatabaseExistsSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetKey(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetName(this AzureCosmosdbDatabaseExistsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetName(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetResourceGroupName(this AzureCosmosdbDatabaseExistsSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetResourceGroupName(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetUrlConnection(this AzureCosmosdbDatabaseExistsSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetUrlConnection(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetSubscription(this AzureCosmosdbDatabaseExistsSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetSubscription(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetDebug(this AzureCosmosdbDatabaseExistsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetDebug(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetHelp(this AzureCosmosdbDatabaseExistsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetHelp(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetOutput(this AzureCosmosdbDatabaseExistsSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetOutput(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetQuery(this AzureCosmosdbDatabaseExistsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetQuery(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings SetVerbose(this AzureCosmosdbDatabaseExistsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseExistsSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseExistsSettings ResetVerbose(this AzureCosmosdbDatabaseExistsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbDatabaseListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbDatabaseListSettingsExtensions
    {
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetKey(this AzureCosmosdbDatabaseListSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetKey(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetName(this AzureCosmosdbDatabaseListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetName(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetResourceGroupName(this AzureCosmosdbDatabaseListSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetResourceGroupName(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetUrlConnection(this AzureCosmosdbDatabaseListSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetUrlConnection(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetSubscription(this AzureCosmosdbDatabaseListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetSubscription(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetDebug(this AzureCosmosdbDatabaseListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetDebug(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetHelp(this AzureCosmosdbDatabaseListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetHelp(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetOutput(this AzureCosmosdbDatabaseListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetOutput(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetQuery(this AzureCosmosdbDatabaseListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetQuery(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings SetVerbose(this AzureCosmosdbDatabaseListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseListSettings ResetVerbose(this AzureCosmosdbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbDatabaseShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbDatabaseShowSettingsExtensions
    {
        #region DbName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetDbName(this AzureCosmosdbDatabaseShowSettings toolSettings, string dbName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = dbName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.DbName"/></em></p>
        ///   <p>Database Name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetDbName(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbName = null;
            return toolSettings;
        }
        #endregion
        #region Key
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetKey(this AzureCosmosdbDatabaseShowSettings toolSettings, string key)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = key;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Key"/></em></p>
        ///   <p>Cosmos DB account key. Must be used in conjunction with cosmosdb account name or url-connection.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetKey(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Key = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetName(this AzureCosmosdbDatabaseShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Name"/></em></p>
        ///   <p>Cosmos DB account name. Must be used in conjunction with either name of the resource group or cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetName(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroupName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetResourceGroupName(this AzureCosmosdbDatabaseShowSettings toolSettings, string resourceGroupName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = resourceGroupName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.ResourceGroupName"/></em></p>
        ///   <p>Name of the resource group. Must be used in conjunction with cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetResourceGroupName(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroupName = null;
            return toolSettings;
        }
        #endregion
        #region UrlConnection
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetUrlConnection(this AzureCosmosdbDatabaseShowSettings toolSettings, string urlConnection)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = urlConnection;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.UrlConnection"/></em></p>
        ///   <p>Cosmos DB account url connection. Must be used in conjunction with cosmosdb account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetUrlConnection(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UrlConnection = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetSubscription(this AzureCosmosdbDatabaseShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetSubscription(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetDebug(this AzureCosmosdbDatabaseShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetDebug(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetHelp(this AzureCosmosdbDatabaseShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetHelp(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetOutput(this AzureCosmosdbDatabaseShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetOutput(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetQuery(this AzureCosmosdbDatabaseShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetQuery(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings SetVerbose(this AzureCosmosdbDatabaseShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbDatabaseShowSettings ResetVerbose(this AzureCosmosdbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings SetDebug(this AzureCosmosdbSqlSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings ResetDebug(this AzureCosmosdbSqlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings SetHelp(this AzureCosmosdbSqlSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings ResetHelp(this AzureCosmosdbSqlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings SetOutput(this AzureCosmosdbSqlSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings ResetOutput(this AzureCosmosdbSqlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings SetQuery(this AzureCosmosdbSqlSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings ResetQuery(this AzureCosmosdbSqlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings SetVerbose(this AzureCosmosdbSqlSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlSettings ResetVerbose(this AzureCosmosdbSqlSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbKeysListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbKeysListSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Name"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetName(this AzureCosmosdbKeysListSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Name"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetName(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetResourceGroup(this AzureCosmosdbKeysListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetResourceGroup(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Type
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Type"/></em></p>
        ///   <p>The type of account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetType(this AzureCosmosdbKeysListSettings toolSettings, CosmosdbKeysListType type)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = type;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Type"/></em></p>
        ///   <p>The type of account key.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetType(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetSubscription(this AzureCosmosdbKeysListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetSubscription(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetDebug(this AzureCosmosdbKeysListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetDebug(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetHelp(this AzureCosmosdbKeysListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetHelp(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetOutput(this AzureCosmosdbKeysListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetOutput(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetQuery(this AzureCosmosdbKeysListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetQuery(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings SetVerbose(this AzureCosmosdbKeysListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysListSettings ResetVerbose(this AzureCosmosdbKeysListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbKeysRegenerateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbKeysRegenerateSettingsExtensions
    {
        #region KeyKind
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.KeyKind"/></em></p>
        ///   <p>The access key to regenerate.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetKeyKind(this AzureCosmosdbKeysRegenerateSettings toolSettings, CosmosdbKeyKind keyKind)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyKind = keyKind;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.KeyKind"/></em></p>
        ///   <p>The access key to regenerate.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetKeyKind(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyKind = null;
            return toolSettings;
        }
        #endregion
        #region Ids
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetIds(this AzureCosmosdbKeysRegenerateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/> to a new list</em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetIds(this AzureCosmosdbKeysRegenerateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal = ids.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings AddIds(this AzureCosmosdbKeysRegenerateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings AddIds(this AzureCosmosdbKeysRegenerateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.AddRange(ids);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ClearIds(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IdsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings RemoveIds(this AzureCosmosdbKeysRegenerateSettings toolSettings, params string[] ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="AzureCosmosdbKeysRegenerateSettings.Ids"/></em></p>
        ///   <p>One or more resource IDs (space-delimited). If provided, no other 'Resource Id' arguments should be specified.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings RemoveIds(this AzureCosmosdbKeysRegenerateSettings toolSettings, IEnumerable<string> ids)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ids);
            toolSettings.IdsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetName(this AzureCosmosdbKeysRegenerateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Name"/></em></p>
        ///   <p>Name of the Cosmos DB database account.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetName(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetResourceGroup(this AzureCosmosdbKeysRegenerateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetResourceGroup(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetSubscription(this AzureCosmosdbKeysRegenerateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetSubscription(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetDebug(this AzureCosmosdbKeysRegenerateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetDebug(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetHelp(this AzureCosmosdbKeysRegenerateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetHelp(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetOutput(this AzureCosmosdbKeysRegenerateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetOutput(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetQuery(this AzureCosmosdbKeysRegenerateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetQuery(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbKeysRegenerateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings SetVerbose(this AzureCosmosdbKeysRegenerateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbKeysRegenerateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbKeysRegenerateSettings ResetVerbose(this AzureCosmosdbKeysRegenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetAccountName(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetAccountName(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetDatabaseName(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetName(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetName(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetResourceGroup(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Idx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetIdx(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string idx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = idx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetIdx(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = null;
            return toolSettings;
        }
        #endregion
        #region PartitionKeyPath
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.PartitionKeyPath"/></em></p>
        ///   <p>Partition Key Path, e.g., '/address/zipcode'.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetPartitionKeyPath(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string partitionKeyPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKeyPath = partitionKeyPath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.PartitionKeyPath"/></em></p>
        ///   <p>Partition Key Path, e.g., '/address/zipcode'.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetPartitionKeyPath(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKeyPath = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Gremlin graph (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetThroughput(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Gremlin graph (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetThroughput(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Ttl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetTtl(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string ttl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = ttl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetTtl(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetSubscription(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetSubscription(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetDebug(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetDebug(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetHelp(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetHelp(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetOutput(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetOutput(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetQuery(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetQuery(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings SetVerbose(this AzureCosmosdbGremlinGraphCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphCreateSettings ResetVerbose(this AzureCosmosdbGremlinGraphCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetAccountName(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetAccountName(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetDatabaseName(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetName(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetName(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetResourceGroup(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetSubscription(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetSubscription(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetDebug(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetDebug(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetHelp(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetHelp(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetOutput(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetOutput(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetQuery(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetQuery(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings SetVerbose(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphDeleteSettings ResetVerbose(this AzureCosmosdbGremlinGraphDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetAccountName(this AzureCosmosdbGremlinGraphListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetAccountName(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetDatabaseName(this AzureCosmosdbGremlinGraphListSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetResourceGroup(this AzureCosmosdbGremlinGraphListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetSubscription(this AzureCosmosdbGremlinGraphListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetSubscription(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetDebug(this AzureCosmosdbGremlinGraphListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetDebug(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetHelp(this AzureCosmosdbGremlinGraphListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetHelp(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetOutput(this AzureCosmosdbGremlinGraphListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetOutput(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetQuery(this AzureCosmosdbGremlinGraphListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetQuery(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings SetVerbose(this AzureCosmosdbGremlinGraphListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphListSettings ResetVerbose(this AzureCosmosdbGremlinGraphListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetAccountName(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetAccountName(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetDatabaseName(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetName(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetName(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetResourceGroup(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetSubscription(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetSubscription(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetDebug(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetDebug(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetHelp(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetHelp(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetOutput(this AzureCosmosdbGremlinGraphShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetOutput(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetQuery(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetQuery(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings SetVerbose(this AzureCosmosdbGremlinGraphShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphShowSettings ResetVerbose(this AzureCosmosdbGremlinGraphShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetAccountName(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetAccountName(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetDatabaseName(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetName(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Name"/></em></p>
        ///   <p>Graph name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetName(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetResourceGroup(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Idx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetIdx(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string idx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = idx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetIdx(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = null;
            return toolSettings;
        }
        #endregion
        #region Ttl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetTtl(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string ttl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = ttl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetTtl(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetSubscription(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetSubscription(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetDebug(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetDebug(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetHelp(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetHelp(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetOutput(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetOutput(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetQuery(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetQuery(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings SetVerbose(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphUpdateSettings ResetVerbose(this AzureCosmosdbGremlinGraphUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinDatabaseCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetAccountName(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetAccountName(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetName(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetName(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetResourceGroup(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetResourceGroup(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput Gremlin database (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetThroughput(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput Gremlin database (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetThroughput(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetSubscription(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetSubscription(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetDebug(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetDebug(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetHelp(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetHelp(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetOutput(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetOutput(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetQuery(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetQuery(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings SetVerbose(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseCreateSettings ResetVerbose(this AzureCosmosdbGremlinDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinDatabaseDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetAccountName(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetAccountName(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetName(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetName(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetResourceGroup(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetResourceGroup(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetSubscription(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetSubscription(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetDebug(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetDebug(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetHelp(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetHelp(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetOutput(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetOutput(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetQuery(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetQuery(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings SetVerbose(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseDeleteSettings ResetVerbose(this AzureCosmosdbGremlinDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinDatabaseListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetAccountName(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetAccountName(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetResourceGroup(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetResourceGroup(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetSubscription(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetSubscription(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetDebug(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetDebug(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetHelp(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetHelp(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetOutput(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetOutput(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetQuery(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetQuery(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings SetVerbose(this AzureCosmosdbGremlinDatabaseListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseListSettings ResetVerbose(this AzureCosmosdbGremlinDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinDatabaseShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetAccountName(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetAccountName(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetName(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetName(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetResourceGroup(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetResourceGroup(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetSubscription(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetSubscription(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetDebug(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetDebug(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetHelp(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetHelp(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetOutput(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetOutput(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetQuery(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetQuery(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings SetVerbose(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseShowSettings ResetVerbose(this AzureCosmosdbGremlinDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetAccountName(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetAccountName(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetName(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetName(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Shard
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Shard"/></em></p>
        ///   <p>Sharding key path.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetShard(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string shard)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Shard = shard;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Shard"/></em></p>
        ///   <p>Sharding key path.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetShard(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Shard = null;
            return toolSettings;
        }
        #endregion
        #region Idx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Idx"/></em></p>
        ///   <p>Indexes, you can enter it as a string or as a file, e.g., --idx @indexes-file.json or --idx "[{"key": {"keys": ["_ts"]},"options": {"expireAfterSeconds": 1000}}, {"key": {"keys": ["user_id", "user_address"]}, "options": {"unique": "true"}}]".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetIdx(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string idx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = idx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Idx"/></em></p>
        ///   <p>Indexes, you can enter it as a string or as a file, e.g., --idx @indexes-file.json or --idx "[{"key": {"keys": ["_ts"]},"options": {"expireAfterSeconds": 1000}}, {"key": {"keys": ["user_id", "user_address"]}, "options": {"unique": "true"}}]".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetIdx(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB collection (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetThroughput(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB collection (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetThroughput(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetSubscription(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetSubscription(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetDebug(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetDebug(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetHelp(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetHelp(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetOutput(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetOutput(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetQuery(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetQuery(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings SetVerbose(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionCreateSettings ResetVerbose(this AzureCosmosdbMongodbCollectionCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetAccountName(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetAccountName(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetName(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetName(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetSubscription(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetSubscription(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetDebug(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetDebug(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetHelp(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetHelp(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetOutput(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetOutput(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetQuery(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetQuery(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings SetVerbose(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionDeleteSettings ResetVerbose(this AzureCosmosdbMongodbCollectionDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetAccountName(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetAccountName(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetSubscription(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetSubscription(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetDebug(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetDebug(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetHelp(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetHelp(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetOutput(this AzureCosmosdbMongodbCollectionListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetOutput(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetQuery(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetQuery(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings SetVerbose(this AzureCosmosdbMongodbCollectionListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionListSettings ResetVerbose(this AzureCosmosdbMongodbCollectionListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetAccountName(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetAccountName(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetName(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetName(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetSubscription(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetSubscription(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetDebug(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetDebug(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetHelp(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetHelp(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetOutput(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetOutput(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetQuery(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetQuery(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings SetVerbose(this AzureCosmosdbMongodbCollectionShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionShowSettings ResetVerbose(this AzureCosmosdbMongodbCollectionShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetAccountName(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetAccountName(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetName(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetName(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Idx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Idx"/></em></p>
        ///   <p>Indexes, you can enter it as a string or as a file, e.g., --idx @indexes-file.json or --idx "[{"key": {"keys": ["_ts"]},"options": {"expireAfterSeconds": 1000}}, {"key": {"keys": ["user_id", "user_address"]}, "options": {"unique": "true"}}]".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetIdx(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string idx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = idx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Idx"/></em></p>
        ///   <p>Indexes, you can enter it as a string or as a file, e.g., --idx @indexes-file.json or --idx "[{"key": {"keys": ["_ts"]},"options": {"expireAfterSeconds": 1000}}, {"key": {"keys": ["user_id", "user_address"]}, "options": {"unique": "true"}}]".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetIdx(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetSubscription(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetSubscription(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetDebug(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetDebug(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetHelp(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetHelp(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetOutput(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetOutput(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetQuery(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetQuery(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings SetVerbose(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionUpdateSettings ResetVerbose(this AzureCosmosdbMongodbCollectionUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbDatabaseCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetAccountName(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetAccountName(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetName(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetName(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetResourceGroup(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetResourceGroup(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB database (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetThroughput(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB database (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetThroughput(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetSubscription(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetSubscription(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetDebug(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetDebug(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetHelp(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetHelp(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetOutput(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetOutput(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetQuery(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetQuery(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings SetVerbose(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseCreateSettings ResetVerbose(this AzureCosmosdbMongodbDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbDatabaseDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetAccountName(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetAccountName(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetName(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetName(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetResourceGroup(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetResourceGroup(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetSubscription(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetSubscription(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetDebug(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetDebug(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetHelp(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetHelp(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetOutput(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetOutput(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetQuery(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetQuery(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings SetVerbose(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseDeleteSettings ResetVerbose(this AzureCosmosdbMongodbDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbDatabaseListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetAccountName(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetAccountName(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetResourceGroup(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetResourceGroup(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetSubscription(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetSubscription(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetDebug(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetDebug(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetHelp(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetHelp(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetOutput(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetOutput(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetQuery(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetQuery(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings SetVerbose(this AzureCosmosdbMongodbDatabaseListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseListSettings ResetVerbose(this AzureCosmosdbMongodbDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbDatabaseShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetAccountName(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetAccountName(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetName(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetName(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetResourceGroup(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetResourceGroup(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetSubscription(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetSubscription(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetDebug(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetDebug(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetHelp(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetHelp(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetOutput(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetOutput(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetQuery(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetQuery(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings SetVerbose(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseShowSettings ResetVerbose(this AzureCosmosdbMongodbDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbTableThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTableThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetAccountName(this AzureCosmosdbTableThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetAccountName(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetName(this AzureCosmosdbTableThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetName(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetResourceGroup(this AzureCosmosdbTableThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetResourceGroup(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetSubscription(this AzureCosmosdbTableThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetSubscription(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetDebug(this AzureCosmosdbTableThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetDebug(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetHelp(this AzureCosmosdbTableThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetHelp(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetOutput(this AzureCosmosdbTableThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetOutput(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetQuery(this AzureCosmosdbTableThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetQuery(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings SetVerbose(this AzureCosmosdbTableThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputShowSettings ResetVerbose(this AzureCosmosdbTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbTableThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbTableThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetAccountName(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetAccountName(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetName(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetName(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Table (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetThroughput(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Table (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetThroughput(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetSubscription(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetSubscription(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetDebug(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetDebug(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetHelp(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetHelp(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetOutput(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetOutput(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetQuery(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetQuery(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings SetVerbose(this AzureCosmosdbTableThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbTableThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbTableThroughputUpdateSettings ResetVerbose(this AzureCosmosdbTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetAccountName(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetAccountName(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetKeyspaceName(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetName(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetName(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetResourceGroup(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetResourceGroup(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Schema
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Schema"/></em></p>
        ///   <p>Schema, you can enter it as a string or as a file, e.g., --schema @schema-file.json or --schema "{"columns": [{"name": "columnA","type": "uuid"}, {"name": "columnB","type": "Ascii"}],"partitionKeys": [{"name": "columnA"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetSchema(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string schema)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Schema = schema;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Schema"/></em></p>
        ///   <p>Schema, you can enter it as a string or as a file, e.g., --schema @schema-file.json or --schema "{"columns": [{"name": "columnA","type": "uuid"}, {"name": "columnB","type": "Ascii"}],"partitionKeys": [{"name": "columnA"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetSchema(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Schema = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra table (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetThroughput(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra table (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetThroughput(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Ttl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetTtl(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string ttl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = ttl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetTtl(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetSubscription(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetSubscription(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetDebug(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetDebug(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetHelp(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetHelp(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetOutput(this AzureCosmosdbCassandraTableCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetOutput(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetQuery(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetQuery(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings SetVerbose(this AzureCosmosdbCassandraTableCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableCreateSettings ResetVerbose(this AzureCosmosdbCassandraTableCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetAccountName(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetAccountName(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetKeyspaceName(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetName(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetName(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetResourceGroup(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetResourceGroup(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetSubscription(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetSubscription(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetDebug(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetDebug(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetHelp(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetHelp(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetOutput(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetOutput(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetQuery(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetQuery(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings SetVerbose(this AzureCosmosdbCassandraTableDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableDeleteSettings ResetVerbose(this AzureCosmosdbCassandraTableDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetAccountName(this AzureCosmosdbCassandraTableListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetAccountName(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetKeyspaceName(this AzureCosmosdbCassandraTableListSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetResourceGroup(this AzureCosmosdbCassandraTableListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetResourceGroup(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetSubscription(this AzureCosmosdbCassandraTableListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetSubscription(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetDebug(this AzureCosmosdbCassandraTableListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetDebug(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetHelp(this AzureCosmosdbCassandraTableListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetHelp(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetOutput(this AzureCosmosdbCassandraTableListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetOutput(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetQuery(this AzureCosmosdbCassandraTableListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetQuery(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings SetVerbose(this AzureCosmosdbCassandraTableListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableListSettings ResetVerbose(this AzureCosmosdbCassandraTableListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetAccountName(this AzureCosmosdbCassandraTableShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetAccountName(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetKeyspaceName(this AzureCosmosdbCassandraTableShowSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetName(this AzureCosmosdbCassandraTableShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetName(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetResourceGroup(this AzureCosmosdbCassandraTableShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetResourceGroup(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetSubscription(this AzureCosmosdbCassandraTableShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetSubscription(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetDebug(this AzureCosmosdbCassandraTableShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetDebug(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetHelp(this AzureCosmosdbCassandraTableShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetHelp(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetOutput(this AzureCosmosdbCassandraTableShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetOutput(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetQuery(this AzureCosmosdbCassandraTableShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetQuery(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings SetVerbose(this AzureCosmosdbCassandraTableShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableShowSettings ResetVerbose(this AzureCosmosdbCassandraTableShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetAccountName(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetAccountName(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetKeyspaceName(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetName(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetName(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetResourceGroup(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetResourceGroup(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Schema
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Schema"/></em></p>
        ///   <p>Schema, you can enter it as a string or as a file, e.g., --schema @schema-file.json or --schema "{"columns": [{"name": "columnA","type": "uuid"}, {"name": "columnB","type": "Ascii"}],"partitionKeys": [{"name": "columnA"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetSchema(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string schema)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Schema = schema;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Schema"/></em></p>
        ///   <p>Schema, you can enter it as a string or as a file, e.g., --schema @schema-file.json or --schema "{"columns": [{"name": "columnA","type": "uuid"}, {"name": "columnB","type": "Ascii"}],"partitionKeys": [{"name": "columnA"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetSchema(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Schema = null;
            return toolSettings;
        }
        #endregion
        #region Ttl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetTtl(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string ttl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = ttl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetTtl(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetSubscription(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetSubscription(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetDebug(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetDebug(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetHelp(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetHelp(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetOutput(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetOutput(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetQuery(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetQuery(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings SetVerbose(this AzureCosmosdbCassandraTableUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableUpdateSettings ResetVerbose(this AzureCosmosdbCassandraTableUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraKeyspaceCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetAccountName(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetAccountName(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetName(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetName(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetResourceGroup(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetResourceGroup(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra keyspace (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetThroughput(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra keyspace (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetThroughput(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetSubscription(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetSubscription(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetDebug(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetDebug(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetHelp(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetHelp(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetOutput(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetOutput(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetQuery(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetQuery(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings SetVerbose(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceCreateSettings ResetVerbose(this AzureCosmosdbCassandraKeyspaceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraKeyspaceDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetAccountName(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetAccountName(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetName(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetName(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetResourceGroup(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetResourceGroup(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetSubscription(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetSubscription(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetDebug(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetDebug(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetHelp(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetHelp(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetOutput(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetOutput(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetQuery(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetQuery(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings SetVerbose(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceDeleteSettings ResetVerbose(this AzureCosmosdbCassandraKeyspaceDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraKeyspaceListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetAccountName(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetAccountName(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetResourceGroup(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetResourceGroup(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetSubscription(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetSubscription(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetDebug(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetDebug(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetHelp(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetHelp(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetOutput(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetOutput(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetQuery(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetQuery(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings SetVerbose(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceListSettings ResetVerbose(this AzureCosmosdbCassandraKeyspaceListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraKeyspaceShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetAccountName(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetAccountName(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetName(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetName(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetResourceGroup(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetResourceGroup(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetSubscription(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetSubscription(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetDebug(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetDebug(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetHelp(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetHelp(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetOutput(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetOutput(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetQuery(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetQuery(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings SetVerbose(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceShowSettings ResetVerbose(this AzureCosmosdbCassandraKeyspaceShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlDatabaseCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetAccountName(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetAccountName(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetName(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetName(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetResourceGroup(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetResourceGroup(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL database (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetThroughput(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL database (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetThroughput(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetSubscription(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetSubscription(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetDebug(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetDebug(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetHelp(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetHelp(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetOutput(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetOutput(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetQuery(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetQuery(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings SetVerbose(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseCreateSettings ResetVerbose(this AzureCosmosdbSqlDatabaseCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlDatabaseDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetAccountName(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetAccountName(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetName(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetName(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetResourceGroup(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetResourceGroup(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetSubscription(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetSubscription(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetDebug(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetDebug(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetHelp(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetHelp(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetOutput(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetOutput(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetQuery(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetQuery(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings SetVerbose(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseDeleteSettings ResetVerbose(this AzureCosmosdbSqlDatabaseDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlDatabaseListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetAccountName(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetAccountName(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetResourceGroup(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetResourceGroup(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetSubscription(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetSubscription(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetDebug(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetDebug(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetHelp(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetHelp(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetOutput(this AzureCosmosdbSqlDatabaseListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetOutput(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetQuery(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetQuery(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings SetVerbose(this AzureCosmosdbSqlDatabaseListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseListSettings ResetVerbose(this AzureCosmosdbSqlDatabaseListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlDatabaseShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetAccountName(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetAccountName(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetName(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetName(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetResourceGroup(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetResourceGroup(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetSubscription(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetSubscription(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetDebug(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetDebug(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetHelp(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetHelp(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetOutput(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetOutput(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetQuery(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetQuery(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings SetVerbose(this AzureCosmosdbSqlDatabaseShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseShowSettings ResetVerbose(this AzureCosmosdbSqlDatabaseShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerCreateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetAccountName(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetAccountName(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetDatabaseName(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetDatabaseName(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetName(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetName(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetResourceGroup(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetResourceGroup(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Idx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetIdx(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string idx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = idx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetIdx(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = null;
            return toolSettings;
        }
        #endregion
        #region PartitionKeyPath
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.PartitionKeyPath"/></em></p>
        ///   <p>Partition Key Path, e.g., '/address/zipcode'.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetPartitionKeyPath(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string partitionKeyPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKeyPath = partitionKeyPath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.PartitionKeyPath"/></em></p>
        ///   <p>Partition Key Path, e.g., '/address/zipcode'.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetPartitionKeyPath(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartitionKeyPath = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL container (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetThroughput(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL container (RU/s). Default value is 400.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetThroughput(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Ttl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetTtl(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string ttl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = ttl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetTtl(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetSubscription(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetSubscription(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetDebug(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetDebug(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetHelp(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetHelp(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetOutput(this AzureCosmosdbSqlContainerCreateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetOutput(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetQuery(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetQuery(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings SetVerbose(this AzureCosmosdbSqlContainerCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerCreateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerCreateSettings ResetVerbose(this AzureCosmosdbSqlContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerDeleteSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetAccountName(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetAccountName(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetDatabaseName(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetDatabaseName(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetName(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetName(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetResourceGroup(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetResourceGroup(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetSubscription(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetSubscription(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetDebug(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetDebug(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetHelp(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetHelp(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetOutput(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetOutput(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetQuery(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetQuery(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings SetVerbose(this AzureCosmosdbSqlContainerDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerDeleteSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerDeleteSettings ResetVerbose(this AzureCosmosdbSqlContainerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerListSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetAccountName(this AzureCosmosdbSqlContainerListSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetAccountName(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetDatabaseName(this AzureCosmosdbSqlContainerListSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetDatabaseName(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetResourceGroup(this AzureCosmosdbSqlContainerListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetResourceGroup(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetSubscription(this AzureCosmosdbSqlContainerListSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetSubscription(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetDebug(this AzureCosmosdbSqlContainerListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetDebug(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetHelp(this AzureCosmosdbSqlContainerListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetHelp(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetOutput(this AzureCosmosdbSqlContainerListSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetOutput(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetQuery(this AzureCosmosdbSqlContainerListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetQuery(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings SetVerbose(this AzureCosmosdbSqlContainerListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerListSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerListSettings ResetVerbose(this AzureCosmosdbSqlContainerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetAccountName(this AzureCosmosdbSqlContainerShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetAccountName(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetDatabaseName(this AzureCosmosdbSqlContainerShowSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetDatabaseName(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetName(this AzureCosmosdbSqlContainerShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetName(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetResourceGroup(this AzureCosmosdbSqlContainerShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetResourceGroup(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetSubscription(this AzureCosmosdbSqlContainerShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetSubscription(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetDebug(this AzureCosmosdbSqlContainerShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetDebug(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetHelp(this AzureCosmosdbSqlContainerShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetHelp(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetOutput(this AzureCosmosdbSqlContainerShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetOutput(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetQuery(this AzureCosmosdbSqlContainerShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetQuery(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings SetVerbose(this AzureCosmosdbSqlContainerShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerShowSettings ResetVerbose(this AzureCosmosdbSqlContainerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetAccountName(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetAccountName(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetDatabaseName(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetDatabaseName(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetName(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetName(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetResourceGroup(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetResourceGroup(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Idx
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetIdx(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string idx)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = idx;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Idx"/></em></p>
        ///   <p>Indexing Policy, you can enter it as a string or as a file, e.g., --idx @policy-file.json or --idx "{"indexingMode": "consistent", "includedPaths": [{"path": "/\*", "indexes": [{"dataType": "String", "kind": "Range"}]}], "excludedPaths": [{ "path": "/headquarters/employees/?"}]}".</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetIdx(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Idx = null;
            return toolSettings;
        }
        #endregion
        #region Ttl
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetTtl(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string ttl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = ttl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Ttl"/></em></p>
        ///   <p>Default TTL. If the value is missing or set to "-1", items don't expire. If the value is set to "n", items will expire "n" seconds after last modified time.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetTtl(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ttl = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetSubscription(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetSubscription(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetDebug(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetDebug(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetHelp(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetHelp(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetOutput(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetOutput(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetQuery(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetQuery(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings SetVerbose(this AzureCosmosdbSqlContainerUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerUpdateSettings ResetVerbose(this AzureCosmosdbSqlContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinDatabaseThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetAccountName(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetAccountName(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetName(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetName(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetResourceGroup(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetResourceGroup(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetSubscription(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetSubscription(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetDebug(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetDebug(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetHelp(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetHelp(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetOutput(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetOutput(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetQuery(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetQuery(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings SetVerbose(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputShowSettings ResetVerbose(this AzureCosmosdbGremlinDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinDatabaseThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinDatabaseThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetAccountName(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetAccountName(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetName(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetName(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Gremlin database (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetThroughput(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Gremlin database (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetThroughput(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetSubscription(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetSubscription(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetDebug(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetDebug(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetHelp(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetHelp(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetOutput(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetOutput(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetQuery(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetQuery(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings SetVerbose(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinDatabaseThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinDatabaseThroughputUpdateSettings ResetVerbose(this AzureCosmosdbGremlinDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetAccountName(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetAccountName(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetDatabaseName(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Name"/></em></p>
        ///   <p>Grapth name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetName(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Name"/></em></p>
        ///   <p>Grapth name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetName(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetResourceGroup(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetSubscription(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetSubscription(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetDebug(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetDebug(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetHelp(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetHelp(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetOutput(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetOutput(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetQuery(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetQuery(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings SetVerbose(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputShowSettings ResetVerbose(this AzureCosmosdbGremlinGraphThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbGremlinGraphThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbGremlinGraphThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetAccountName(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetAccountName(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetDatabaseName(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetDatabaseName(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Grapth name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetName(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Grapth name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetName(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput Gremlin graph (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetThroughput(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput Gremlin graph (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetThroughput(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetSubscription(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetSubscription(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetDebug(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetDebug(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetHelp(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetHelp(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetOutput(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetOutput(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetQuery(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetQuery(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings SetVerbose(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbGremlinGraphThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbGremlinGraphThroughputUpdateSettings ResetVerbose(this AzureCosmosdbGremlinGraphThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbDatabaseThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetAccountName(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetAccountName(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetName(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetName(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetResourceGroup(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetResourceGroup(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetSubscription(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetSubscription(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetDebug(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetDebug(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetHelp(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetHelp(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetOutput(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetOutput(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetQuery(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetQuery(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings SetVerbose(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputShowSettings ResetVerbose(this AzureCosmosdbMongodbDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbDatabaseThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbDatabaseThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetAccountName(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetAccountName(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetName(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetName(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB database (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetThroughput(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB database (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetThroughput(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetSubscription(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetSubscription(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetDebug(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetDebug(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetHelp(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetHelp(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetOutput(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetOutput(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetQuery(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetQuery(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings SetVerbose(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbDatabaseThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbDatabaseThroughputUpdateSettings ResetVerbose(this AzureCosmosdbMongodbDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetAccountName(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetAccountName(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetName(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetName(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetSubscription(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetSubscription(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetDebug(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetDebug(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetHelp(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetHelp(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetOutput(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetOutput(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetQuery(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetQuery(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings SetVerbose(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputShowSettings ResetVerbose(this AzureCosmosdbMongodbCollectionThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbMongodbCollectionThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbMongodbCollectionThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetAccountName(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetAccountName(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetDatabaseName(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetDatabaseName(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetName(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Collection name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetName(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB collection (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetThroughput(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of MongoDB collection (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetThroughput(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetSubscription(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetSubscription(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetDebug(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetDebug(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetHelp(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetHelp(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetOutput(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetOutput(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetQuery(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetQuery(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings SetVerbose(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbMongodbCollectionThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbMongodbCollectionThroughputUpdateSettings ResetVerbose(this AzureCosmosdbMongodbCollectionThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraKeyspaceThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetAccountName(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetAccountName(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetName(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetName(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetResourceGroup(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetResourceGroup(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetSubscription(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetSubscription(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetDebug(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetDebug(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetHelp(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetHelp(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetOutput(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetOutput(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetQuery(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetQuery(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings SetVerbose(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputShowSettings ResetVerbose(this AzureCosmosdbCassandraKeyspaceThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraKeyspaceThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraKeyspaceThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetAccountName(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetAccountName(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetName(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetName(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra keyspace (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetThroughput(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra keyspace (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetThroughput(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetSubscription(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetSubscription(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetDebug(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetDebug(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetHelp(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetHelp(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetOutput(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetOutput(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetQuery(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetQuery(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings SetVerbose(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings ResetVerbose(this AzureCosmosdbCassandraKeyspaceThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetAccountName(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetAccountName(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetKeyspaceName(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetName(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetName(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetResourceGroup(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetResourceGroup(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetSubscription(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetSubscription(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetDebug(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetDebug(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetHelp(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetHelp(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetOutput(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetOutput(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetQuery(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetQuery(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings SetVerbose(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputShowSettings ResetVerbose(this AzureCosmosdbCassandraTableThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbCassandraTableThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbCassandraTableThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetAccountName(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetAccountName(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region KeyspaceName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetKeyspaceName(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string keyspaceName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = keyspaceName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.KeyspaceName"/></em></p>
        ///   <p>Keyspace name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetKeyspaceName(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyspaceName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetName(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Table name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetName(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra table (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetThroughput(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of Cassandra table (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetThroughput(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetSubscription(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetSubscription(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetDebug(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetDebug(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetHelp(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetHelp(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetOutput(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetOutput(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetQuery(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetQuery(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings SetVerbose(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbCassandraTableThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbCassandraTableThroughputUpdateSettings ResetVerbose(this AzureCosmosdbCassandraTableThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlDatabaseThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetAccountName(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetAccountName(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetName(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetName(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetResourceGroup(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetResourceGroup(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetSubscription(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetSubscription(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetDebug(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetDebug(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetHelp(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetHelp(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetOutput(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetOutput(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetQuery(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetQuery(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings SetVerbose(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputShowSettings ResetVerbose(this AzureCosmosdbSqlDatabaseThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlDatabaseThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlDatabaseThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetAccountName(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetAccountName(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetName(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetName(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL database (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetThroughput(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL database (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetThroughput(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetSubscription(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetSubscription(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetDebug(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetDebug(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetHelp(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetHelp(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetOutput(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetOutput(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetQuery(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetQuery(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings SetVerbose(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlDatabaseThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlDatabaseThroughputUpdateSettings ResetVerbose(this AzureCosmosdbSqlDatabaseThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerThroughputShowSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerThroughputShowSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetAccountName(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetAccountName(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetDatabaseName(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetDatabaseName(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetName(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetName(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetResourceGroup(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetResourceGroup(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetSubscription(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetSubscription(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetDebug(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetDebug(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetHelp(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetHelp(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetOutput(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetOutput(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetQuery(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetQuery(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings SetVerbose(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputShowSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputShowSettings ResetVerbose(this AzureCosmosdbSqlContainerThroughputShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureCosmosdbSqlContainerThroughputUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureCosmosdbSqlContainerThroughputUpdateSettingsExtensions
    {
        #region AccountName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetAccountName(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string accountName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = accountName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.AccountName"/></em></p>
        ///   <p>Cosmosdb account name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetAccountName(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AccountName = null;
            return toolSettings;
        }
        #endregion
        #region DatabaseName
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetDatabaseName(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string databaseName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = databaseName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.DatabaseName"/></em></p>
        ///   <p>Database name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetDatabaseName(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DatabaseName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetName(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Name"/></em></p>
        ///   <p>Container name.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetName(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetResourceGroup(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.ResourceGroup"/></em></p>
        ///   <p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetResourceGroup(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Throughput
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL container (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetThroughput(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string throughput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = throughput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Throughput"/></em></p>
        ///   <p>The throughput of SQL container (RU/s).</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetThroughput(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Throughput = null;
            return toolSettings;
        }
        #endregion
        #region Subscription
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetSubscription(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string subscription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = subscription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Subscription"/></em></p>
        ///   <p>Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetSubscription(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subscription = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetDebug(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Debug"/></em></p>
        ///   <p>Increase logging verbosity to show all debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetDebug(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetHelp(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Help"/></em></p>
        ///   <p>Show this help message and exit.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetHelp(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetOutput(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, AzureOutput output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Output"/></em></p>
        ///   <p>Output format.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetOutput(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetQuery(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Query"/></em></p>
        ///   <p>JMESPath query string. See <a href="http://jmespath.org/">http://jmespath.org/</a> for more information and examples.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetQuery(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings SetVerbose(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="AzureCosmosdbSqlContainerThroughputUpdateSettings.Verbose"/></em></p>
        ///   <p>Increase logging verbosity. Use --debug for full debug logs.</p>
        /// </summary>
        [Pure]
        public static AzureCosmosdbSqlContainerThroughputUpdateSettings ResetVerbose(this AzureCosmosdbSqlContainerThroughputUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region CosmosdbDefaultConsistencyLevel
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CosmosdbDefaultConsistencyLevel>))]
    public partial class CosmosdbDefaultConsistencyLevel : Enumeration
    {
        public static CosmosdbDefaultConsistencyLevel boundedstaleness = new CosmosdbDefaultConsistencyLevel { Value = "boundedstaleness" };
        public static CosmosdbDefaultConsistencyLevel consistentprefix = new CosmosdbDefaultConsistencyLevel { Value = "consistentprefix" };
        public static CosmosdbDefaultConsistencyLevel eventual = new CosmosdbDefaultConsistencyLevel { Value = "eventual" };
        public static CosmosdbDefaultConsistencyLevel session = new CosmosdbDefaultConsistencyLevel { Value = "session" };
        public static CosmosdbDefaultConsistencyLevel strong = new CosmosdbDefaultConsistencyLevel { Value = "strong" };
    }
    #endregion
    #region CosmosdbCreateKind
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CosmosdbCreateKind>))]
    public partial class CosmosdbCreateKind : Enumeration
    {
        public static CosmosdbCreateKind globaldocumentdb = new CosmosdbCreateKind { Value = "globaldocumentdb" };
        public static CosmosdbCreateKind mongodb = new CosmosdbCreateKind { Value = "mongodb" };
        public static CosmosdbCreateKind parse = new CosmosdbCreateKind { Value = "parse" };
    }
    #endregion
    #region CosmosdbKeyKind
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CosmosdbKeyKind>))]
    public partial class CosmosdbKeyKind : Enumeration
    {
        public static CosmosdbKeyKind primary = new CosmosdbKeyKind { Value = "primary" };
        public static CosmosdbKeyKind primaryreadonly = new CosmosdbKeyKind { Value = "primaryreadonly" };
        public static CosmosdbKeyKind secondary = new CosmosdbKeyKind { Value = "secondary" };
        public static CosmosdbKeyKind secondaryreadonly = new CosmosdbKeyKind { Value = "secondaryreadonly" };
    }
    #endregion
    #region CosmosdbKeysListType
    /// <summary>
    ///   Used within <see cref="AzureCosmosdbTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CosmosdbKeysListType>))]
    public partial class CosmosdbKeysListType : Enumeration
    {
        public static CosmosdbKeysListType connection_strings = new CosmosdbKeysListType { Value = "connection-strings" };
        public static CosmosdbKeysListType keys = new CosmosdbKeysListType { Value = "keys" };
        public static CosmosdbKeysListType read_only_keys = new CosmosdbKeysListType { Value = "read-only-keys" };
    }
    #endregion
}
