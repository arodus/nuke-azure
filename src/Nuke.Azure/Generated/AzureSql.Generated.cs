// Copyright Matthias Koch, Sebastian Karasek 2018.
// Distributed under the MIT License.
// https://github.com/nuke-build/nuke/blob/master/LICENSE

// Generated with Nuke.CodeGeneration, Version: 0.5.0-alpha.20 [CommitSha: 67bb27fd].
// Generated from https://github.com/nuke-build/azure/blob/master/src/Nuke.Azure/specifications/AzureSql.json.

using JetBrains.Annotations;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Azure
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlTasks
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public static string AzureSqlPath => ToolPathResolver.GetPathExecutable("az");
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p></summary>
        public static IEnumerable<string> AzureSql(string arguments, string workingDirectory = null, ProcessSettings processSettings = null)
        {
            var process = ProcessTasks.StartProcess(AzureSqlPath, arguments, workingDirectory, processSettings?.EnvironmentVariables, processSettings?.ExecutionTimeout, processSettings?.RedirectOutput ?? true);
            process.AssertZeroExitCode();
            return process.Output.Select(x => x.Text);
        }
        static partial void PreProcess(AzureSqlListUsagesSettings toolSettings);
        static partial void PostProcess(AzureSqlListUsagesSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlListUsages(Configure<AzureSqlListUsagesSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlListUsagesSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlShowUsageSettings toolSettings);
        static partial void PostProcess(AzureSqlShowUsageSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlShowUsage(Configure<AzureSqlShowUsageSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlShowUsageSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbCopySettings toolSettings);
        static partial void PostProcess(AzureSqlDbCopySettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbCopy(Configure<AzureSqlDbCopySettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbCopySettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlDbCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbCreate(Configure<AzureSqlDbCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlDbDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbDelete(Configure<AzureSqlDbDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbExportSettings toolSettings);
        static partial void PostProcess(AzureSqlDbExportSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbExport(Configure<AzureSqlDbExportSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbExportSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbImportSettings toolSettings);
        static partial void PostProcess(AzureSqlDbImportSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbImport(Configure<AzureSqlDbImportSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbImportSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbListSettings toolSettings);
        static partial void PostProcess(AzureSqlDbListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbList(Configure<AzureSqlDbListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbListDeletedSettings toolSettings);
        static partial void PostProcess(AzureSqlDbListDeletedSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbListDeleted(Configure<AzureSqlDbListDeletedSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbListDeletedSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbListEditionsSettings toolSettings);
        static partial void PostProcess(AzureSqlDbListEditionsSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbListEditions(Configure<AzureSqlDbListEditionsSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbListEditionsSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbListUsagesSettings toolSettings);
        static partial void PostProcess(AzureSqlDbListUsagesSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbListUsages(Configure<AzureSqlDbListUsagesSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbListUsagesSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbRenameSettings toolSettings);
        static partial void PostProcess(AzureSqlDbRenameSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbRename(Configure<AzureSqlDbRenameSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbRenameSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbRestoreSettings toolSettings);
        static partial void PostProcess(AzureSqlDbRestoreSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbRestore(Configure<AzureSqlDbRestoreSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbRestoreSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbShowSettings toolSettings);
        static partial void PostProcess(AzureSqlDbShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbShow(Configure<AzureSqlDbShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbShowConnectionStringSettings toolSettings);
        static partial void PostProcess(AzureSqlDbShowConnectionStringSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbShowConnectionString(Configure<AzureSqlDbShowConnectionStringSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbShowConnectionStringSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlDbUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbUpdate(Configure<AzureSqlDbUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlDwCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwCreate(Configure<AzureSqlDwCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlDwDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwDelete(Configure<AzureSqlDwDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwListSettings toolSettings);
        static partial void PostProcess(AzureSqlDwListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwList(Configure<AzureSqlDwListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwPauseSettings toolSettings);
        static partial void PostProcess(AzureSqlDwPauseSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwPause(Configure<AzureSqlDwPauseSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwPauseSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwResumeSettings toolSettings);
        static partial void PostProcess(AzureSqlDwResumeSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwResume(Configure<AzureSqlDwResumeSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwResumeSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwShowSettings toolSettings);
        static partial void PostProcess(AzureSqlDwShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwShow(Configure<AzureSqlDwShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDwUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlDwUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDwUpdate(Configure<AzureSqlDwUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDwUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolCreate(Configure<AzureSqlElasticPoolCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolDelete(Configure<AzureSqlElasticPoolDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolListSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolList(Configure<AzureSqlElasticPoolListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolListDbsSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolListDbsSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolListDbs(Configure<AzureSqlElasticPoolListDbsSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolListDbsSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolListEditionsSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolListEditionsSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolListEditions(Configure<AzureSqlElasticPoolListEditionsSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolListEditionsSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolShowSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolShow(Configure<AzureSqlElasticPoolShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolUpdate(Configure<AzureSqlElasticPoolUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerCreate(Configure<AzureSqlServerCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlServerDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerDelete(Configure<AzureSqlServerDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerListSettings toolSettings);
        static partial void PostProcess(AzureSqlServerListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerList(Configure<AzureSqlServerListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerListUsagesSettings toolSettings);
        static partial void PostProcess(AzureSqlServerListUsagesSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerListUsages(Configure<AzureSqlServerListUsagesSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerListUsagesSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerShow(Configure<AzureSqlServerShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerUpdate(Configure<AzureSqlServerUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbAuditPolicyShowSettings toolSettings);
        static partial void PostProcess(AzureSqlDbAuditPolicyShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbAuditPolicyShow(Configure<AzureSqlDbAuditPolicyShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbAuditPolicyShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbAuditPolicyUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlDbAuditPolicyUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbAuditPolicyUpdate(Configure<AzureSqlDbAuditPolicyUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbAuditPolicyUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbOpCancelSettings toolSettings);
        static partial void PostProcess(AzureSqlDbOpCancelSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbOpCancel(Configure<AzureSqlDbOpCancelSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbOpCancelSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbOpListSettings toolSettings);
        static partial void PostProcess(AzureSqlDbOpListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbOpList(Configure<AzureSqlDbOpListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbOpListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbReplicaCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlDbReplicaCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbReplicaCreate(Configure<AzureSqlDbReplicaCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbReplicaCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbReplicaDeleteLinkSettings toolSettings);
        static partial void PostProcess(AzureSqlDbReplicaDeleteLinkSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbReplicaDeleteLink(Configure<AzureSqlDbReplicaDeleteLinkSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbReplicaDeleteLinkSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbReplicaListLinksSettings toolSettings);
        static partial void PostProcess(AzureSqlDbReplicaListLinksSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbReplicaListLinks(Configure<AzureSqlDbReplicaListLinksSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbReplicaListLinksSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbReplicaSetPrimarySettings toolSettings);
        static partial void PostProcess(AzureSqlDbReplicaSetPrimarySettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbReplicaSetPrimary(Configure<AzureSqlDbReplicaSetPrimarySettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbReplicaSetPrimarySettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbTdeListActivitySettings toolSettings);
        static partial void PostProcess(AzureSqlDbTdeListActivitySettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbTdeListActivity(Configure<AzureSqlDbTdeListActivitySettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbTdeListActivitySettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbTdeSetSettings toolSettings);
        static partial void PostProcess(AzureSqlDbTdeSetSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbTdeSet(Configure<AzureSqlDbTdeSetSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbTdeSetSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbTdeShowSettings toolSettings);
        static partial void PostProcess(AzureSqlDbTdeShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbTdeShow(Configure<AzureSqlDbTdeShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbTdeShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbThreatPolicyShowSettings toolSettings);
        static partial void PostProcess(AzureSqlDbThreatPolicyShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbThreatPolicyShow(Configure<AzureSqlDbThreatPolicyShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbThreatPolicyShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlDbThreatPolicyUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlDbThreatPolicyUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlDbThreatPolicyUpdate(Configure<AzureSqlDbThreatPolicyUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlDbThreatPolicyUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolOpCancelSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolOpCancelSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolOpCancel(Configure<AzureSqlElasticPoolOpCancelSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolOpCancelSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlElasticPoolOpListSettings toolSettings);
        static partial void PostProcess(AzureSqlElasticPoolOpListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlElasticPoolOpList(Configure<AzureSqlElasticPoolOpListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlElasticPoolOpListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerAdAdminCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerAdAdminCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerAdAdminCreate(Configure<AzureSqlServerAdAdminCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerAdAdminCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerAdAdminDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlServerAdAdminDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerAdAdminDelete(Configure<AzureSqlServerAdAdminDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerAdAdminDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerAdAdminListSettings toolSettings);
        static partial void PostProcess(AzureSqlServerAdAdminListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerAdAdminList(Configure<AzureSqlServerAdAdminListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerAdAdminListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerAdAdminUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerAdAdminUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerAdAdminUpdate(Configure<AzureSqlServerAdAdminUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerAdAdminUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerConnPolicyShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerConnPolicyShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerConnPolicyShow(Configure<AzureSqlServerConnPolicyShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerConnPolicyShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerConnPolicyUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerConnPolicyUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerConnPolicyUpdate(Configure<AzureSqlServerConnPolicyUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerConnPolicyUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerDnsAliasCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerDnsAliasCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerDnsAliasCreate(Configure<AzureSqlServerDnsAliasCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerDnsAliasCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerDnsAliasDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlServerDnsAliasDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerDnsAliasDelete(Configure<AzureSqlServerDnsAliasDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerDnsAliasDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerDnsAliasListSettings toolSettings);
        static partial void PostProcess(AzureSqlServerDnsAliasListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerDnsAliasList(Configure<AzureSqlServerDnsAliasListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerDnsAliasListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerDnsAliasSetSettings toolSettings);
        static partial void PostProcess(AzureSqlServerDnsAliasSetSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerDnsAliasSet(Configure<AzureSqlServerDnsAliasSetSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerDnsAliasSetSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerDnsAliasShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerDnsAliasShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerDnsAliasShow(Configure<AzureSqlServerDnsAliasShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerDnsAliasShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerFirewallRuleCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerFirewallRuleCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerFirewallRuleCreate(Configure<AzureSqlServerFirewallRuleCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerFirewallRuleCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerFirewallRuleDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlServerFirewallRuleDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerFirewallRuleDelete(Configure<AzureSqlServerFirewallRuleDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerFirewallRuleDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerFirewallRuleListSettings toolSettings);
        static partial void PostProcess(AzureSqlServerFirewallRuleListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerFirewallRuleList(Configure<AzureSqlServerFirewallRuleListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerFirewallRuleListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerFirewallRuleShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerFirewallRuleShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerFirewallRuleShow(Configure<AzureSqlServerFirewallRuleShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerFirewallRuleShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerFirewallRuleUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerFirewallRuleUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerFirewallRuleUpdate(Configure<AzureSqlServerFirewallRuleUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerFirewallRuleUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerKeyCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerKeyCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerKeyCreate(Configure<AzureSqlServerKeyCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerKeyCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerKeyDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlServerKeyDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerKeyDelete(Configure<AzureSqlServerKeyDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerKeyDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerKeyListSettings toolSettings);
        static partial void PostProcess(AzureSqlServerKeyListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerKeyList(Configure<AzureSqlServerKeyListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerKeyListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerKeyShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerKeyShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerKeyShow(Configure<AzureSqlServerKeyShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerKeyShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerTdeKeySetSettings toolSettings);
        static partial void PostProcess(AzureSqlServerTdeKeySetSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerTdeKeySet(Configure<AzureSqlServerTdeKeySetSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerTdeKeySetSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerTdeKeyShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerTdeKeyShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerTdeKeyShow(Configure<AzureSqlServerTdeKeyShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerTdeKeyShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerVnetRuleCreateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerVnetRuleCreateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerVnetRuleCreate(Configure<AzureSqlServerVnetRuleCreateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerVnetRuleCreateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerVnetRuleDeleteSettings toolSettings);
        static partial void PostProcess(AzureSqlServerVnetRuleDeleteSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerVnetRuleDelete(Configure<AzureSqlServerVnetRuleDeleteSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerVnetRuleDeleteSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerVnetRuleListSettings toolSettings);
        static partial void PostProcess(AzureSqlServerVnetRuleListSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerVnetRuleList(Configure<AzureSqlServerVnetRuleListSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerVnetRuleListSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerVnetRuleShowSettings toolSettings);
        static partial void PostProcess(AzureSqlServerVnetRuleShowSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerVnetRuleShow(Configure<AzureSqlServerVnetRuleShowSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerVnetRuleShowSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
        static partial void PreProcess(AzureSqlServerVnetRuleUpdateSettings toolSettings);
        static partial void PostProcess(AzureSqlServerVnetRuleUpdateSettings toolSettings);
        /// <summary><p>Manage Azure SQL Databases and Data Warehouses.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/cli/azure/sql?view=azure-cli-latest">official website</a>.</p></summary>
        public static void AzureSqlServerVnetRuleUpdate(Configure<AzureSqlServerVnetRuleUpdateSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new AzureSqlServerVnetRuleUpdateSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
    }
    #region AzureSqlListUsagesSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlListUsagesSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql list-usages")
              .Add("--location {value}", Location)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlShowUsageSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlShowUsageSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>Name of usage metric to return.</p></summary>
        public virtual string Usage { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql show-usage")
              .Add("--location {value}", Location)
              .Add("--usage {value}", Usage)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbCopySettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbCopySettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the database that will be created as the copy destination.</p></summary>
        public virtual string DestName { get; internal set; }
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Name of the resouce group to create the copy in. If unspecified, defaults to the origin resource group.</p></summary>
        public virtual string DestResourceGroup { get; internal set; }
        /// <summary><p>Name of the server to create the copy in. If unspecified, defaults to the origin server.</p></summary>
        public virtual string DestServer { get; internal set; }
        /// <summary><p>Name of the elastic pool to create the new database in.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>Name of the service objective for the new database.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db copy")
              .Add("--dest-name {value}", DestName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--dest-resource-group {value}", DestResourceGroup)
              .Add("--dest-server {value}", DestServer)
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--no-wait {value}", NoWait)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--tags {value}", Tags)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The collation of the database. If createMode is not Default, this value is ignored.</p></summary>
        public virtual string Collation { get; internal set; }
        /// <summary><p>The edition of the database.</p></summary>
        public virtual string Edition { get; internal set; }
        /// <summary><p>The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>The max storage size of the database. Only the following sizes are supported (in addition to limitations being placed on each edition): 100MB, 500MB, 1GB, 5GB, 10GB, 20GB, 30GB, 150GB, 200GB, 500GB. If no unit is specified, defaults to bytes (B).</p></summary>
        public virtual string MaxSize { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.</p></summary>
        public virtual string SampleName { get; internal set; }
        /// <summary><p>The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: "Capabilities_ListByLocation." or use the Azure CLI command `az sql db list-editions --location &amp;lt;location&amp;gt; --query [].supportedServiceLevelObjectives[].name`.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        public virtual bool? ZoneRedundant { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--collation {value}", Collation)
              .Add("--edition {value}", Edition)
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--max-size {value}", MaxSize)
              .Add("--no-wait {value}", NoWait)
              .Add("--sample-name {value}", SampleName)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--tags {value}", Tags)
              .Add("--zone-redundant", ZoneRedundant)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbExportSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbExportSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The password of the SQL administrator.</p></summary>
        public virtual string AdminPassword { get; internal set; }
        /// <summary><p>The name of the SQL administrator.</p></summary>
        public virtual string AdminUser { get; internal set; }
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?.".</p></summary>
        public virtual string StorageKey { get; internal set; }
        /// <summary><p>The type of the storage key to use.</p></summary>
        public virtual SqlDbStorageKeyType StorageKeyType { get; internal set; }
        /// <summary><p>The storage uri to use.</p></summary>
        public virtual string StorageUri { get; internal set; }
        /// <summary><p>The authentication type.</p></summary>
        public virtual SqlDbAuthType AuthType { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db export")
              .Add("--admin-password {value}", AdminPassword)
              .Add("--admin-user {value}", AdminUser)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--storage-key {value}", StorageKey)
              .Add("--storage-key-type {value}", StorageKeyType)
              .Add("--storage-uri {value}", StorageUri)
              .Add("--auth-type {value}", AuthType)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbImportSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbImportSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The password of the SQL administrator.</p></summary>
        public virtual string AdminPassword { get; internal set; }
        /// <summary><p>The name of the SQL administrator.</p></summary>
        public virtual string AdminUser { get; internal set; }
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?.".</p></summary>
        public virtual string StorageKey { get; internal set; }
        /// <summary><p>The type of the storage key to use.</p></summary>
        public virtual SqlDbStorageKeyType StorageKeyType { get; internal set; }
        /// <summary><p>The storage uri to use.</p></summary>
        public virtual string StorageUri { get; internal set; }
        /// <summary><p>The authentication type.</p></summary>
        public virtual SqlDbAuthType AuthType { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db import")
              .Add("--admin-password {value}", AdminPassword)
              .Add("--admin-user {value}", AdminUser)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--storage-key {value}", StorageKey)
              .Add("--storage-key-type {value}", StorageKeyType)
              .Add("--storage-uri {value}", StorageUri)
              .Add("--auth-type {value}", AuthType)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>If specified, lists only the databases in this elastic pool.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbListDeletedSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbListDeletedSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db list-deleted")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbListEditionsSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbListEditionsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>List of additional details to include in output.</p></summary>
        public virtual SqlDbListEditionsShowDetails ShowDetails { get; internal set; }
        /// <summary><p>Edition to search for. If unspecified, all editions are shown.</p></summary>
        public virtual string Edition { get; internal set; }
        /// <summary><p>Service objective to search for. If unspecified, all editions are shown.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db list-editions")
              .Add("--location {value}", Location)
              .Add("--show-details {value}", ShowDetails)
              .Add("--edition {value}", Edition)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbListUsagesSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbListUsagesSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db list-usages")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbRenameSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbRenameSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The new name that the database will be renamed to.</p></summary>
        public virtual string NewName { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db rename")
              .Add("--name {value}", Name)
              .Add("--new-name {value}", NewName)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbRestoreSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbRestoreSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the database that will be created as the restore destination.</p></summary>
        public virtual string DestName { get; internal set; }
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The edition for the new database.</p></summary>
        public virtual string Edition { get; internal set; }
        /// <summary><p>Name of the elastic pool to create the new database in.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>Name of service objective for the new database.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>If specified, restore from a deleted database instead of from an existing database. Must match the deleted time of a deleted database in the same server. Either --time or --deleted-time (or both) must be specified.</p></summary>
        public virtual string DeletedTime { get; internal set; }
        /// <summary><p>The point in time of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value. Either --time or --deleted-time (or both) must be specified.</p></summary>
        public virtual string Time { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db restore")
              .Add("--dest-name {value}", DestName)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--edition {value}", Edition)
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--no-wait {value}", NoWait)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--tags {value}", Tags)
              .Add("--deleted-time {value}", DeletedTime)
              .Add("--time {value}", Time)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbShowConnectionStringSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbShowConnectionStringSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Type of client connection provider.</p></summary>
        public virtual SqlDbShowConnectionStringClient Client { get; internal set; }
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Type of authentication.</p></summary>
        public virtual SqlDbShowConnectionStringAuthType AuthType { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db show-connection-string")
              .Add("--client {value}", Client)
              .Add("--name {value}", Name)
              .Add("--server {value}", Server)
              .Add("--auth-type {value}", AuthType)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The name of the elastic pool to move the database into.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>The new maximum size of the database expressed in bytes.</p></summary>
        public virtual string MaxSize { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>The name of the new service objective. If this is a standalone db service objective and the db is currently in an elastic pool, then the db is removed from the pool.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        public virtual bool? ZoneRedundant { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--max-size {value}", MaxSize)
              .Add("--no-wait {value}", NoWait)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--zone-redundant", ZoneRedundant)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the data warehouse.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The collation of the data warehouse.</p></summary>
        public virtual string Collation { get; internal set; }
        /// <summary><p>The max storage size of the data warehouse. If no unit is specified, defaultsto bytes (B).</p></summary>
        public virtual string MaxSize { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>The service objective of the data warehouse.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--collation {value}", Collation)
              .Add("--max-size {value}", MaxSize)
              .Add("--no-wait {value}", NoWait)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--tags {value}", Tags)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the data warehouse.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwPauseSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwPauseSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the data warehouse.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw pause")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwResumeSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwResumeSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the data warehouse.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw resume")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the data warehouse.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDwUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDwUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the data warehouse.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The max storage size of the data warehouse. If no unit is specified, defaultsto bytes (B).</p></summary>
        public virtual string MaxSize { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>The service objective of the data warehouse.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql dw update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--max-size {value}", MaxSize)
              .Add("--no-wait {value}", NoWait)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the elastic pool.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The maximum DTU any one database can consume.</p></summary>
        public virtual string DbDtuMax { get; internal set; }
        /// <summary><p>The minimum DTU all databases are guaranteed.</p></summary>
        public virtual string DbDtuMin { get; internal set; }
        /// <summary><p>The total shared DTU for the database elastic pool.</p></summary>
        public virtual string Dtu { get; internal set; }
        /// <summary><p>The edition of the elastic pool.</p></summary>
        public virtual string Edition { get; internal set; }
        /// <summary><p>The max storage size of the elastic pool. If no unit is specified, defaults to megabytes (MB).</p></summary>
        public virtual string MaxSize { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        public virtual bool? ZoneRedundant { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--db-dtu-max {value}", DbDtuMax)
              .Add("--db-dtu-min {value}", DbDtuMin)
              .Add("--dtu {value}", Dtu)
              .Add("--edition {value}", Edition)
              .Add("--max-size {value}", MaxSize)
              .Add("--tags {value}", Tags)
              .Add("--zone-redundant", ZoneRedundant)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the elastic pool.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolListDbsSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolListDbsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the elastic pool.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool list-dbs")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolListEditionsSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolListEditionsSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p>List of additional details to include in output.</p></summary>
        public virtual SqlElasticPoolListEditionsShowDetails ShowDetails { get; internal set; }
        /// <summary><p>Elastic pool DTU limit to search for. If unspecified, all DTU limits are shown.</p></summary>
        public virtual string Dtu { get; internal set; }
        /// <summary><p>Edition to search for. If unspecified, all editions are shown.</p></summary>
        public virtual string Edition { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool list-editions")
              .Add("--location {value}", Location)
              .Add("--show-details {value}", ShowDetails)
              .Add("--dtu {value}", Dtu)
              .Add("--edition {value}", Edition)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the elastic pool.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the elastic pool.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The maximum DTU any one database can consume.</p></summary>
        public virtual string DbDtuMax { get; internal set; }
        /// <summary><p>The minimum DTU all databases are guaranteed.</p></summary>
        public virtual string DbDtuMin { get; internal set; }
        /// <summary><p>TThe total shared DTU for the elastic eool.</p></summary>
        public virtual string Dtu { get; internal set; }
        /// <summary><p>Storage limit for the elastic pool in MB.</p></summary>
        public virtual string MaxSize { get; internal set; }
        /// <summary><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        public virtual bool? ZoneRedundant { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--db-dtu-max {value}", DbDtuMax)
              .Add("--db-dtu-min {value}", DbDtuMin)
              .Add("--dtu {value}", Dtu)
              .Add("--max-size {value}", MaxSize)
              .Add("--zone-redundant", ZoneRedundant)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The administrator login password (required for server creation).</p></summary>
        public virtual string AdminPassword { get; internal set; }
        /// <summary><p>Administrator username for the server. Once created it cannot be changed.</p></summary>
        public virtual string AdminUser { get; internal set; }
        /// <summary><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        public virtual string Location { get; internal set; }
        /// <summary><p></p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Generate and assign an Azure Active Directory Identity for this serverfor use with key management services like Azure KeyVault.</p></summary>
        public virtual string AssignIdentity { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server create")
              .Add("--admin-password {value}", AdminPassword)
              .Add("--admin-user {value}", AdminUser)
              .Add("--location {value}", Location)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--assign-identity {value}", AssignIdentity)
              .Add("--tags {value}", Tags)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerListUsagesSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerListUsagesSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server list-usages")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The administrator login password.</p></summary>
        public virtual string AdminPassword { get; internal set; }
        /// <summary><p>Generate and assign an Azure Active Directory Identity for this serverfor use with key management services like Azure KeyVault.</p></summary>
        public virtual string Assign_identity { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--admin-password {value}", AdminPassword)
              .Add("--assign_identity {value}", Assign_identity)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbAuditPolicyShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbAuditPolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db audit-policy show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbAuditPolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbAuditPolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>List of actions and action groups to audit.</p></summary>
        public virtual string Actions { get; internal set; }
        /// <summary><p>The number of days to retain audit logs.</p></summary>
        public virtual string RetentionDays { get; internal set; }
        /// <summary><p>Auditing policy state.</p></summary>
        public virtual SqlDbAuditPolicyUpdateState State { get; internal set; }
        /// <summary><p>Name of the storage account.</p></summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary><p>The storage account endpoint.</p></summary>
        public virtual string StorageEndpoint { get; internal set; }
        /// <summary><p>Access key for the storage account.</p></summary>
        public virtual string StorageKey { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db audit-policy update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--actions {value}", Actions)
              .Add("--retention-days {value}", RetentionDays)
              .Add("--state {value}", State)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--storage-endpoint {value}", StorageEndpoint)
              .Add("--storage-key {value}", StorageKey)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbOpCancelSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbOpCancelSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Database { get; internal set; }
        /// <summary><p>The unique name of the operation to cancel.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db op cancel")
              .Add("--database {value}", Database)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbOpListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbOpListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Database { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db op list")
              .Add("--database {value}", Database)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbReplicaCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbReplicaCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the server to create the new replica in.</p></summary>
        public virtual string PartnerServer { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Name of elastic pool to create the new replica in.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>Do not wait for the long-running operation to finish.</p></summary>
        public virtual string NoWait { get; internal set; }
        /// <summary><p>Name of the resource group to create the new replica in. If unspecified, defaults to the origin resource group.</p></summary>
        public virtual string PartnerResourceGroup { get; internal set; }
        /// <summary><p>Name of service objective for the new replica.</p></summary>
        public virtual string ServiceObjective { get; internal set; }
        /// <summary><p>Resource tags.</p></summary>
        public virtual string Tags { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db replica create")
              .Add("--name {value}", Name)
              .Add("--partner-server {value}", PartnerServer)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--no-wait {value}", NoWait)
              .Add("--partner-resource-group {value}", PartnerResourceGroup)
              .Add("--service-objective {value}", ServiceObjective)
              .Add("--tags {value}", Tags)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbReplicaDeleteLinkSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbReplicaDeleteLinkSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the server that the other replica is in.</p></summary>
        public virtual string PartnerServer { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Name of the resource group that the other replica is in. If unspecified, defaults to the first database's resource group.</p></summary>
        public virtual string PartnerResourceGroup { get; internal set; }
        /// <summary><p>Do not prompt for confirmation.</p></summary>
        public virtual string Yes { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db replica delete-link")
              .Add("--name {value}", Name)
              .Add("--partner-server {value}", PartnerServer)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--partner-resource-group {value}", PartnerResourceGroup)
              .Add("--yes {value}", Yes)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbReplicaListLinksSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbReplicaListLinksSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db replica list-links")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbReplicaSetPrimarySettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbReplicaSetPrimarySettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the database to fail over.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of the resource group containing the secondary replica that will become the new primary.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the server containing the secondary replica that will become the new primary.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>If specified, the failover operation will allow data loss.</p></summary>
        public virtual string AllowDataLoss { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db replica set-primary")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--allow-data-loss {value}", AllowDataLoss)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbTdeListActivitySettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbTdeListActivitySettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Database { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db tde list-activity")
              .Add("--database {value}", Database)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbTdeSetSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbTdeSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Database { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Status of the transparent data encryption.</p></summary>
        public virtual SqlDbAuditPolicyUpdateState Status { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db tde set")
              .Add("--database {value}", Database)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--status {value}", Status)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbTdeShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbTdeShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Database { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db tde show")
              .Add("--database {value}", Database)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbThreatPolicyShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbThreatPolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db threat-policy show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlDbThreatPolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlDbThreatPolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Database.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Whether the alert is sent to the account administrators.</p></summary>
        public virtual SqlDbAuditPolicyUpdateState EmailAccountAdmins { get; internal set; }
        /// <summary><p>List of email addresses that alerts are sent to.</p></summary>
        public virtual string EmailAddresses { get; internal set; }
        /// <summary><p>List of disabled alerts.</p></summary>
        public virtual string DisabledAlerts { get; internal set; }
        /// <summary><p>The number of days to retain threat detection logs.</p></summary>
        public virtual string RetentionDays { get; internal set; }
        /// <summary><p>Threat detection policy state.</p></summary>
        public virtual SqlDbThreatPolicyUpdateState State { get; internal set; }
        /// <summary><p>Name of the storage account.</p></summary>
        public virtual string StorageAccount { get; internal set; }
        /// <summary><p>The storage account endpoint.</p></summary>
        public virtual string StorageEndpoint { get; internal set; }
        /// <summary><p>Access key for the storage account.</p></summary>
        public virtual string StorageKey { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql db threat-policy update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--email-account-admins {value}", EmailAccountAdmins)
              .Add("--email-addresses {value}", EmailAddresses)
              .Add("--disabled-alerts {value}", DisabledAlerts)
              .Add("--retention-days {value}", RetentionDays)
              .Add("--state {value}", State)
              .Add("--storage-account {value}", StorageAccount)
              .Add("--storage-endpoint {value}", StorageEndpoint)
              .Add("--storage-key {value}", StorageKey)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolOpCancelSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolOpCancelSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Elastic Pool.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>The unique name of the operation to cancel.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool op cancel")
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlElasticPoolOpListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlElasticPoolOpListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of the Azure SQL Elastic Pool.</p></summary>
        public virtual string ElasticPool { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql elastic-pool op list")
              .Add("--elastic-pool {value}", ElasticPool)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerAdAdminCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerAdAdminCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Display name of the Azure AD administrator user or group.</p></summary>
        public virtual string DisplayName { get; internal set; }
        /// <summary><p>The unique ID of the Azure AD administrator.</p></summary>
        public virtual string ObjectId { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the SQL Server.</p></summary>
        public virtual string ServerName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server ad-admin create")
              .Add("--display-name {value}", DisplayName)
              .Add("--object-id {value}", ObjectId)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server-name {value}", ServerName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerAdAdminDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerAdAdminDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the SQL Server.</p></summary>
        public virtual string ServerName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server ad-admin delete")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server-name {value}", ServerName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerAdAdminListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerAdAdminListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the SQL Server.</p></summary>
        public virtual string ServerName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server ad-admin list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server-name {value}", ServerName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerAdAdminUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerAdAdminUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the SQL Server.</p></summary>
        public virtual string ServerName { get; internal set; }
        /// <summary><p>Display name of the Azure AD administrator user or group.</p></summary>
        public virtual string DisplayName { get; internal set; }
        /// <summary><p>The unique ID of the Azure AD administrator.</p></summary>
        public virtual string ObjectId { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server ad-admin update")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server-name {value}", ServerName)
              .Add("--display-name {value}", DisplayName)
              .Add("--object-id {value}", ObjectId)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerConnPolicyShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerConnPolicyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server conn-policy show")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerConnPolicyUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerConnPolicyUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The server connection type.</p></summary>
        public virtual SqlServerConnPolicyUpdateConnectionType ConnectionType { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server conn-policy update")
              .Add("--connection-type {value}", ConnectionType)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerDnsAliasCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerDnsAliasCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server DNS alias.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server dns-alias create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerDnsAliasDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerDnsAliasDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server DNS alias.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server dns-alias delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerDnsAliasListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerDnsAliasListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server dns-alias list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerDnsAliasSetSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerDnsAliasSetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p></p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>The name of the server to which alias is currently pointing.</p></summary>
        public virtual string OriginalServer { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p></p></summary>
        public virtual string OriginalResourceGroup { get; internal set; }
        /// <summary><p></p></summary>
        public virtual string OriginalSubscriptionId { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server dns-alias set")
              .Add("--name {value}", Name)
              .Add("--original-server {value}", OriginalServer)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--original-resource-group {value}", OriginalResourceGroup)
              .Add("--original-subscription-id {value}", OriginalSubscriptionId)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerDnsAliasShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerDnsAliasShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the server DNS alias.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server dns-alias show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerFirewallRuleCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerFirewallRuleCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The end IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        public virtual string EndIpAddress { get; internal set; }
        /// <summary><p>The name of the firewall rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        public virtual string StartIpAddress { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server firewall-rule create")
              .Add("--end-ip-address {value}", EndIpAddress)
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--start-ip-address {value}", StartIpAddress)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerFirewallRuleDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerFirewallRuleDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the firewall rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server firewall-rule delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerFirewallRuleListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerFirewallRuleListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server firewall-rule list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerFirewallRuleShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerFirewallRuleShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the firewall rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server firewall-rule show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerFirewallRuleUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerFirewallRuleUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the firewall rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The end IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        public virtual string EndIpAddress { get; internal set; }
        /// <summary><p>The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        public virtual string StartIpAddress { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server firewall-rule update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--end-ip-address {value}", EndIpAddress)
              .Add("--start-ip-address {value}", StartIpAddress)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerKeyCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerKeyCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        public virtual string Kid { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server key create")
              .Add("--kid {value}", Kid)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerKeyDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerKeyDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        public virtual string Kid { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server key delete")
              .Add("--kid {value}", Kid)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerKeyListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerKeyListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server key list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerKeyShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerKeyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        public virtual string Kid { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server key show")
              .Add("--kid {value}", Kid)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerTdeKeySetSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerTdeKeySetSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>The type of the server key.</p></summary>
        public virtual SqlServerTdeKeySetServerKeyType ServerKeyType { get; internal set; }
        /// <summary><p>The Azure Key Vault key identifier of the server key to be made encryption protector.An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        public virtual string Kid { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server tde-key set")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--server-key-type {value}", ServerKeyType)
              .Add("--kid {value}", Kid)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerTdeKeyShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerTdeKeyShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>Name of the Azure SQL server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server tde-key show")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerVnetRuleCreateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerVnetRuleCreateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the virtual network rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Name or ID of the subnet that allows access to an Azure Sql Server. If subnet name is provided, --vnet-name must be provided.</p></summary>
        public virtual string Subnet { get; internal set; }
        /// <summary><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        public virtual bool? IgnoreMissingEndpoint { get; internal set; }
        /// <summary><p>The virtual network name.</p></summary>
        public virtual string VnetName { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server vnet-rule create")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--subnet {value}", Subnet)
              .Add("--ignore-missing-endpoint", IgnoreMissingEndpoint)
              .Add("--vnet-name {value}", VnetName)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerVnetRuleDeleteSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerVnetRuleDeleteSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the virtual network rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server vnet-rule delete")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerVnetRuleListSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerVnetRuleListSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server vnet-rule list")
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerVnetRuleShowSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerVnetRuleShowSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the virtual network rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server vnet-rule show")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlServerVnetRuleUpdateSettings
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class AzureSqlServerVnetRuleUpdateSettings : ToolSettings
    {
        /// <summary><p>Path to the AzureSql executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? AzureSqlTasks.AzureSqlPath;
        /// <summary><p>The name of the virtual network rule.</p></summary>
        public virtual string Name { get; internal set; }
        /// <summary><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        public virtual string ResourceGroup { get; internal set; }
        /// <summary><p>The name of the server.</p></summary>
        public virtual string Server { get; internal set; }
        /// <summary><p>Name or ID of the subnet that allows access to an Azure Sql Server. If subnet name is provided, --vnet-name must be provided.</p></summary>
        public virtual string Subnet { get; internal set; }
        /// <summary><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        public virtual bool? IgnoreMissingEndpoint { get; internal set; }
        /// <summary><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        public virtual string Add { get; internal set; }
        /// <summary><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        public virtual string Remove { get; internal set; }
        /// <summary><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        public virtual string Set { get; internal set; }
        /// <summary><p>Increase logging verbosity to show all debug logs.</p></summary>
        public virtual string Debug { get; internal set; }
        /// <summary><p>Show this help message and exit.</p></summary>
        public virtual string Help { get; internal set; }
        /// <summary><p>Output format.</p></summary>
        public virtual Output Output { get; internal set; }
        /// <summary><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        public virtual string Query { get; internal set; }
        /// <summary><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        public virtual string Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("sql server vnet-rule update")
              .Add("--name {value}", Name)
              .Add("--resource-group {value}", ResourceGroup)
              .Add("--server {value}", Server)
              .Add("--subnet {value}", Subnet)
              .Add("--ignore-missing-endpoint", IgnoreMissingEndpoint)
              .Add("--add {value}", Add)
              .Add("--remove {value}", Remove)
              .Add("--set {value}", Set)
              .Add("--debug {value}", Debug)
              .Add("--help {value}", Help)
              .Add("--output {value}", Output)
              .Add("--query {value}", Query)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region AzureSqlListUsagesSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlListUsagesSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureSqlListUsagesSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings SetLocation(this AzureSqlListUsagesSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlListUsagesSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings ResetLocation(this AzureSqlListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlListUsagesSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings SetDebug(this AzureSqlListUsagesSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlListUsagesSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings ResetDebug(this AzureSqlListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlListUsagesSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings SetHelp(this AzureSqlListUsagesSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlListUsagesSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings ResetHelp(this AzureSqlListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlListUsagesSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings SetOutput(this AzureSqlListUsagesSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlListUsagesSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings ResetOutput(this AzureSqlListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlListUsagesSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings SetQuery(this AzureSqlListUsagesSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlListUsagesSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings ResetQuery(this AzureSqlListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlListUsagesSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings SetVerbose(this AzureSqlListUsagesSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlListUsagesSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlListUsagesSettings ResetVerbose(this AzureSqlListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlShowUsageSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlShowUsageSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetLocation(this AzureSqlShowUsageSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetLocation(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Usage
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Usage"/>.</em></p><p>Name of usage metric to return.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetUsage(this AzureSqlShowUsageSettings toolSettings, string usage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Usage = usage;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Usage"/>.</em></p><p>Name of usage metric to return.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetUsage(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Usage = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetDebug(this AzureSqlShowUsageSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetDebug(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetHelp(this AzureSqlShowUsageSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetHelp(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetOutput(this AzureSqlShowUsageSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetOutput(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetQuery(this AzureSqlShowUsageSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetQuery(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlShowUsageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings SetVerbose(this AzureSqlShowUsageSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlShowUsageSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlShowUsageSettings ResetVerbose(this AzureSqlShowUsageSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbCopySettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbCopySettingsExtensions
    {
        #region DestName
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.DestName"/>.</em></p><p>Name of the database that will be created as the copy destination.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetDestName(this AzureSqlDbCopySettings toolSettings, string destName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestName = destName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.DestName"/>.</em></p><p>Name of the database that will be created as the copy destination.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetDestName(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetName(this AzureSqlDbCopySettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetName(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetResourceGroup(this AzureSqlDbCopySettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetResourceGroup(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetServer(this AzureSqlDbCopySettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetServer(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region DestResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.DestResourceGroup"/>.</em></p><p>Name of the resouce group to create the copy in. If unspecified, defaults to the origin resource group.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetDestResourceGroup(this AzureSqlDbCopySettings toolSettings, string destResourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestResourceGroup = destResourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.DestResourceGroup"/>.</em></p><p>Name of the resouce group to create the copy in. If unspecified, defaults to the origin resource group.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetDestResourceGroup(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region DestServer
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.DestServer"/>.</em></p><p>Name of the server to create the copy in. If unspecified, defaults to the origin server.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetDestServer(this AzureSqlDbCopySettings toolSettings, string destServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestServer = destServer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.DestServer"/>.</em></p><p>Name of the server to create the copy in. If unspecified, defaults to the origin server.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetDestServer(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestServer = null;
            return toolSettings;
        }
        #endregion
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.ElasticPool"/>.</em></p><p>Name of the elastic pool to create the new database in.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetElasticPool(this AzureSqlDbCopySettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.ElasticPool"/>.</em></p><p>Name of the elastic pool to create the new database in.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetElasticPool(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetNoWait(this AzureSqlDbCopySettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetNoWait(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.ServiceObjective"/>.</em></p><p>Name of the service objective for the new database.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetServiceObjective(this AzureSqlDbCopySettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.ServiceObjective"/>.</em></p><p>Name of the service objective for the new database.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetServiceObjective(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetTags(this AzureSqlDbCopySettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetTags(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetDebug(this AzureSqlDbCopySettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetDebug(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetHelp(this AzureSqlDbCopySettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetHelp(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetOutput(this AzureSqlDbCopySettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetOutput(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetQuery(this AzureSqlDbCopySettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetQuery(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbCopySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings SetVerbose(this AzureSqlDbCopySettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCopySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCopySettings ResetVerbose(this AzureSqlDbCopySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetName(this AzureSqlDbCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetName(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetResourceGroup(this AzureSqlDbCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetResourceGroup(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetServer(this AzureSqlDbCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetServer(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Collation
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Collation"/>.</em></p><p>The collation of the database. If createMode is not Default, this value is ignored.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetCollation(this AzureSqlDbCreateSettings toolSettings, string collation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Collation = collation;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Collation"/>.</em></p><p>The collation of the database. If createMode is not Default, this value is ignored.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetCollation(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Collation = null;
            return toolSettings;
        }
        #endregion
        #region Edition
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Edition"/>.</em></p><p>The edition of the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetEdition(this AzureSqlDbCreateSettings toolSettings, string edition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = edition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Edition"/>.</em></p><p>The edition of the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetEdition(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = null;
            return toolSettings;
        }
        #endregion
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.ElasticPool"/>.</em></p><p>The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetElasticPool(this AzureSqlDbCreateSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.ElasticPool"/>.</em></p><p>The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetElasticPool(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region MaxSize
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.MaxSize"/>.</em></p><p>The max storage size of the database. Only the following sizes are supported (in addition to limitations being placed on each edition): 100MB, 500MB, 1GB, 5GB, 10GB, 20GB, 30GB, 150GB, 200GB, 500GB. If no unit is specified, defaults to bytes (B).</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetMaxSize(this AzureSqlDbCreateSettings toolSettings, string maxSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = maxSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.MaxSize"/>.</em></p><p>The max storage size of the database. Only the following sizes are supported (in addition to limitations being placed on each edition): 100MB, 500MB, 1GB, 5GB, 10GB, 20GB, 30GB, 150GB, 200GB, 500GB. If no unit is specified, defaults to bytes (B).</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetMaxSize(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetNoWait(this AzureSqlDbCreateSettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetNoWait(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region SampleName
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.SampleName"/>.</em></p><p>Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetSampleName(this AzureSqlDbCreateSettings toolSettings, string sampleName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SampleName = sampleName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.SampleName"/>.</em></p><p>Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetSampleName(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SampleName = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.ServiceObjective"/>.</em></p><p>The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: "Capabilities_ListByLocation." or use the Azure CLI command `az sql db list-editions --location &amp;lt;location&amp;gt; --query [].supportedServiceLevelObjectives[].name`.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetServiceObjective(this AzureSqlDbCreateSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.ServiceObjective"/>.</em></p><p>The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: "Capabilities_ListByLocation." or use the Azure CLI command `az sql db list-editions --location &amp;lt;location&amp;gt; --query [].supportedServiceLevelObjectives[].name`.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetServiceObjective(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetTags(this AzureSqlDbCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetTags(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region ZoneRedundant
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetZoneRedundant(this AzureSqlDbCreateSettings toolSettings, bool? zoneRedundant)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = zoneRedundant;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetZoneRedundant(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureSqlDbCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings EnableZoneRedundant(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureSqlDbCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings DisableZoneRedundant(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureSqlDbCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ToggleZoneRedundant(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = !toolSettings.ZoneRedundant;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetDebug(this AzureSqlDbCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetDebug(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetHelp(this AzureSqlDbCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetHelp(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetOutput(this AzureSqlDbCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetOutput(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetQuery(this AzureSqlDbCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetQuery(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings SetVerbose(this AzureSqlDbCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbCreateSettings ResetVerbose(this AzureSqlDbCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetName(this AzureSqlDbDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetName(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetResourceGroup(this AzureSqlDbDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetResourceGroup(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetServer(this AzureSqlDbDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetServer(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetYes(this AzureSqlDbDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetYes(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetDebug(this AzureSqlDbDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetDebug(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetHelp(this AzureSqlDbDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetHelp(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetOutput(this AzureSqlDbDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetOutput(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetQuery(this AzureSqlDbDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetQuery(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings SetVerbose(this AzureSqlDbDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbDeleteSettings ResetVerbose(this AzureSqlDbDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbExportSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbExportSettingsExtensions
    {
        #region AdminPassword
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.AdminPassword"/>.</em></p><p>The password of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetAdminPassword(this AzureSqlDbExportSettings toolSettings, string adminPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = adminPassword;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.AdminPassword"/>.</em></p><p>The password of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetAdminPassword(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = null;
            return toolSettings;
        }
        #endregion
        #region AdminUser
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.AdminUser"/>.</em></p><p>The name of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetAdminUser(this AzureSqlDbExportSettings toolSettings, string adminUser)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminUser = adminUser;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.AdminUser"/>.</em></p><p>The name of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetAdminUser(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminUser = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetName(this AzureSqlDbExportSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetName(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetResourceGroup(this AzureSqlDbExportSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetResourceGroup(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetServer(this AzureSqlDbExportSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetServer(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region StorageKey
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.StorageKey"/>.</em></p><p>The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?.".</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetStorageKey(this AzureSqlDbExportSettings toolSettings, string storageKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = storageKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.StorageKey"/>.</em></p><p>The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?.".</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetStorageKey(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = null;
            return toolSettings;
        }
        #endregion
        #region StorageKeyType
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.StorageKeyType"/>.</em></p><p>The type of the storage key to use.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetStorageKeyType(this AzureSqlDbExportSettings toolSettings, SqlDbStorageKeyType storageKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKeyType = storageKeyType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.StorageKeyType"/>.</em></p><p>The type of the storage key to use.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetStorageKeyType(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKeyType = null;
            return toolSettings;
        }
        #endregion
        #region StorageUri
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.StorageUri"/>.</em></p><p>The storage uri to use.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetStorageUri(this AzureSqlDbExportSettings toolSettings, string storageUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageUri = storageUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.StorageUri"/>.</em></p><p>The storage uri to use.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetStorageUri(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageUri = null;
            return toolSettings;
        }
        #endregion
        #region AuthType
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.AuthType"/>.</em></p><p>The authentication type.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetAuthType(this AzureSqlDbExportSettings toolSettings, SqlDbAuthType authType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthType = authType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.AuthType"/>.</em></p><p>The authentication type.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetAuthType(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthType = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetDebug(this AzureSqlDbExportSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetDebug(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetHelp(this AzureSqlDbExportSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetHelp(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetOutput(this AzureSqlDbExportSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetOutput(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetQuery(this AzureSqlDbExportSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetQuery(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbExportSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings SetVerbose(this AzureSqlDbExportSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbExportSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbExportSettings ResetVerbose(this AzureSqlDbExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbImportSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbImportSettingsExtensions
    {
        #region AdminPassword
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.AdminPassword"/>.</em></p><p>The password of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetAdminPassword(this AzureSqlDbImportSettings toolSettings, string adminPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = adminPassword;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.AdminPassword"/>.</em></p><p>The password of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetAdminPassword(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = null;
            return toolSettings;
        }
        #endregion
        #region AdminUser
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.AdminUser"/>.</em></p><p>The name of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetAdminUser(this AzureSqlDbImportSettings toolSettings, string adminUser)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminUser = adminUser;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.AdminUser"/>.</em></p><p>The name of the SQL administrator.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetAdminUser(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminUser = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetName(this AzureSqlDbImportSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetName(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetResourceGroup(this AzureSqlDbImportSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetResourceGroup(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetServer(this AzureSqlDbImportSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetServer(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region StorageKey
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.StorageKey"/>.</em></p><p>The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?.".</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetStorageKey(this AzureSqlDbImportSettings toolSettings, string storageKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = storageKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.StorageKey"/>.</em></p><p>The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a "?.".</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetStorageKey(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = null;
            return toolSettings;
        }
        #endregion
        #region StorageKeyType
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.StorageKeyType"/>.</em></p><p>The type of the storage key to use.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetStorageKeyType(this AzureSqlDbImportSettings toolSettings, SqlDbStorageKeyType storageKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKeyType = storageKeyType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.StorageKeyType"/>.</em></p><p>The type of the storage key to use.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetStorageKeyType(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKeyType = null;
            return toolSettings;
        }
        #endregion
        #region StorageUri
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.StorageUri"/>.</em></p><p>The storage uri to use.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetStorageUri(this AzureSqlDbImportSettings toolSettings, string storageUri)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageUri = storageUri;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.StorageUri"/>.</em></p><p>The storage uri to use.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetStorageUri(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageUri = null;
            return toolSettings;
        }
        #endregion
        #region AuthType
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.AuthType"/>.</em></p><p>The authentication type.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetAuthType(this AzureSqlDbImportSettings toolSettings, SqlDbAuthType authType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthType = authType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.AuthType"/>.</em></p><p>The authentication type.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetAuthType(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthType = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetDebug(this AzureSqlDbImportSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetDebug(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetHelp(this AzureSqlDbImportSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetHelp(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetOutput(this AzureSqlDbImportSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetOutput(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetQuery(this AzureSqlDbImportSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetQuery(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbImportSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings SetVerbose(this AzureSqlDbImportSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbImportSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbImportSettings ResetVerbose(this AzureSqlDbImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetResourceGroup(this AzureSqlDbListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetResourceGroup(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetServer(this AzureSqlDbListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetServer(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.ElasticPool"/>.</em></p><p>If specified, lists only the databases in this elastic pool.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetElasticPool(this AzureSqlDbListSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.ElasticPool"/>.</em></p><p>If specified, lists only the databases in this elastic pool.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetElasticPool(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetDebug(this AzureSqlDbListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetDebug(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetHelp(this AzureSqlDbListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetHelp(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetOutput(this AzureSqlDbListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetOutput(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetQuery(this AzureSqlDbListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetQuery(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings SetVerbose(this AzureSqlDbListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListSettings ResetVerbose(this AzureSqlDbListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbListDeletedSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbListDeletedSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetResourceGroup(this AzureSqlDbListDeletedSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetResourceGroup(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetServer(this AzureSqlDbListDeletedSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetServer(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetDebug(this AzureSqlDbListDeletedSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetDebug(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetHelp(this AzureSqlDbListDeletedSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetHelp(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetOutput(this AzureSqlDbListDeletedSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetOutput(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetQuery(this AzureSqlDbListDeletedSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetQuery(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbListDeletedSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings SetVerbose(this AzureSqlDbListDeletedSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListDeletedSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListDeletedSettings ResetVerbose(this AzureSqlDbListDeletedSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbListEditionsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbListEditionsSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetLocation(this AzureSqlDbListEditionsSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetLocation(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region ShowDetails
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.ShowDetails"/>.</em></p><p>List of additional details to include in output.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetShowDetails(this AzureSqlDbListEditionsSettings toolSettings, SqlDbListEditionsShowDetails showDetails)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowDetails = showDetails;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.ShowDetails"/>.</em></p><p>List of additional details to include in output.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetShowDetails(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowDetails = null;
            return toolSettings;
        }
        #endregion
        #region Edition
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Edition"/>.</em></p><p>Edition to search for. If unspecified, all editions are shown.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetEdition(this AzureSqlDbListEditionsSettings toolSettings, string edition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = edition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Edition"/>.</em></p><p>Edition to search for. If unspecified, all editions are shown.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetEdition(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.ServiceObjective"/>.</em></p><p>Service objective to search for. If unspecified, all editions are shown.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetServiceObjective(this AzureSqlDbListEditionsSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.ServiceObjective"/>.</em></p><p>Service objective to search for. If unspecified, all editions are shown.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetServiceObjective(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetDebug(this AzureSqlDbListEditionsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetDebug(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetHelp(this AzureSqlDbListEditionsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetHelp(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetOutput(this AzureSqlDbListEditionsSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetOutput(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetQuery(this AzureSqlDbListEditionsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetQuery(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbListEditionsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings SetVerbose(this AzureSqlDbListEditionsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListEditionsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListEditionsSettings ResetVerbose(this AzureSqlDbListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbListUsagesSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbListUsagesSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetName(this AzureSqlDbListUsagesSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetName(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetResourceGroup(this AzureSqlDbListUsagesSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetResourceGroup(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetServer(this AzureSqlDbListUsagesSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetServer(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetDebug(this AzureSqlDbListUsagesSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetDebug(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetHelp(this AzureSqlDbListUsagesSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetHelp(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetOutput(this AzureSqlDbListUsagesSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetOutput(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetQuery(this AzureSqlDbListUsagesSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetQuery(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbListUsagesSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings SetVerbose(this AzureSqlDbListUsagesSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbListUsagesSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbListUsagesSettings ResetVerbose(this AzureSqlDbListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbRenameSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbRenameSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetName(this AzureSqlDbRenameSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetName(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region NewName
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.NewName"/>.</em></p><p>The new name that the database will be renamed to.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetNewName(this AzureSqlDbRenameSettings toolSettings, string newName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NewName = newName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.NewName"/>.</em></p><p>The new name that the database will be renamed to.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetNewName(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NewName = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetResourceGroup(this AzureSqlDbRenameSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetResourceGroup(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetServer(this AzureSqlDbRenameSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetServer(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetDebug(this AzureSqlDbRenameSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetDebug(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetHelp(this AzureSqlDbRenameSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetHelp(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetOutput(this AzureSqlDbRenameSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetOutput(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetQuery(this AzureSqlDbRenameSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetQuery(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbRenameSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings SetVerbose(this AzureSqlDbRenameSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRenameSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRenameSettings ResetVerbose(this AzureSqlDbRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbRestoreSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbRestoreSettingsExtensions
    {
        #region DestName
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.DestName"/>.</em></p><p>Name of the database that will be created as the restore destination.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetDestName(this AzureSqlDbRestoreSettings toolSettings, string destName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestName = destName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.DestName"/>.</em></p><p>Name of the database that will be created as the restore destination.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetDestName(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DestName = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetName(this AzureSqlDbRestoreSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetName(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetResourceGroup(this AzureSqlDbRestoreSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetResourceGroup(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetServer(this AzureSqlDbRestoreSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetServer(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Edition
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Edition"/>.</em></p><p>The edition for the new database.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetEdition(this AzureSqlDbRestoreSettings toolSettings, string edition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = edition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Edition"/>.</em></p><p>The edition for the new database.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetEdition(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = null;
            return toolSettings;
        }
        #endregion
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.ElasticPool"/>.</em></p><p>Name of the elastic pool to create the new database in.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetElasticPool(this AzureSqlDbRestoreSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.ElasticPool"/>.</em></p><p>Name of the elastic pool to create the new database in.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetElasticPool(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetNoWait(this AzureSqlDbRestoreSettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetNoWait(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.ServiceObjective"/>.</em></p><p>Name of service objective for the new database.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetServiceObjective(this AzureSqlDbRestoreSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.ServiceObjective"/>.</em></p><p>Name of service objective for the new database.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetServiceObjective(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetTags(this AzureSqlDbRestoreSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetTags(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region DeletedTime
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.DeletedTime"/>.</em></p><p>If specified, restore from a deleted database instead of from an existing database. Must match the deleted time of a deleted database in the same server. Either --time or --deleted-time (or both) must be specified.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetDeletedTime(this AzureSqlDbRestoreSettings toolSettings, string deletedTime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeletedTime = deletedTime;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.DeletedTime"/>.</em></p><p>If specified, restore from a deleted database instead of from an existing database. Must match the deleted time of a deleted database in the same server. Either --time or --deleted-time (or both) must be specified.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetDeletedTime(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeletedTime = null;
            return toolSettings;
        }
        #endregion
        #region Time
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Time"/>.</em></p><p>The point in time of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value. Either --time or --deleted-time (or both) must be specified.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetTime(this AzureSqlDbRestoreSettings toolSettings, string time)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = time;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Time"/>.</em></p><p>The point in time of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value. Either --time or --deleted-time (or both) must be specified.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetTime(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetDebug(this AzureSqlDbRestoreSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetDebug(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetHelp(this AzureSqlDbRestoreSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetHelp(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetOutput(this AzureSqlDbRestoreSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetOutput(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetQuery(this AzureSqlDbRestoreSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetQuery(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbRestoreSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings SetVerbose(this AzureSqlDbRestoreSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbRestoreSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbRestoreSettings ResetVerbose(this AzureSqlDbRestoreSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetName(this AzureSqlDbShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetName(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetResourceGroup(this AzureSqlDbShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetResourceGroup(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetServer(this AzureSqlDbShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetServer(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetDebug(this AzureSqlDbShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetDebug(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetHelp(this AzureSqlDbShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetHelp(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetOutput(this AzureSqlDbShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetOutput(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetQuery(this AzureSqlDbShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetQuery(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings SetVerbose(this AzureSqlDbShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowSettings ResetVerbose(this AzureSqlDbShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbShowConnectionStringSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbShowConnectionStringSettingsExtensions
    {
        #region Client
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Client"/>.</em></p><p>Type of client connection provider.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetClient(this AzureSqlDbShowConnectionStringSettings toolSettings, SqlDbShowConnectionStringClient client)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Client = client;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Client"/>.</em></p><p>Type of client connection provider.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetClient(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Client = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetName(this AzureSqlDbShowConnectionStringSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetName(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetServer(this AzureSqlDbShowConnectionStringSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetServer(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region AuthType
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.AuthType"/>.</em></p><p>Type of authentication.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetAuthType(this AzureSqlDbShowConnectionStringSettings toolSettings, SqlDbShowConnectionStringAuthType authType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthType = authType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.AuthType"/>.</em></p><p>Type of authentication.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetAuthType(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuthType = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetDebug(this AzureSqlDbShowConnectionStringSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetDebug(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetHelp(this AzureSqlDbShowConnectionStringSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetHelp(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetOutput(this AzureSqlDbShowConnectionStringSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetOutput(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetQuery(this AzureSqlDbShowConnectionStringSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetQuery(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbShowConnectionStringSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings SetVerbose(this AzureSqlDbShowConnectionStringSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbShowConnectionStringSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbShowConnectionStringSettings ResetVerbose(this AzureSqlDbShowConnectionStringSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetName(this AzureSqlDbUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetName(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetResourceGroup(this AzureSqlDbUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetResourceGroup(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetServer(this AzureSqlDbUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetServer(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.ElasticPool"/>.</em></p><p>The name of the elastic pool to move the database into.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetElasticPool(this AzureSqlDbUpdateSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.ElasticPool"/>.</em></p><p>The name of the elastic pool to move the database into.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetElasticPool(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region MaxSize
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.MaxSize"/>.</em></p><p>The new maximum size of the database expressed in bytes.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetMaxSize(this AzureSqlDbUpdateSettings toolSettings, string maxSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = maxSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.MaxSize"/>.</em></p><p>The new maximum size of the database expressed in bytes.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetMaxSize(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetNoWait(this AzureSqlDbUpdateSettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetNoWait(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.ServiceObjective"/>.</em></p><p>The name of the new service objective. If this is a standalone db service objective and the db is currently in an elastic pool, then the db is removed from the pool.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetServiceObjective(this AzureSqlDbUpdateSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.ServiceObjective"/>.</em></p><p>The name of the new service objective. If this is a standalone db service objective and the db is currently in an elastic pool, then the db is removed from the pool.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetServiceObjective(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region ZoneRedundant
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetZoneRedundant(this AzureSqlDbUpdateSettings toolSettings, bool? zoneRedundant)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = zoneRedundant;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetZoneRedundant(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureSqlDbUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings EnableZoneRedundant(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureSqlDbUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings DisableZoneRedundant(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureSqlDbUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the database.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ToggleZoneRedundant(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = !toolSettings.ZoneRedundant;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetAdd(this AzureSqlDbUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetAdd(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetRemove(this AzureSqlDbUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetRemove(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetSet(this AzureSqlDbUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetSet(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetDebug(this AzureSqlDbUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetDebug(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetHelp(this AzureSqlDbUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetHelp(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetOutput(this AzureSqlDbUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetOutput(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetQuery(this AzureSqlDbUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetQuery(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings SetVerbose(this AzureSqlDbUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbUpdateSettings ResetVerbose(this AzureSqlDbUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetName(this AzureSqlDwCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetName(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetResourceGroup(this AzureSqlDwCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetResourceGroup(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetServer(this AzureSqlDwCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetServer(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Collation
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Collation"/>.</em></p><p>The collation of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetCollation(this AzureSqlDwCreateSettings toolSettings, string collation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Collation = collation;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Collation"/>.</em></p><p>The collation of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetCollation(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Collation = null;
            return toolSettings;
        }
        #endregion
        #region MaxSize
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.MaxSize"/>.</em></p><p>The max storage size of the data warehouse. If no unit is specified, defaultsto bytes (B).</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetMaxSize(this AzureSqlDwCreateSettings toolSettings, string maxSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = maxSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.MaxSize"/>.</em></p><p>The max storage size of the data warehouse. If no unit is specified, defaultsto bytes (B).</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetMaxSize(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetNoWait(this AzureSqlDwCreateSettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetNoWait(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.ServiceObjective"/>.</em></p><p>The service objective of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetServiceObjective(this AzureSqlDwCreateSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.ServiceObjective"/>.</em></p><p>The service objective of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetServiceObjective(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetTags(this AzureSqlDwCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetTags(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetDebug(this AzureSqlDwCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetDebug(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetHelp(this AzureSqlDwCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetHelp(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetOutput(this AzureSqlDwCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetOutput(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetQuery(this AzureSqlDwCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetQuery(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings SetVerbose(this AzureSqlDwCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwCreateSettings ResetVerbose(this AzureSqlDwCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetName(this AzureSqlDwDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetName(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetResourceGroup(this AzureSqlDwDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetResourceGroup(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetServer(this AzureSqlDwDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetServer(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetYes(this AzureSqlDwDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetYes(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetDebug(this AzureSqlDwDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetDebug(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetHelp(this AzureSqlDwDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetHelp(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetOutput(this AzureSqlDwDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetOutput(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetQuery(this AzureSqlDwDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetQuery(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings SetVerbose(this AzureSqlDwDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwDeleteSettings ResetVerbose(this AzureSqlDwDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetResourceGroup(this AzureSqlDwListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetResourceGroup(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetServer(this AzureSqlDwListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetServer(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetDebug(this AzureSqlDwListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetDebug(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetHelp(this AzureSqlDwListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetHelp(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetOutput(this AzureSqlDwListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetOutput(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetQuery(this AzureSqlDwListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetQuery(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings SetVerbose(this AzureSqlDwListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwListSettings ResetVerbose(this AzureSqlDwListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwPauseSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwPauseSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetName(this AzureSqlDwPauseSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetName(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetResourceGroup(this AzureSqlDwPauseSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetResourceGroup(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetServer(this AzureSqlDwPauseSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetServer(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetDebug(this AzureSqlDwPauseSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetDebug(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetHelp(this AzureSqlDwPauseSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetHelp(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetOutput(this AzureSqlDwPauseSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetOutput(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetQuery(this AzureSqlDwPauseSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetQuery(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwPauseSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings SetVerbose(this AzureSqlDwPauseSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwPauseSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwPauseSettings ResetVerbose(this AzureSqlDwPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwResumeSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwResumeSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetName(this AzureSqlDwResumeSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetName(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetResourceGroup(this AzureSqlDwResumeSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetResourceGroup(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetServer(this AzureSqlDwResumeSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetServer(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetDebug(this AzureSqlDwResumeSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetDebug(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetHelp(this AzureSqlDwResumeSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetHelp(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetOutput(this AzureSqlDwResumeSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetOutput(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetQuery(this AzureSqlDwResumeSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetQuery(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwResumeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings SetVerbose(this AzureSqlDwResumeSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwResumeSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwResumeSettings ResetVerbose(this AzureSqlDwResumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetName(this AzureSqlDwShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetName(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetResourceGroup(this AzureSqlDwShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetResourceGroup(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetServer(this AzureSqlDwShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetServer(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetDebug(this AzureSqlDwShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetDebug(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetHelp(this AzureSqlDwShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetHelp(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetOutput(this AzureSqlDwShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetOutput(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetQuery(this AzureSqlDwShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetQuery(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings SetVerbose(this AzureSqlDwShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwShowSettings ResetVerbose(this AzureSqlDwShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDwUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDwUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetName(this AzureSqlDwUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Name"/>.</em></p><p>Name of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetName(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetResourceGroup(this AzureSqlDwUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetResourceGroup(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetServer(this AzureSqlDwUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetServer(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region MaxSize
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.MaxSize"/>.</em></p><p>The max storage size of the data warehouse. If no unit is specified, defaultsto bytes (B).</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetMaxSize(this AzureSqlDwUpdateSettings toolSettings, string maxSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = maxSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.MaxSize"/>.</em></p><p>The max storage size of the data warehouse. If no unit is specified, defaultsto bytes (B).</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetMaxSize(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetNoWait(this AzureSqlDwUpdateSettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetNoWait(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.ServiceObjective"/>.</em></p><p>The service objective of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetServiceObjective(this AzureSqlDwUpdateSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.ServiceObjective"/>.</em></p><p>The service objective of the data warehouse.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetServiceObjective(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetAdd(this AzureSqlDwUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetAdd(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetRemove(this AzureSqlDwUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetRemove(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetSet(this AzureSqlDwUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetSet(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetDebug(this AzureSqlDwUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetDebug(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetHelp(this AzureSqlDwUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetHelp(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetOutput(this AzureSqlDwUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetOutput(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetQuery(this AzureSqlDwUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetQuery(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDwUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings SetVerbose(this AzureSqlDwUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDwUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDwUpdateSettings ResetVerbose(this AzureSqlDwUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetName(this AzureSqlElasticPoolCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetName(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetResourceGroup(this AzureSqlElasticPoolCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetResourceGroup(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetServer(this AzureSqlElasticPoolCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetServer(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region DbDtuMax
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.DbDtuMax"/>.</em></p><p>The maximum DTU any one database can consume.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetDbDtuMax(this AzureSqlElasticPoolCreateSettings toolSettings, string dbDtuMax)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMax = dbDtuMax;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.DbDtuMax"/>.</em></p><p>The maximum DTU any one database can consume.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetDbDtuMax(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMax = null;
            return toolSettings;
        }
        #endregion
        #region DbDtuMin
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.DbDtuMin"/>.</em></p><p>The minimum DTU all databases are guaranteed.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetDbDtuMin(this AzureSqlElasticPoolCreateSettings toolSettings, string dbDtuMin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMin = dbDtuMin;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.DbDtuMin"/>.</em></p><p>The minimum DTU all databases are guaranteed.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetDbDtuMin(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMin = null;
            return toolSettings;
        }
        #endregion
        #region Dtu
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Dtu"/>.</em></p><p>The total shared DTU for the database elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetDtu(this AzureSqlElasticPoolCreateSettings toolSettings, string dtu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dtu = dtu;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Dtu"/>.</em></p><p>The total shared DTU for the database elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetDtu(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dtu = null;
            return toolSettings;
        }
        #endregion
        #region Edition
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Edition"/>.</em></p><p>The edition of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetEdition(this AzureSqlElasticPoolCreateSettings toolSettings, string edition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = edition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Edition"/>.</em></p><p>The edition of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetEdition(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = null;
            return toolSettings;
        }
        #endregion
        #region MaxSize
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.MaxSize"/>.</em></p><p>The max storage size of the elastic pool. If no unit is specified, defaults to megabytes (MB).</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetMaxSize(this AzureSqlElasticPoolCreateSettings toolSettings, string maxSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = maxSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.MaxSize"/>.</em></p><p>The max storage size of the elastic pool. If no unit is specified, defaults to megabytes (MB).</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetMaxSize(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetTags(this AzureSqlElasticPoolCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetTags(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region ZoneRedundant
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetZoneRedundant(this AzureSqlElasticPoolCreateSettings toolSettings, bool? zoneRedundant)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = zoneRedundant;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetZoneRedundant(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureSqlElasticPoolCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings EnableZoneRedundant(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureSqlElasticPoolCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings DisableZoneRedundant(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureSqlElasticPoolCreateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ToggleZoneRedundant(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = !toolSettings.ZoneRedundant;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetDebug(this AzureSqlElasticPoolCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetDebug(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetHelp(this AzureSqlElasticPoolCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetHelp(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetOutput(this AzureSqlElasticPoolCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetOutput(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetQuery(this AzureSqlElasticPoolCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetQuery(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings SetVerbose(this AzureSqlElasticPoolCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolCreateSettings ResetVerbose(this AzureSqlElasticPoolCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetName(this AzureSqlElasticPoolDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetName(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetResourceGroup(this AzureSqlElasticPoolDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetResourceGroup(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetServer(this AzureSqlElasticPoolDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetServer(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetDebug(this AzureSqlElasticPoolDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetDebug(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetHelp(this AzureSqlElasticPoolDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetHelp(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetOutput(this AzureSqlElasticPoolDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetOutput(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetQuery(this AzureSqlElasticPoolDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetQuery(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings SetVerbose(this AzureSqlElasticPoolDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolDeleteSettings ResetVerbose(this AzureSqlElasticPoolDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetResourceGroup(this AzureSqlElasticPoolListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetResourceGroup(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetServer(this AzureSqlElasticPoolListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetServer(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetDebug(this AzureSqlElasticPoolListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetDebug(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetHelp(this AzureSqlElasticPoolListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetHelp(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetOutput(this AzureSqlElasticPoolListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetOutput(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetQuery(this AzureSqlElasticPoolListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetQuery(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings SetVerbose(this AzureSqlElasticPoolListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListSettings ResetVerbose(this AzureSqlElasticPoolListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolListDbsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolListDbsSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetName(this AzureSqlElasticPoolListDbsSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetName(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetResourceGroup(this AzureSqlElasticPoolListDbsSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetResourceGroup(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetServer(this AzureSqlElasticPoolListDbsSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetServer(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetDebug(this AzureSqlElasticPoolListDbsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetDebug(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetHelp(this AzureSqlElasticPoolListDbsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetHelp(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetOutput(this AzureSqlElasticPoolListDbsSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetOutput(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetQuery(this AzureSqlElasticPoolListDbsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetQuery(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListDbsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings SetVerbose(this AzureSqlElasticPoolListDbsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListDbsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListDbsSettings ResetVerbose(this AzureSqlElasticPoolListDbsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolListEditionsSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolListEditionsSettingsExtensions
    {
        #region Location
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetLocation(this AzureSqlElasticPoolListEditionsSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetLocation(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region ShowDetails
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.ShowDetails"/>.</em></p><p>List of additional details to include in output.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetShowDetails(this AzureSqlElasticPoolListEditionsSettings toolSettings, SqlElasticPoolListEditionsShowDetails showDetails)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowDetails = showDetails;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.ShowDetails"/>.</em></p><p>List of additional details to include in output.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetShowDetails(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowDetails = null;
            return toolSettings;
        }
        #endregion
        #region Dtu
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Dtu"/>.</em></p><p>Elastic pool DTU limit to search for. If unspecified, all DTU limits are shown.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetDtu(this AzureSqlElasticPoolListEditionsSettings toolSettings, string dtu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dtu = dtu;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Dtu"/>.</em></p><p>Elastic pool DTU limit to search for. If unspecified, all DTU limits are shown.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetDtu(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dtu = null;
            return toolSettings;
        }
        #endregion
        #region Edition
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Edition"/>.</em></p><p>Edition to search for. If unspecified, all editions are shown.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetEdition(this AzureSqlElasticPoolListEditionsSettings toolSettings, string edition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = edition;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Edition"/>.</em></p><p>Edition to search for. If unspecified, all editions are shown.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetEdition(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Edition = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetDebug(this AzureSqlElasticPoolListEditionsSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetDebug(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetHelp(this AzureSqlElasticPoolListEditionsSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetHelp(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetOutput(this AzureSqlElasticPoolListEditionsSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetOutput(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetQuery(this AzureSqlElasticPoolListEditionsSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetQuery(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolListEditionsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings SetVerbose(this AzureSqlElasticPoolListEditionsSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolListEditionsSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolListEditionsSettings ResetVerbose(this AzureSqlElasticPoolListEditionsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetName(this AzureSqlElasticPoolShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetName(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetResourceGroup(this AzureSqlElasticPoolShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetResourceGroup(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetServer(this AzureSqlElasticPoolShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetServer(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetDebug(this AzureSqlElasticPoolShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetDebug(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetHelp(this AzureSqlElasticPoolShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetHelp(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetOutput(this AzureSqlElasticPoolShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetOutput(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetQuery(this AzureSqlElasticPoolShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetQuery(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings SetVerbose(this AzureSqlElasticPoolShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolShowSettings ResetVerbose(this AzureSqlElasticPoolShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetName(this AzureSqlElasticPoolUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Name"/>.</em></p><p>The name of the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetName(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetResourceGroup(this AzureSqlElasticPoolUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetResourceGroup(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetServer(this AzureSqlElasticPoolUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetServer(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region DbDtuMax
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.DbDtuMax"/>.</em></p><p>The maximum DTU any one database can consume.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetDbDtuMax(this AzureSqlElasticPoolUpdateSettings toolSettings, string dbDtuMax)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMax = dbDtuMax;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.DbDtuMax"/>.</em></p><p>The maximum DTU any one database can consume.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetDbDtuMax(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMax = null;
            return toolSettings;
        }
        #endregion
        #region DbDtuMin
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.DbDtuMin"/>.</em></p><p>The minimum DTU all databases are guaranteed.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetDbDtuMin(this AzureSqlElasticPoolUpdateSettings toolSettings, string dbDtuMin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMin = dbDtuMin;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.DbDtuMin"/>.</em></p><p>The minimum DTU all databases are guaranteed.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetDbDtuMin(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DbDtuMin = null;
            return toolSettings;
        }
        #endregion
        #region Dtu
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Dtu"/>.</em></p><p>TThe total shared DTU for the elastic eool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetDtu(this AzureSqlElasticPoolUpdateSettings toolSettings, string dtu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dtu = dtu;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Dtu"/>.</em></p><p>TThe total shared DTU for the elastic eool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetDtu(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Dtu = null;
            return toolSettings;
        }
        #endregion
        #region MaxSize
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.MaxSize"/>.</em></p><p>Storage limit for the elastic pool in MB.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetMaxSize(this AzureSqlElasticPoolUpdateSettings toolSettings, string maxSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = maxSize;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.MaxSize"/>.</em></p><p>Storage limit for the elastic pool in MB.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetMaxSize(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSize = null;
            return toolSettings;
        }
        #endregion
        #region ZoneRedundant
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetZoneRedundant(this AzureSqlElasticPoolUpdateSettings toolSettings, bool? zoneRedundant)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = zoneRedundant;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetZoneRedundant(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureSqlElasticPoolUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings EnableZoneRedundant(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureSqlElasticPoolUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings DisableZoneRedundant(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureSqlElasticPoolUpdateSettings.ZoneRedundant"/>.</em></p><p>Specifies whether to enable zone redundancy for the elastic pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ToggleZoneRedundant(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ZoneRedundant = !toolSettings.ZoneRedundant;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetAdd(this AzureSqlElasticPoolUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetAdd(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetRemove(this AzureSqlElasticPoolUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetRemove(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetSet(this AzureSqlElasticPoolUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetSet(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetDebug(this AzureSqlElasticPoolUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetDebug(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetHelp(this AzureSqlElasticPoolUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetHelp(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetOutput(this AzureSqlElasticPoolUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetOutput(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetQuery(this AzureSqlElasticPoolUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetQuery(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings SetVerbose(this AzureSqlElasticPoolUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolUpdateSettings ResetVerbose(this AzureSqlElasticPoolUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerCreateSettingsExtensions
    {
        #region AdminPassword
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.AdminPassword"/>.</em></p><p>The administrator login password (required for server creation).</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetAdminPassword(this AzureSqlServerCreateSettings toolSettings, string adminPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = adminPassword;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.AdminPassword"/>.</em></p><p>The administrator login password (required for server creation).</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetAdminPassword(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = null;
            return toolSettings;
        }
        #endregion
        #region AdminUser
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.AdminUser"/>.</em></p><p>Administrator username for the server. Once created it cannot be changed.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetAdminUser(this AzureSqlServerCreateSettings toolSettings, string adminUser)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminUser = adminUser;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.AdminUser"/>.</em></p><p>Administrator username for the server. Once created it cannot be changed.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetAdminUser(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminUser = null;
            return toolSettings;
        }
        #endregion
        #region Location
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetLocation(this AzureSqlServerCreateSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Location"/>.</em></p><p>Location. You can configure the default location using `az configure --defaults location=&amp;lt;location&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetLocation(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Name"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetName(this AzureSqlServerCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Name"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetName(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetResourceGroup(this AzureSqlServerCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetResourceGroup(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AssignIdentity
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.AssignIdentity"/>.</em></p><p>Generate and assign an Azure Active Directory Identity for this serverfor use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetAssignIdentity(this AzureSqlServerCreateSettings toolSettings, string assignIdentity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = assignIdentity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.AssignIdentity"/>.</em></p><p>Generate and assign an Azure Active Directory Identity for this serverfor use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetAssignIdentity(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssignIdentity = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetTags(this AzureSqlServerCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetTags(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetDebug(this AzureSqlServerCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetDebug(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetHelp(this AzureSqlServerCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetHelp(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetOutput(this AzureSqlServerCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetOutput(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetQuery(this AzureSqlServerCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetQuery(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings SetVerbose(this AzureSqlServerCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerCreateSettings ResetVerbose(this AzureSqlServerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetName(this AzureSqlServerDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetName(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetResourceGroup(this AzureSqlServerDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetResourceGroup(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetYes(this AzureSqlServerDeleteSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetYes(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetDebug(this AzureSqlServerDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetDebug(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetHelp(this AzureSqlServerDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetHelp(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetOutput(this AzureSqlServerDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetOutput(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetQuery(this AzureSqlServerDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetQuery(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings SetVerbose(this AzureSqlServerDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDeleteSettings ResetVerbose(this AzureSqlServerDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings SetResourceGroup(this AzureSqlServerListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings ResetResourceGroup(this AzureSqlServerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings SetDebug(this AzureSqlServerListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings ResetDebug(this AzureSqlServerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings SetHelp(this AzureSqlServerListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings ResetHelp(this AzureSqlServerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings SetOutput(this AzureSqlServerListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings ResetOutput(this AzureSqlServerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings SetQuery(this AzureSqlServerListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings ResetQuery(this AzureSqlServerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings SetVerbose(this AzureSqlServerListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListSettings ResetVerbose(this AzureSqlServerListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerListUsagesSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerListUsagesSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetName(this AzureSqlServerListUsagesSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetName(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetResourceGroup(this AzureSqlServerListUsagesSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetResourceGroup(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetDebug(this AzureSqlServerListUsagesSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetDebug(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetHelp(this AzureSqlServerListUsagesSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetHelp(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetOutput(this AzureSqlServerListUsagesSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetOutput(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetQuery(this AzureSqlServerListUsagesSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetQuery(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerListUsagesSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings SetVerbose(this AzureSqlServerListUsagesSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerListUsagesSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerListUsagesSettings ResetVerbose(this AzureSqlServerListUsagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetName(this AzureSqlServerShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetName(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetResourceGroup(this AzureSqlServerShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetResourceGroup(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetDebug(this AzureSqlServerShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetDebug(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetHelp(this AzureSqlServerShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetHelp(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetOutput(this AzureSqlServerShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetOutput(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetQuery(this AzureSqlServerShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetQuery(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings SetVerbose(this AzureSqlServerShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerShowSettings ResetVerbose(this AzureSqlServerShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetName(this AzureSqlServerUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Name"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetName(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetResourceGroup(this AzureSqlServerUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetResourceGroup(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region AdminPassword
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.AdminPassword"/>.</em></p><p>The administrator login password.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetAdminPassword(this AzureSqlServerUpdateSettings toolSettings, string adminPassword)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = adminPassword;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.AdminPassword"/>.</em></p><p>The administrator login password.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetAdminPassword(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdminPassword = null;
            return toolSettings;
        }
        #endregion
        #region Assign_identity
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Assign_identity"/>.</em></p><p>Generate and assign an Azure Active Directory Identity for this serverfor use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetAssign_identity(this AzureSqlServerUpdateSettings toolSettings, string assign_identity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Assign_identity = assign_identity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Assign_identity"/>.</em></p><p>Generate and assign an Azure Active Directory Identity for this serverfor use with key management services like Azure KeyVault.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetAssign_identity(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Assign_identity = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetAdd(this AzureSqlServerUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetAdd(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetRemove(this AzureSqlServerUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetRemove(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetSet(this AzureSqlServerUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetSet(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetDebug(this AzureSqlServerUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetDebug(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetHelp(this AzureSqlServerUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetHelp(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetOutput(this AzureSqlServerUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetOutput(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetQuery(this AzureSqlServerUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetQuery(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings SetVerbose(this AzureSqlServerUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerUpdateSettings ResetVerbose(this AzureSqlServerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbAuditPolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbAuditPolicyShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetName(this AzureSqlDbAuditPolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetName(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetResourceGroup(this AzureSqlDbAuditPolicyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetResourceGroup(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetServer(this AzureSqlDbAuditPolicyShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetServer(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetDebug(this AzureSqlDbAuditPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetDebug(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetHelp(this AzureSqlDbAuditPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetHelp(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetOutput(this AzureSqlDbAuditPolicyShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetOutput(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetQuery(this AzureSqlDbAuditPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetQuery(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings SetVerbose(this AzureSqlDbAuditPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyShowSettings ResetVerbose(this AzureSqlDbAuditPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbAuditPolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbAuditPolicyUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetName(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetName(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetResourceGroup(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetResourceGroup(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetServer(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetServer(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Actions
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Actions"/>.</em></p><p>List of actions and action groups to audit.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetActions(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string actions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Actions = actions;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Actions"/>.</em></p><p>List of actions and action groups to audit.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetActions(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Actions = null;
            return toolSettings;
        }
        #endregion
        #region RetentionDays
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.RetentionDays"/>.</em></p><p>The number of days to retain audit logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetRetentionDays(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string retentionDays)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionDays = retentionDays;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.RetentionDays"/>.</em></p><p>The number of days to retain audit logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetRetentionDays(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionDays = null;
            return toolSettings;
        }
        #endregion
        #region State
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.State"/>.</em></p><p>Auditing policy state.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetState(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, SqlDbAuditPolicyUpdateState state)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.State = state;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.State"/>.</em></p><p>Auditing policy state.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetState(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.State = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.StorageAccount"/>.</em></p><p>Name of the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetStorageAccount(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.StorageAccount"/>.</em></p><p>Name of the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetStorageAccount(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region StorageEndpoint
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.StorageEndpoint"/>.</em></p><p>The storage account endpoint.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetStorageEndpoint(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string storageEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageEndpoint = storageEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.StorageEndpoint"/>.</em></p><p>The storage account endpoint.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetStorageEndpoint(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region StorageKey
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.StorageKey"/>.</em></p><p>Access key for the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetStorageKey(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string storageKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = storageKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.StorageKey"/>.</em></p><p>Access key for the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetStorageKey(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetAdd(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetAdd(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetRemove(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetRemove(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetSet(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetSet(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetDebug(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetDebug(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetHelp(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetHelp(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetOutput(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetOutput(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetQuery(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetQuery(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings SetVerbose(this AzureSqlDbAuditPolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbAuditPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbAuditPolicyUpdateSettings ResetVerbose(this AzureSqlDbAuditPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbOpCancelSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbOpCancelSettingsExtensions
    {
        #region Database
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetDatabase(this AzureSqlDbOpCancelSettings toolSettings, string database)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = database;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetDatabase(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Name"/>.</em></p><p>The unique name of the operation to cancel.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetName(this AzureSqlDbOpCancelSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Name"/>.</em></p><p>The unique name of the operation to cancel.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetName(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetResourceGroup(this AzureSqlDbOpCancelSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetResourceGroup(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetServer(this AzureSqlDbOpCancelSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetServer(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetDebug(this AzureSqlDbOpCancelSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetDebug(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetHelp(this AzureSqlDbOpCancelSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetHelp(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetOutput(this AzureSqlDbOpCancelSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetOutput(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetQuery(this AzureSqlDbOpCancelSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetQuery(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings SetVerbose(this AzureSqlDbOpCancelSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpCancelSettings ResetVerbose(this AzureSqlDbOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbOpListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbOpListSettingsExtensions
    {
        #region Database
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetDatabase(this AzureSqlDbOpListSettings toolSettings, string database)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = database;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetDatabase(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetResourceGroup(this AzureSqlDbOpListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetResourceGroup(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetServer(this AzureSqlDbOpListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetServer(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetDebug(this AzureSqlDbOpListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetDebug(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetHelp(this AzureSqlDbOpListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetHelp(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetOutput(this AzureSqlDbOpListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetOutput(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetQuery(this AzureSqlDbOpListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetQuery(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbOpListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings SetVerbose(this AzureSqlDbOpListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbOpListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbOpListSettings ResetVerbose(this AzureSqlDbOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbReplicaCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbReplicaCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetName(this AzureSqlDbReplicaCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetName(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region PartnerServer
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.PartnerServer"/>.</em></p><p>Name of the server to create the new replica in.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetPartnerServer(this AzureSqlDbReplicaCreateSettings toolSettings, string partnerServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerServer = partnerServer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.PartnerServer"/>.</em></p><p>Name of the server to create the new replica in.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetPartnerServer(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerServer = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetResourceGroup(this AzureSqlDbReplicaCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetResourceGroup(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetServer(this AzureSqlDbReplicaCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetServer(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.ElasticPool"/>.</em></p><p>Name of elastic pool to create the new replica in.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetElasticPool(this AzureSqlDbReplicaCreateSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.ElasticPool"/>.</em></p><p>Name of elastic pool to create the new replica in.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetElasticPool(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region NoWait
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetNoWait(this AzureSqlDbReplicaCreateSettings toolSettings, string noWait)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = noWait;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.NoWait"/>.</em></p><p>Do not wait for the long-running operation to finish.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetNoWait(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoWait = null;
            return toolSettings;
        }
        #endregion
        #region PartnerResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.PartnerResourceGroup"/>.</em></p><p>Name of the resource group to create the new replica in. If unspecified, defaults to the origin resource group.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetPartnerResourceGroup(this AzureSqlDbReplicaCreateSettings toolSettings, string partnerResourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerResourceGroup = partnerResourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.PartnerResourceGroup"/>.</em></p><p>Name of the resource group to create the new replica in. If unspecified, defaults to the origin resource group.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetPartnerResourceGroup(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region ServiceObjective
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.ServiceObjective"/>.</em></p><p>Name of service objective for the new replica.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetServiceObjective(this AzureSqlDbReplicaCreateSettings toolSettings, string serviceObjective)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = serviceObjective;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.ServiceObjective"/>.</em></p><p>Name of service objective for the new replica.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetServiceObjective(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceObjective = null;
            return toolSettings;
        }
        #endregion
        #region Tags
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetTags(this AzureSqlDbReplicaCreateSettings toolSettings, string tags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = tags;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Tags"/>.</em></p><p>Resource tags.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetTags(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tags = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetDebug(this AzureSqlDbReplicaCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetDebug(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetHelp(this AzureSqlDbReplicaCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetHelp(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetOutput(this AzureSqlDbReplicaCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetOutput(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetQuery(this AzureSqlDbReplicaCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetQuery(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings SetVerbose(this AzureSqlDbReplicaCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaCreateSettings ResetVerbose(this AzureSqlDbReplicaCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbReplicaDeleteLinkSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbReplicaDeleteLinkSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetName(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetName(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region PartnerServer
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.PartnerServer"/>.</em></p><p>Name of the server that the other replica is in.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetPartnerServer(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string partnerServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerServer = partnerServer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.PartnerServer"/>.</em></p><p>Name of the server that the other replica is in.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetPartnerServer(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerServer = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetResourceGroup(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetResourceGroup(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetServer(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetServer(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region PartnerResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.PartnerResourceGroup"/>.</em></p><p>Name of the resource group that the other replica is in. If unspecified, defaults to the first database's resource group.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetPartnerResourceGroup(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string partnerResourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerResourceGroup = partnerResourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.PartnerResourceGroup"/>.</em></p><p>Name of the resource group that the other replica is in. If unspecified, defaults to the first database's resource group.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetPartnerResourceGroup(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PartnerResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetYes(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Yes"/>.</em></p><p>Do not prompt for confirmation.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetYes(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetDebug(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetDebug(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetHelp(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetHelp(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetOutput(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetOutput(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetQuery(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetQuery(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings SetVerbose(this AzureSqlDbReplicaDeleteLinkSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaDeleteLinkSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaDeleteLinkSettings ResetVerbose(this AzureSqlDbReplicaDeleteLinkSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbReplicaListLinksSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbReplicaListLinksSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetName(this AzureSqlDbReplicaListLinksSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetName(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetResourceGroup(this AzureSqlDbReplicaListLinksSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetResourceGroup(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetServer(this AzureSqlDbReplicaListLinksSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetServer(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetDebug(this AzureSqlDbReplicaListLinksSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetDebug(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetHelp(this AzureSqlDbReplicaListLinksSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetHelp(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetOutput(this AzureSqlDbReplicaListLinksSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetOutput(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetQuery(this AzureSqlDbReplicaListLinksSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetQuery(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaListLinksSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings SetVerbose(this AzureSqlDbReplicaListLinksSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaListLinksSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaListLinksSettings ResetVerbose(this AzureSqlDbReplicaListLinksSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbReplicaSetPrimarySettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbReplicaSetPrimarySettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Name"/>.</em></p><p>Name of the database to fail over.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetName(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Name"/>.</em></p><p>Name of the database to fail over.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetName(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.ResourceGroup"/>.</em></p><p>Name of the resource group containing the secondary replica that will become the new primary.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetResourceGroup(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.ResourceGroup"/>.</em></p><p>Name of the resource group containing the secondary replica that will become the new primary.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetResourceGroup(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Server"/>.</em></p><p>Name of the server containing the secondary replica that will become the new primary.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetServer(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Server"/>.</em></p><p>Name of the server containing the secondary replica that will become the new primary.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetServer(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region AllowDataLoss
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.AllowDataLoss"/>.</em></p><p>If specified, the failover operation will allow data loss.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetAllowDataLoss(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string allowDataLoss)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDataLoss = allowDataLoss;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.AllowDataLoss"/>.</em></p><p>If specified, the failover operation will allow data loss.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetAllowDataLoss(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowDataLoss = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetDebug(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetDebug(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetHelp(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetHelp(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetOutput(this AzureSqlDbReplicaSetPrimarySettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetOutput(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetQuery(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetQuery(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbReplicaSetPrimarySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings SetVerbose(this AzureSqlDbReplicaSetPrimarySettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbReplicaSetPrimarySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbReplicaSetPrimarySettings ResetVerbose(this AzureSqlDbReplicaSetPrimarySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbTdeListActivitySettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbTdeListActivitySettingsExtensions
    {
        #region Database
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetDatabase(this AzureSqlDbTdeListActivitySettings toolSettings, string database)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = database;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetDatabase(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetResourceGroup(this AzureSqlDbTdeListActivitySettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetResourceGroup(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetServer(this AzureSqlDbTdeListActivitySettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetServer(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetDebug(this AzureSqlDbTdeListActivitySettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetDebug(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetHelp(this AzureSqlDbTdeListActivitySettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetHelp(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetOutput(this AzureSqlDbTdeListActivitySettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetOutput(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetQuery(this AzureSqlDbTdeListActivitySettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetQuery(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeListActivitySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings SetVerbose(this AzureSqlDbTdeListActivitySettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeListActivitySettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeListActivitySettings ResetVerbose(this AzureSqlDbTdeListActivitySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbTdeSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbTdeSetSettingsExtensions
    {
        #region Database
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetDatabase(this AzureSqlDbTdeSetSettings toolSettings, string database)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = database;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetDatabase(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetResourceGroup(this AzureSqlDbTdeSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetResourceGroup(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetServer(this AzureSqlDbTdeSetSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetServer(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Status
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Status"/>.</em></p><p>Status of the transparent data encryption.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetStatus(this AzureSqlDbTdeSetSettings toolSettings, SqlDbAuditPolicyUpdateState status)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = status;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Status"/>.</em></p><p>Status of the transparent data encryption.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetStatus(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Status = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetDebug(this AzureSqlDbTdeSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetDebug(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetHelp(this AzureSqlDbTdeSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetHelp(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetOutput(this AzureSqlDbTdeSetSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetOutput(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetQuery(this AzureSqlDbTdeSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetQuery(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings SetVerbose(this AzureSqlDbTdeSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeSetSettings ResetVerbose(this AzureSqlDbTdeSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbTdeShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbTdeShowSettingsExtensions
    {
        #region Database
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetDatabase(this AzureSqlDbTdeShowSettings toolSettings, string database)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = database;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Database"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetDatabase(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Database = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetResourceGroup(this AzureSqlDbTdeShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetResourceGroup(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetServer(this AzureSqlDbTdeShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetServer(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetDebug(this AzureSqlDbTdeShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetDebug(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetHelp(this AzureSqlDbTdeShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetHelp(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetOutput(this AzureSqlDbTdeShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetOutput(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetQuery(this AzureSqlDbTdeShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetQuery(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbTdeShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings SetVerbose(this AzureSqlDbTdeShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbTdeShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbTdeShowSettings ResetVerbose(this AzureSqlDbTdeShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbThreatPolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbThreatPolicyShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetName(this AzureSqlDbThreatPolicyShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetName(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetResourceGroup(this AzureSqlDbThreatPolicyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetResourceGroup(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetServer(this AzureSqlDbThreatPolicyShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetServer(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetDebug(this AzureSqlDbThreatPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetDebug(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetHelp(this AzureSqlDbThreatPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetHelp(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetOutput(this AzureSqlDbThreatPolicyShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetOutput(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetQuery(this AzureSqlDbThreatPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetQuery(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings SetVerbose(this AzureSqlDbThreatPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyShowSettings ResetVerbose(this AzureSqlDbThreatPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlDbThreatPolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlDbThreatPolicyUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetName(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Name"/>.</em></p><p>Name of the Azure SQL Database.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetName(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetResourceGroup(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetResourceGroup(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetServer(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetServer(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region EmailAccountAdmins
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.EmailAccountAdmins"/>.</em></p><p>Whether the alert is sent to the account administrators.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetEmailAccountAdmins(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, SqlDbAuditPolicyUpdateState emailAccountAdmins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EmailAccountAdmins = emailAccountAdmins;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.EmailAccountAdmins"/>.</em></p><p>Whether the alert is sent to the account administrators.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetEmailAccountAdmins(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EmailAccountAdmins = null;
            return toolSettings;
        }
        #endregion
        #region EmailAddresses
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.EmailAddresses"/>.</em></p><p>List of email addresses that alerts are sent to.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetEmailAddresses(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string emailAddresses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EmailAddresses = emailAddresses;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.EmailAddresses"/>.</em></p><p>List of email addresses that alerts are sent to.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetEmailAddresses(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EmailAddresses = null;
            return toolSettings;
        }
        #endregion
        #region DisabledAlerts
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.DisabledAlerts"/>.</em></p><p>List of disabled alerts.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetDisabledAlerts(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string disabledAlerts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisabledAlerts = disabledAlerts;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.DisabledAlerts"/>.</em></p><p>List of disabled alerts.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetDisabledAlerts(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisabledAlerts = null;
            return toolSettings;
        }
        #endregion
        #region RetentionDays
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.RetentionDays"/>.</em></p><p>The number of days to retain threat detection logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetRetentionDays(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string retentionDays)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionDays = retentionDays;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.RetentionDays"/>.</em></p><p>The number of days to retain threat detection logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetRetentionDays(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RetentionDays = null;
            return toolSettings;
        }
        #endregion
        #region State
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.State"/>.</em></p><p>Threat detection policy state.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetState(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, SqlDbThreatPolicyUpdateState state)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.State = state;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.State"/>.</em></p><p>Threat detection policy state.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetState(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.State = null;
            return toolSettings;
        }
        #endregion
        #region StorageAccount
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.StorageAccount"/>.</em></p><p>Name of the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetStorageAccount(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string storageAccount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = storageAccount;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.StorageAccount"/>.</em></p><p>Name of the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetStorageAccount(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageAccount = null;
            return toolSettings;
        }
        #endregion
        #region StorageEndpoint
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.StorageEndpoint"/>.</em></p><p>The storage account endpoint.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetStorageEndpoint(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string storageEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageEndpoint = storageEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.StorageEndpoint"/>.</em></p><p>The storage account endpoint.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetStorageEndpoint(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageEndpoint = null;
            return toolSettings;
        }
        #endregion
        #region StorageKey
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.StorageKey"/>.</em></p><p>Access key for the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetStorageKey(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string storageKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = storageKey;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.StorageKey"/>.</em></p><p>Access key for the storage account.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetStorageKey(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageKey = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetAdd(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetAdd(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetRemove(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetRemove(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetSet(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetSet(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetDebug(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetDebug(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetHelp(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetHelp(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetOutput(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetOutput(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetQuery(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetQuery(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings SetVerbose(this AzureSqlDbThreatPolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlDbThreatPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlDbThreatPolicyUpdateSettings ResetVerbose(this AzureSqlDbThreatPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolOpCancelSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolOpCancelSettingsExtensions
    {
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.ElasticPool"/>.</em></p><p>Name of the Azure SQL Elastic Pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetElasticPool(this AzureSqlElasticPoolOpCancelSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.ElasticPool"/>.</em></p><p>Name of the Azure SQL Elastic Pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetElasticPool(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Name"/>.</em></p><p>The unique name of the operation to cancel.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetName(this AzureSqlElasticPoolOpCancelSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Name"/>.</em></p><p>The unique name of the operation to cancel.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetName(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetResourceGroup(this AzureSqlElasticPoolOpCancelSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetResourceGroup(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetServer(this AzureSqlElasticPoolOpCancelSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetServer(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetDebug(this AzureSqlElasticPoolOpCancelSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetDebug(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetHelp(this AzureSqlElasticPoolOpCancelSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetHelp(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetOutput(this AzureSqlElasticPoolOpCancelSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetOutput(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetQuery(this AzureSqlElasticPoolOpCancelSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetQuery(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings SetVerbose(this AzureSqlElasticPoolOpCancelSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpCancelSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpCancelSettings ResetVerbose(this AzureSqlElasticPoolOpCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlElasticPoolOpListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlElasticPoolOpListSettingsExtensions
    {
        #region ElasticPool
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.ElasticPool"/>.</em></p><p>Name of the Azure SQL Elastic Pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetElasticPool(this AzureSqlElasticPoolOpListSettings toolSettings, string elasticPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = elasticPool;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.ElasticPool"/>.</em></p><p>Name of the Azure SQL Elastic Pool.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetElasticPool(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ElasticPool = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetResourceGroup(this AzureSqlElasticPoolOpListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetResourceGroup(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetServer(this AzureSqlElasticPoolOpListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetServer(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetDebug(this AzureSqlElasticPoolOpListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetDebug(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetHelp(this AzureSqlElasticPoolOpListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetHelp(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetOutput(this AzureSqlElasticPoolOpListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetOutput(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetQuery(this AzureSqlElasticPoolOpListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetQuery(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlElasticPoolOpListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings SetVerbose(this AzureSqlElasticPoolOpListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlElasticPoolOpListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlElasticPoolOpListSettings ResetVerbose(this AzureSqlElasticPoolOpListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerAdAdminCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerAdAdminCreateSettingsExtensions
    {
        #region DisplayName
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.DisplayName"/>.</em></p><p>Display name of the Azure AD administrator user or group.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetDisplayName(this AzureSqlServerAdAdminCreateSettings toolSettings, string displayName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = displayName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.DisplayName"/>.</em></p><p>Display name of the Azure AD administrator user or group.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetDisplayName(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = null;
            return toolSettings;
        }
        #endregion
        #region ObjectId
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.ObjectId"/>.</em></p><p>The unique ID of the Azure AD administrator.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetObjectId(this AzureSqlServerAdAdminCreateSettings toolSettings, string objectId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = objectId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.ObjectId"/>.</em></p><p>The unique ID of the Azure AD administrator.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetObjectId(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetResourceGroup(this AzureSqlServerAdAdminCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetResourceGroup(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region ServerName
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetServerName(this AzureSqlServerAdAdminCreateSettings toolSettings, string serverName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = serverName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetServerName(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetDebug(this AzureSqlServerAdAdminCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetDebug(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetHelp(this AzureSqlServerAdAdminCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetHelp(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetOutput(this AzureSqlServerAdAdminCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetOutput(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetQuery(this AzureSqlServerAdAdminCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetQuery(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings SetVerbose(this AzureSqlServerAdAdminCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminCreateSettings ResetVerbose(this AzureSqlServerAdAdminCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerAdAdminDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerAdAdminDeleteSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetResourceGroup(this AzureSqlServerAdAdminDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetResourceGroup(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region ServerName
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetServerName(this AzureSqlServerAdAdminDeleteSettings toolSettings, string serverName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = serverName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetServerName(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetDebug(this AzureSqlServerAdAdminDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetDebug(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetHelp(this AzureSqlServerAdAdminDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetHelp(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetOutput(this AzureSqlServerAdAdminDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetOutput(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetQuery(this AzureSqlServerAdAdminDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetQuery(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings SetVerbose(this AzureSqlServerAdAdminDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminDeleteSettings ResetVerbose(this AzureSqlServerAdAdminDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerAdAdminListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerAdAdminListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetResourceGroup(this AzureSqlServerAdAdminListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetResourceGroup(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region ServerName
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetServerName(this AzureSqlServerAdAdminListSettings toolSettings, string serverName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = serverName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetServerName(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetDebug(this AzureSqlServerAdAdminListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetDebug(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetHelp(this AzureSqlServerAdAdminListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetHelp(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetOutput(this AzureSqlServerAdAdminListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetOutput(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetQuery(this AzureSqlServerAdAdminListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetQuery(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings SetVerbose(this AzureSqlServerAdAdminListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminListSettings ResetVerbose(this AzureSqlServerAdAdminListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerAdAdminUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerAdAdminUpdateSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetResourceGroup(this AzureSqlServerAdAdminUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetResourceGroup(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region ServerName
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetServerName(this AzureSqlServerAdAdminUpdateSettings toolSettings, string serverName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = serverName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.ServerName"/>.</em></p><p>The name of the SQL Server.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetServerName(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerName = null;
            return toolSettings;
        }
        #endregion
        #region DisplayName
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.DisplayName"/>.</em></p><p>Display name of the Azure AD administrator user or group.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetDisplayName(this AzureSqlServerAdAdminUpdateSettings toolSettings, string displayName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = displayName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.DisplayName"/>.</em></p><p>Display name of the Azure AD administrator user or group.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetDisplayName(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayName = null;
            return toolSettings;
        }
        #endregion
        #region ObjectId
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.ObjectId"/>.</em></p><p>The unique ID of the Azure AD administrator.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetObjectId(this AzureSqlServerAdAdminUpdateSettings toolSettings, string objectId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = objectId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.ObjectId"/>.</em></p><p>The unique ID of the Azure AD administrator.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetObjectId(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ObjectId = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetAdd(this AzureSqlServerAdAdminUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetAdd(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetRemove(this AzureSqlServerAdAdminUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetRemove(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetSet(this AzureSqlServerAdAdminUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetSet(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetDebug(this AzureSqlServerAdAdminUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetDebug(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetHelp(this AzureSqlServerAdAdminUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetHelp(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetOutput(this AzureSqlServerAdAdminUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetOutput(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetQuery(this AzureSqlServerAdAdminUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetQuery(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerAdAdminUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings SetVerbose(this AzureSqlServerAdAdminUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerAdAdminUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerAdAdminUpdateSettings ResetVerbose(this AzureSqlServerAdAdminUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerConnPolicyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerConnPolicyShowSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetResourceGroup(this AzureSqlServerConnPolicyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetResourceGroup(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetServer(this AzureSqlServerConnPolicyShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetServer(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetDebug(this AzureSqlServerConnPolicyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetDebug(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetHelp(this AzureSqlServerConnPolicyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetHelp(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetOutput(this AzureSqlServerConnPolicyShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetOutput(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetQuery(this AzureSqlServerConnPolicyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetQuery(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings SetVerbose(this AzureSqlServerConnPolicyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyShowSettings ResetVerbose(this AzureSqlServerConnPolicyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerConnPolicyUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerConnPolicyUpdateSettingsExtensions
    {
        #region ConnectionType
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.ConnectionType"/>.</em></p><p>The server connection type.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetConnectionType(this AzureSqlServerConnPolicyUpdateSettings toolSettings, SqlServerConnPolicyUpdateConnectionType connectionType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionType = connectionType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.ConnectionType"/>.</em></p><p>The server connection type.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetConnectionType(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionType = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetResourceGroup(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetResourceGroup(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetServer(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetServer(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetAdd(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetAdd(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetRemove(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetRemove(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetSet(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetSet(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetDebug(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetDebug(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetHelp(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetHelp(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetOutput(this AzureSqlServerConnPolicyUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetOutput(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetQuery(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetQuery(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerConnPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings SetVerbose(this AzureSqlServerConnPolicyUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerConnPolicyUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerConnPolicyUpdateSettings ResetVerbose(this AzureSqlServerConnPolicyUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerDnsAliasCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerDnsAliasCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Name"/>.</em></p><p>The name of the server DNS alias.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetName(this AzureSqlServerDnsAliasCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Name"/>.</em></p><p>The name of the server DNS alias.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetName(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetResourceGroup(this AzureSqlServerDnsAliasCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetResourceGroup(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetServer(this AzureSqlServerDnsAliasCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetServer(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetDebug(this AzureSqlServerDnsAliasCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetDebug(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetHelp(this AzureSqlServerDnsAliasCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetHelp(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetOutput(this AzureSqlServerDnsAliasCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetOutput(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetQuery(this AzureSqlServerDnsAliasCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetQuery(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings SetVerbose(this AzureSqlServerDnsAliasCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasCreateSettings ResetVerbose(this AzureSqlServerDnsAliasCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerDnsAliasDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerDnsAliasDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Name"/>.</em></p><p>The name of the server DNS alias.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetName(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Name"/>.</em></p><p>The name of the server DNS alias.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetName(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetResourceGroup(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetResourceGroup(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetServer(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetServer(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetDebug(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetDebug(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetHelp(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetHelp(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetOutput(this AzureSqlServerDnsAliasDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetOutput(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetQuery(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetQuery(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings SetVerbose(this AzureSqlServerDnsAliasDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasDeleteSettings ResetVerbose(this AzureSqlServerDnsAliasDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerDnsAliasListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerDnsAliasListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetResourceGroup(this AzureSqlServerDnsAliasListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetResourceGroup(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetServer(this AzureSqlServerDnsAliasListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetServer(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetDebug(this AzureSqlServerDnsAliasListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetDebug(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetHelp(this AzureSqlServerDnsAliasListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetHelp(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetOutput(this AzureSqlServerDnsAliasListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetOutput(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetQuery(this AzureSqlServerDnsAliasListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetQuery(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings SetVerbose(this AzureSqlServerDnsAliasListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasListSettings ResetVerbose(this AzureSqlServerDnsAliasListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerDnsAliasSetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerDnsAliasSetSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Name"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetName(this AzureSqlServerDnsAliasSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Name"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetName(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region OriginalServer
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.OriginalServer"/>.</em></p><p>The name of the server to which alias is currently pointing.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetOriginalServer(this AzureSqlServerDnsAliasSetSettings toolSettings, string originalServer)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginalServer = originalServer;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.OriginalServer"/>.</em></p><p>The name of the server to which alias is currently pointing.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetOriginalServer(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginalServer = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetResourceGroup(this AzureSqlServerDnsAliasSetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetResourceGroup(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetServer(this AzureSqlServerDnsAliasSetSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetServer(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region OriginalResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.OriginalResourceGroup"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetOriginalResourceGroup(this AzureSqlServerDnsAliasSetSettings toolSettings, string originalResourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginalResourceGroup = originalResourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.OriginalResourceGroup"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetOriginalResourceGroup(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginalResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region OriginalSubscriptionId
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.OriginalSubscriptionId"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetOriginalSubscriptionId(this AzureSqlServerDnsAliasSetSettings toolSettings, string originalSubscriptionId)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginalSubscriptionId = originalSubscriptionId;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.OriginalSubscriptionId"/>.</em></p><p></p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetOriginalSubscriptionId(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OriginalSubscriptionId = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetDebug(this AzureSqlServerDnsAliasSetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetDebug(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetHelp(this AzureSqlServerDnsAliasSetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetHelp(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetOutput(this AzureSqlServerDnsAliasSetSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetOutput(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetQuery(this AzureSqlServerDnsAliasSetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetQuery(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings SetVerbose(this AzureSqlServerDnsAliasSetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasSetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasSetSettings ResetVerbose(this AzureSqlServerDnsAliasSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerDnsAliasShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerDnsAliasShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Name"/>.</em></p><p>The name of the server DNS alias.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetName(this AzureSqlServerDnsAliasShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Name"/>.</em></p><p>The name of the server DNS alias.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetName(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetResourceGroup(this AzureSqlServerDnsAliasShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetResourceGroup(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetServer(this AzureSqlServerDnsAliasShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetServer(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetDebug(this AzureSqlServerDnsAliasShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetDebug(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetHelp(this AzureSqlServerDnsAliasShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetHelp(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetOutput(this AzureSqlServerDnsAliasShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetOutput(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetQuery(this AzureSqlServerDnsAliasShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetQuery(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerDnsAliasShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings SetVerbose(this AzureSqlServerDnsAliasShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerDnsAliasShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerDnsAliasShowSettings ResetVerbose(this AzureSqlServerDnsAliasShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerFirewallRuleCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerFirewallRuleCreateSettingsExtensions
    {
        #region EndIpAddress
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.EndIpAddress"/>.</em></p><p>The end IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetEndIpAddress(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string endIpAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndIpAddress = endIpAddress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.EndIpAddress"/>.</em></p><p>The end IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetEndIpAddress(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndIpAddress = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetName(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetName(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetResourceGroup(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetResourceGroup(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetServer(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetServer(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region StartIpAddress
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.StartIpAddress"/>.</em></p><p>The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetStartIpAddress(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string startIpAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartIpAddress = startIpAddress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.StartIpAddress"/>.</em></p><p>The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetStartIpAddress(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartIpAddress = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetDebug(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetDebug(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetHelp(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetHelp(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetOutput(this AzureSqlServerFirewallRuleCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetOutput(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetQuery(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetQuery(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings SetVerbose(this AzureSqlServerFirewallRuleCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleCreateSettings ResetVerbose(this AzureSqlServerFirewallRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerFirewallRuleDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerFirewallRuleDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetName(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetName(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetResourceGroup(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetResourceGroup(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetServer(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetServer(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetDebug(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetDebug(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetHelp(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetHelp(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetOutput(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetOutput(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetQuery(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetQuery(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings SetVerbose(this AzureSqlServerFirewallRuleDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleDeleteSettings ResetVerbose(this AzureSqlServerFirewallRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerFirewallRuleListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerFirewallRuleListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetResourceGroup(this AzureSqlServerFirewallRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetResourceGroup(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetServer(this AzureSqlServerFirewallRuleListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetServer(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetDebug(this AzureSqlServerFirewallRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetDebug(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetHelp(this AzureSqlServerFirewallRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetHelp(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetOutput(this AzureSqlServerFirewallRuleListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetOutput(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetQuery(this AzureSqlServerFirewallRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetQuery(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings SetVerbose(this AzureSqlServerFirewallRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleListSettings ResetVerbose(this AzureSqlServerFirewallRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerFirewallRuleShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerFirewallRuleShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetName(this AzureSqlServerFirewallRuleShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetName(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetResourceGroup(this AzureSqlServerFirewallRuleShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetResourceGroup(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetServer(this AzureSqlServerFirewallRuleShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetServer(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetDebug(this AzureSqlServerFirewallRuleShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetDebug(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetHelp(this AzureSqlServerFirewallRuleShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetHelp(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetOutput(this AzureSqlServerFirewallRuleShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetOutput(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetQuery(this AzureSqlServerFirewallRuleShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetQuery(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings SetVerbose(this AzureSqlServerFirewallRuleShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleShowSettings ResetVerbose(this AzureSqlServerFirewallRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerFirewallRuleUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerFirewallRuleUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetName(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Name"/>.</em></p><p>The name of the firewall rule.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetName(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetResourceGroup(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetResourceGroup(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetServer(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetServer(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region EndIpAddress
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.EndIpAddress"/>.</em></p><p>The end IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetEndIpAddress(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string endIpAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndIpAddress = endIpAddress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.EndIpAddress"/>.</em></p><p>The end IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetEndIpAddress(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndIpAddress = null;
            return toolSettings;
        }
        #endregion
        #region StartIpAddress
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.StartIpAddress"/>.</em></p><p>The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetStartIpAddress(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string startIpAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartIpAddress = startIpAddress;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.StartIpAddress"/>.</em></p><p>The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all Azure-internal IP addresses.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetStartIpAddress(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartIpAddress = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetDebug(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetDebug(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetHelp(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetHelp(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetOutput(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetOutput(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetQuery(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetQuery(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings SetVerbose(this AzureSqlServerFirewallRuleUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerFirewallRuleUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerFirewallRuleUpdateSettings ResetVerbose(this AzureSqlServerFirewallRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerKeyCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerKeyCreateSettingsExtensions
    {
        #region Kid
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetKid(this AzureSqlServerKeyCreateSettings toolSettings, string kid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = kid;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetKid(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetResourceGroup(this AzureSqlServerKeyCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetResourceGroup(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetServer(this AzureSqlServerKeyCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetServer(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetDebug(this AzureSqlServerKeyCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetDebug(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetHelp(this AzureSqlServerKeyCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetHelp(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetOutput(this AzureSqlServerKeyCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetOutput(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetQuery(this AzureSqlServerKeyCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetQuery(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings SetVerbose(this AzureSqlServerKeyCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyCreateSettings ResetVerbose(this AzureSqlServerKeyCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerKeyDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerKeyDeleteSettingsExtensions
    {
        #region Kid
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetKid(this AzureSqlServerKeyDeleteSettings toolSettings, string kid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = kid;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetKid(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetResourceGroup(this AzureSqlServerKeyDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetResourceGroup(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetServer(this AzureSqlServerKeyDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetServer(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetDebug(this AzureSqlServerKeyDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetDebug(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetHelp(this AzureSqlServerKeyDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetHelp(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetOutput(this AzureSqlServerKeyDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetOutput(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetQuery(this AzureSqlServerKeyDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetQuery(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings SetVerbose(this AzureSqlServerKeyDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyDeleteSettings ResetVerbose(this AzureSqlServerKeyDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerKeyListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerKeyListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetResourceGroup(this AzureSqlServerKeyListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetResourceGroup(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetServer(this AzureSqlServerKeyListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetServer(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetDebug(this AzureSqlServerKeyListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetDebug(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetHelp(this AzureSqlServerKeyListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetHelp(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetOutput(this AzureSqlServerKeyListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetOutput(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetQuery(this AzureSqlServerKeyListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetQuery(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings SetVerbose(this AzureSqlServerKeyListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyListSettings ResetVerbose(this AzureSqlServerKeyListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerKeyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerKeyShowSettingsExtensions
    {
        #region Kid
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetKid(this AzureSqlServerKeyShowSettings toolSettings, string kid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = kid;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key. An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetKid(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetResourceGroup(this AzureSqlServerKeyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetResourceGroup(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetServer(this AzureSqlServerKeyShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetServer(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetDebug(this AzureSqlServerKeyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetDebug(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetHelp(this AzureSqlServerKeyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetHelp(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetOutput(this AzureSqlServerKeyShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetOutput(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetQuery(this AzureSqlServerKeyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetQuery(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerKeyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings SetVerbose(this AzureSqlServerKeyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerKeyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerKeyShowSettings ResetVerbose(this AzureSqlServerKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerTdeKeySetSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerTdeKeySetSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetResourceGroup(this AzureSqlServerTdeKeySetSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetResourceGroup(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetServer(this AzureSqlServerTdeKeySetSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetServer(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region ServerKeyType
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.ServerKeyType"/>.</em></p><p>The type of the server key.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetServerKeyType(this AzureSqlServerTdeKeySetSettings toolSettings, SqlServerTdeKeySetServerKeyType serverKeyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerKeyType = serverKeyType;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.ServerKeyType"/>.</em></p><p>The type of the server key.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetServerKeyType(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServerKeyType = null;
            return toolSettings;
        }
        #endregion
        #region Kid
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key to be made encryption protector.An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetKid(this AzureSqlServerTdeKeySetSettings toolSettings, string kid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = kid;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Kid"/>.</em></p><p>The Azure Key Vault key identifier of the server key to be made encryption protector.An example key identifier is "&lt;a href="https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901"&gt;https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901&lt;/a&gt;".</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetKid(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kid = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetDebug(this AzureSqlServerTdeKeySetSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetDebug(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetHelp(this AzureSqlServerTdeKeySetSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetHelp(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetOutput(this AzureSqlServerTdeKeySetSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetOutput(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetQuery(this AzureSqlServerTdeKeySetSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetQuery(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeySetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings SetVerbose(this AzureSqlServerTdeKeySetSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeySetSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeySetSettings ResetVerbose(this AzureSqlServerTdeKeySetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerTdeKeyShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerTdeKeyShowSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetResourceGroup(this AzureSqlServerTdeKeyShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetResourceGroup(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetServer(this AzureSqlServerTdeKeyShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.Server"/>.</em></p><p>Name of the Azure SQL server.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetServer(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetDebug(this AzureSqlServerTdeKeyShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetDebug(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetHelp(this AzureSqlServerTdeKeyShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetHelp(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetOutput(this AzureSqlServerTdeKeyShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetOutput(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetQuery(this AzureSqlServerTdeKeyShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetQuery(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerTdeKeyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings SetVerbose(this AzureSqlServerTdeKeyShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerTdeKeyShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerTdeKeyShowSettings ResetVerbose(this AzureSqlServerTdeKeyShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerVnetRuleCreateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerVnetRuleCreateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetName(this AzureSqlServerVnetRuleCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetName(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetResourceGroup(this AzureSqlServerVnetRuleCreateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetResourceGroup(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetServer(this AzureSqlServerVnetRuleCreateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetServer(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Subnet"/>.</em></p><p>Name or ID of the subnet that allows access to an Azure Sql Server. If subnet name is provided, --vnet-name must be provided.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetSubnet(this AzureSqlServerVnetRuleCreateSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Subnet"/>.</em></p><p>Name or ID of the subnet that allows access to an Azure Sql Server. If subnet name is provided, --vnet-name must be provided.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetSubnet(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region IgnoreMissingEndpoint
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetIgnoreMissingEndpoint(this AzureSqlServerVnetRuleCreateSettings toolSettings, bool? ignoreMissingEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = ignoreMissingEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetIgnoreMissingEndpoint(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureSqlServerVnetRuleCreateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings EnableIgnoreMissingEndpoint(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureSqlServerVnetRuleCreateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings DisableIgnoreMissingEndpoint(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureSqlServerVnetRuleCreateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ToggleIgnoreMissingEndpoint(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = !toolSettings.IgnoreMissingEndpoint;
            return toolSettings;
        }
        #endregion
        #region VnetName
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.VnetName"/>.</em></p><p>The virtual network name.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetVnetName(this AzureSqlServerVnetRuleCreateSettings toolSettings, string vnetName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = vnetName;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.VnetName"/>.</em></p><p>The virtual network name.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetVnetName(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VnetName = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetDebug(this AzureSqlServerVnetRuleCreateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetDebug(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetHelp(this AzureSqlServerVnetRuleCreateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetHelp(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetOutput(this AzureSqlServerVnetRuleCreateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetOutput(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetQuery(this AzureSqlServerVnetRuleCreateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetQuery(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings SetVerbose(this AzureSqlServerVnetRuleCreateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleCreateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleCreateSettings ResetVerbose(this AzureSqlServerVnetRuleCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerVnetRuleDeleteSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerVnetRuleDeleteSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetName(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetName(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetResourceGroup(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetResourceGroup(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetServer(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetServer(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetDebug(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetDebug(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetHelp(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetHelp(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetOutput(this AzureSqlServerVnetRuleDeleteSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetOutput(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetQuery(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetQuery(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings SetVerbose(this AzureSqlServerVnetRuleDeleteSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleDeleteSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleDeleteSettings ResetVerbose(this AzureSqlServerVnetRuleDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerVnetRuleListSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerVnetRuleListSettingsExtensions
    {
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetResourceGroup(this AzureSqlServerVnetRuleListSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetResourceGroup(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetServer(this AzureSqlServerVnetRuleListSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetServer(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetDebug(this AzureSqlServerVnetRuleListSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetDebug(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetHelp(this AzureSqlServerVnetRuleListSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetHelp(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetOutput(this AzureSqlServerVnetRuleListSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetOutput(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetQuery(this AzureSqlServerVnetRuleListSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetQuery(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings SetVerbose(this AzureSqlServerVnetRuleListSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleListSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleListSettings ResetVerbose(this AzureSqlServerVnetRuleListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerVnetRuleShowSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerVnetRuleShowSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetName(this AzureSqlServerVnetRuleShowSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetName(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetResourceGroup(this AzureSqlServerVnetRuleShowSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetResourceGroup(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetServer(this AzureSqlServerVnetRuleShowSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetServer(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetDebug(this AzureSqlServerVnetRuleShowSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetDebug(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetHelp(this AzureSqlServerVnetRuleShowSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetHelp(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetOutput(this AzureSqlServerVnetRuleShowSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetOutput(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetQuery(this AzureSqlServerVnetRuleShowSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetQuery(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings SetVerbose(this AzureSqlServerVnetRuleShowSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleShowSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleShowSettings ResetVerbose(this AzureSqlServerVnetRuleShowSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region AzureSqlServerVnetRuleUpdateSettingsExtensions
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class AzureSqlServerVnetRuleUpdateSettingsExtensions
    {
        #region Name
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetName(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Name"/>.</em></p><p>The name of the virtual network rule.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetName(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region ResourceGroup
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetResourceGroup(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string resourceGroup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = resourceGroup;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.ResourceGroup"/>.</em></p><p>Name of resource group. You can configure the default group using `az configure --defaults group=&amp;lt;name&amp;gt;`.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetResourceGroup(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceGroup = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetServer(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Server"/>.</em></p><p>The name of the server.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetServer(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Subnet"/>.</em></p><p>Name or ID of the subnet that allows access to an Azure Sql Server. If subnet name is provided, --vnet-name must be provided.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetSubnet(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = subnet;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Subnet"/>.</em></p><p>Name or ID of the subnet that allows access to an Azure Sql Server. If subnet name is provided, --vnet-name must be provided.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetSubnet(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Subnet = null;
            return toolSettings;
        }
        #endregion
        #region IgnoreMissingEndpoint
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetIgnoreMissingEndpoint(this AzureSqlServerVnetRuleUpdateSettings toolSettings, bool? ignoreMissingEndpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = ignoreMissingEndpoint;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetIgnoreMissingEndpoint(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = null;
            return toolSettings;
        }
        /// <summary><p><em>Enables <see cref="AzureSqlServerVnetRuleUpdateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings EnableIgnoreMissingEndpoint(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = true;
            return toolSettings;
        }
        /// <summary><p><em>Disables <see cref="AzureSqlServerVnetRuleUpdateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings DisableIgnoreMissingEndpoint(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = false;
            return toolSettings;
        }
        /// <summary><p><em>Toggles <see cref="AzureSqlServerVnetRuleUpdateSettings.IgnoreMissingEndpoint"/>.</em></p><p>Create firewall rule before the virtual network has vnet service endpoint enabled.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ToggleIgnoreMissingEndpoint(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreMissingEndpoint = !toolSettings.IgnoreMissingEndpoint;
            return toolSettings;
        }
        #endregion
        #region Add
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetAdd(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string add)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = add;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Add"/>.</em></p><p>Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty &lt;key=value, string or JSON string&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetAdd(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Add = null;
            return toolSettings;
        }
        #endregion
        #region Remove
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetRemove(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string remove)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = remove;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Remove"/>.</em></p><p>Remove a property or an element from a list.  Example: --remove property.list &lt;indexToRemove&gt; OR --remove propertyToRemove.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetRemove(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remove = null;
            return toolSettings;
        }
        #endregion
        #region Set
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetSet(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string set)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = set;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Set"/>.</em></p><p>Update an object by specifying a property path and value to set.  Example: --set property1.property2=&lt;value&gt;.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetSet(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Set = null;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetDebug(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Debug"/>.</em></p><p>Increase logging verbosity to show all debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetDebug(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetHelp(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Help"/>.</em></p><p>Show this help message and exit.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetHelp(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetOutput(this AzureSqlServerVnetRuleUpdateSettings toolSettings, Output output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Output"/>.</em></p><p>Output format.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetOutput(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Query
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetQuery(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string query)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = query;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Query"/>.</em></p><p>JMESPath query string. See &lt;a href="http://jmespath.org/"&gt;http://jmespath.org/&lt;/a&gt; for more information and examples.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetQuery(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Query = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary><p><em>Sets <see cref="AzureSqlServerVnetRuleUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings SetVerbose(this AzureSqlServerVnetRuleUpdateSettings toolSettings, string verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="AzureSqlServerVnetRuleUpdateSettings.Verbose"/>.</em></p><p>Increase logging verbosity. Use --debug for full debug logs.</p></summary>
        [Pure]
        public static AzureSqlServerVnetRuleUpdateSettings ResetVerbose(this AzureSqlServerVnetRuleUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region SqlDbStorageKeyType
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbStorageKeyType : Enumeration
    {
        public static SqlDbStorageKeyType sharedaccesskey = new SqlDbStorageKeyType { Value = "sharedaccesskey" };
        public static SqlDbStorageKeyType storageaccesskey = new SqlDbStorageKeyType { Value = "storageaccesskey" };
    }
    #endregion
    #region SqlDbAuthType
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbAuthType : Enumeration
    {
        public static SqlDbAuthType adpassword = new SqlDbAuthType { Value = "adpassword" };
        public static SqlDbAuthType sql = new SqlDbAuthType { Value = "sql" };
    }
    #endregion
    #region SqlDbShowConnectionStringAuthType
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbShowConnectionStringAuthType : Enumeration
    {
        public static SqlDbShowConnectionStringAuthType adintegrated = new SqlDbShowConnectionStringAuthType { Value = "adintegrated" };
        public static SqlDbShowConnectionStringAuthType adpassword = new SqlDbShowConnectionStringAuthType { Value = "adpassword" };
        public static SqlDbShowConnectionStringAuthType sqlpassword = new SqlDbShowConnectionStringAuthType { Value = "sqlpassword" };
    }
    #endregion
    #region SqlDbListEditionsShowDetails
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbListEditionsShowDetails : Enumeration
    {
        public static SqlDbListEditionsShowDetails max_size = new SqlDbListEditionsShowDetails { Value = "max-size" };
    }
    #endregion
    #region SqlElasticPoolListEditionsShowDetails
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlElasticPoolListEditionsShowDetails : Enumeration
    {
        public static SqlElasticPoolListEditionsShowDetails db_max_dtu = new SqlElasticPoolListEditionsShowDetails { Value = "db-max-dtu" };
        public static SqlElasticPoolListEditionsShowDetails db_max_size = new SqlElasticPoolListEditionsShowDetails { Value = "db-max-size" };
        public static SqlElasticPoolListEditionsShowDetails db_min_dtu = new SqlElasticPoolListEditionsShowDetails { Value = "db-min-dtu" };
        public static SqlElasticPoolListEditionsShowDetails max_size = new SqlElasticPoolListEditionsShowDetails { Value = "max-size" };
    }
    #endregion
    #region SqlDbShowConnectionStringClient
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbShowConnectionStringClient : Enumeration
    {
        public static SqlDbShowConnectionStringClient ado_net = new SqlDbShowConnectionStringClient { Value = "ado.net" };
        public static SqlDbShowConnectionStringClient jdbc = new SqlDbShowConnectionStringClient { Value = "jdbc" };
        public static SqlDbShowConnectionStringClient odbc = new SqlDbShowConnectionStringClient { Value = "odbc" };
        public static SqlDbShowConnectionStringClient php = new SqlDbShowConnectionStringClient { Value = "php" };
        public static SqlDbShowConnectionStringClient php_pdo = new SqlDbShowConnectionStringClient { Value = "php_pdo" };
        public static SqlDbShowConnectionStringClient sqlcmd = new SqlDbShowConnectionStringClient { Value = "sqlcmd" };
    }
    #endregion
    #region SqlDbAuditPolicyUpdateState
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbAuditPolicyUpdateState : Enumeration
    {
        public static SqlDbAuditPolicyUpdateState disabled = new SqlDbAuditPolicyUpdateState { Value = "disabled" };
        public static SqlDbAuditPolicyUpdateState enabled = new SqlDbAuditPolicyUpdateState { Value = "enabled" };
    }
    #endregion
    #region SqlDbThreatPolicyUpdateState
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlDbThreatPolicyUpdateState : Enumeration
    {
        public static SqlDbThreatPolicyUpdateState disabled = new SqlDbThreatPolicyUpdateState { Value = "disabled" };
        public static SqlDbThreatPolicyUpdateState enabled = new SqlDbThreatPolicyUpdateState { Value = "enabled" };
        public static SqlDbThreatPolicyUpdateState new_ = new SqlDbThreatPolicyUpdateState { Value = "new" };
    }
    #endregion
    #region SqlServerConnPolicyUpdateConnectionType
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlServerConnPolicyUpdateConnectionType : Enumeration
    {
        public static SqlServerConnPolicyUpdateConnectionType default_ = new SqlServerConnPolicyUpdateConnectionType { Value = "default" };
        public static SqlServerConnPolicyUpdateConnectionType proxy = new SqlServerConnPolicyUpdateConnectionType { Value = "proxy" };
        public static SqlServerConnPolicyUpdateConnectionType redirect = new SqlServerConnPolicyUpdateConnectionType { Value = "redirect" };
    }
    #endregion
    #region SqlServerTdeKeySetServerKeyType
    /// <summary><p>Used within <see cref="AzureSqlTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class SqlServerTdeKeySetServerKeyType : Enumeration
    {
        public static SqlServerTdeKeySetServerKeyType azurekeyvault = new SqlServerTdeKeySetServerKeyType { Value = "azurekeyvault" };
        public static SqlServerTdeKeySetServerKeyType servicemanaged = new SqlServerTdeKeySetServerKeyType { Value = "servicemanaged" };
    }
    #endregion
}
